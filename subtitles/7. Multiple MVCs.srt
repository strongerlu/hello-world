1
00:00:01,000 --> 00:00:04,630
[MUSIC]
［音乐］

2
00:00:04,630 --> 00:00:07,930
Stanford University.
斯坦福大学

3
00:00:07,940 --> 00:00:11,970
Okay, well, welcome to lecture 7 of CS193P.
欢迎来到 CS193P 课程的第七课

4
00:00:11,970 --> 00:00:14,240
This is the winter of 2015.
这是 2015 年冬季课程

5
00:00:14,240 --> 00:00:16,070
And today,
今天

6
00:00:16,080 --> 00:00:19,180
we are going to talk about multiple MVCs, all right?
我们想讲一下多重 MVC（Multiple MVCs）的内容

7
00:00:19,180 --> 00:00:21,110
That includes Split View Controller,
这将涉及到 Split View Controller 和

8
00:00:21,110 --> 00:00:22,150
Navigation Controller.
Navigation Controller

9
00:00:22,150 --> 00:00:24,150
We talked about Tab Bar Controller a little bit
我们在上一讲中已经讲过一点 Tab Bar Controller 的内容

10
00:00:24,150 --> 00:00:25,380
last time.

11
00:00:25,380 --> 00:00:27,920
We're also gonna talk about segues which is how we make
我们同样会在本节课中讲到 Segues

12
00:00:27,920 --> 00:00:32,820
all those multiple MVCs kind of transition to each other.
Segues 是多重 MVC 之间转换的一个东西

13
00:00:32,820 --> 00:00:35,590
And I have a big demo that shows it all off.
这里我会有一个比较大的 Demo 来演示这部分

14
00:00:35,590 --> 00:00:37,990
And that after that demo I'll come back.
在 Demo 之后，我们回到主题

15
00:00:37,990 --> 00:00:42,130
We'll talk about popovers which are similar thing for
然后，我们会谈到 Popovers，Popovers 和多重 MVC 有一些相似的地方

16
00:00:42,130 --> 00:00:44,830
having multiple MVCs but are not quite the same.
但不是完全一样的

17
00:00:44,830 --> 00:00:46,170
So that's why I've kind of
所以这是为什么我把 Popovers 这块

18
00:00:46,170 --> 00:00:47,500
segregated them off to the end.
放到最后的原因

19
00:00:47,500 --> 00:00:49,440
And we'll have a demo about that.
同样我们也会有一个关于 Popovers 的 Demo

20
00:00:50,640 --> 00:00:52,600
All right. So MVCs working together.
好了，介绍完毕。多重 MVC 一起协同工作

21
00:00:52,610 --> 00:00:55,910
These are the slide we saw at the end of last time.
这些是我们上次课最后看到的 Slide

22
00:00:55,910 --> 00:00:58,980
We're trying to build apps by taking our MVCs and combining
我们尝试通过让我们的 MVC 和

23
00:00:58,980 --> 00:01:02,580
them with tab bar, Split View, and Navigation Controller.
Tab Bar, Split View, Navigation Controller 混合在一起来构建我们的应用

24
00:01:02,580 --> 00:01:04,420
We talked about Tab Bar Controller which is
我们讲过 Tab Bar Controller 就是

25
00:01:04,420 --> 00:01:06,980
just simply four or five or however many
用一个小的 Tab Bar 来将四、五个或者任何数目的

26
00:01:06,990 --> 00:01:10,790
MVCs all connected by just having this little tab bar so
MVC 连接在一起，然后让你选择你想要展示那一个

27
00:01:10,790 --> 00:01:13,460
the bottom just picks which MVC you want to see.
MVC 的一个东西

28
00:01:13,460 --> 00:01:16,260
Each MVC by the way in the tab bar's completely independent.
在 Tab Bar 中的任意一个 MVC 都是独立的

29
00:01:16,260 --> 00:01:17,230
It runs on its own.
独立运行

30
00:01:17,230 --> 00:01:19,090
It doesn't depend on the other ones.
不依赖 Tab Bar 中的其他 MVC 而运行

31
00:01:19,100 --> 00:01:21,030
It actually might be kind of bad object on your
所以，假如你应用中，Tab Bar 中的 MVC

32
00:01:21,030 --> 00:01:23,430
programming really for them to depend on the other one.
是依赖于其他的 MVC 的话，这是一种不好的编程方式

33
00:01:23,430 --> 00:01:27,340
So, tab bars for peers that aren't really talking to each
所以 Tab Bar 是为了那些层次上互相有关系的 MVC 而设计的

34
00:01:27,340 --> 00:01:30,870
other they're just working together, they're related.
并不是为了那些在逻辑上协同工作的 MVC 而设计的

35
00:01:30,870 --> 00:01:32,440
Maybe they share a model and
可能它们共用同样一个 Model

36
00:01:32,440 --> 00:01:35,410
they're each having a different part of the model
也有可能它们用同一个 Model 中的不同部分

37
00:01:35,410 --> 00:01:36,580
or whatever.
或者其他情况

38
00:01:36,580 --> 00:01:37,740
And then we talked about Split View Controller,
接下来我们讲到 Split View Controller

39
00:01:37,750 --> 00:01:41,350
which only has two MVCs in it, a master, and a detail.
它其中只有两个 MVC，一个 Master，一个 Detail

40
00:01:41,350 --> 00:01:42,950
We call them master and detail, by the way,
我们称之这两者为 Master 和 Detail 是因为

41
00:01:42,950 --> 00:01:46,120
because the master is usually the one determining what's in
Master 决定了 Detail 的内容是什么

42
00:01:46,120 --> 00:01:47,570
the detail.

43
00:01:47,570 --> 00:01:49,020
So the master is letting you view something,
举例来说，Master 让你浏览一些东西

44
00:01:49,020 --> 00:01:52,060
and then you're going to use the detail to see more detail
然后 Detail 让你浏览你在 Master 中做的东西更加详细的信息

45
00:01:52,060 --> 00:01:54,090
about what you're doing in the master, okay?
明白了吗？

46
00:01:54,090 --> 00:01:57,330
So that's why we call it master and detail.
这就是我们为什么叫它们 Master 和 Detail

47
00:01:57,330 --> 00:02:00,400
So we're going to pick up now with Navigation Controller.
接下来，我们讲一下 Navigation Controller

48
00:02:00,400 --> 00:02:03,900
So Navigation Controller is just yet another MVC whose
Navigation Controller 就是一个 MVC

49
00:02:03,900 --> 00:02:07,800
View is multiple of other MVCs and Navigation Controller can
它的 View 由其他的 MVC 组成

50
00:02:07,810 --> 00:02:09,970
handle any number of other MVCs.
Navigation Controller 可以包含任意数量的 MVC

51
00:02:09,970 --> 00:02:11,270
Okay.

52
00:02:11,280 --> 00:02:14,810
And it puts them on screen, it shares the screen instead of
它把其他的 MVC 放在屏幕上，与其他类型的 Controller 不同的是，它共享这个屏幕

53
00:02:14,810 --> 00:02:17,550
just putting them side by side or putting them with the tabs,
而不是将其他的 MVC 一一放置，或者放在 Tab Bar 上

54
00:02:17,550 --> 00:02:20,010
it puts them like a stack of cards.
它像一堆卡片一样放置这些 MVC，这里我们把 MVC 类比成卡片

55
00:02:20,020 --> 00:02:21,150
Okay?
明白了吗？

56
00:02:21,150 --> 00:02:22,280
So Navigation Controller's basically stacking them
所以，Navigation Controller 基本上就是像一堆卡片一样放置 MVC

57
00:02:22,280 --> 00:02:24,080
like cards and you can only see the one on top.
所以，你只能看到最上面的那个 MVC

58
00:02:25,290 --> 00:02:26,920
That's how Navigation Controller
这就是 Navigation Controller 如何

59
00:02:26,920 --> 00:02:29,460
shares the small screen space between multiple MVCs.
在多重 MVC 之间共享一个小的屏幕空间的

60
00:02:29,460 --> 00:02:31,560
So it's gonna stack these MVCs up.
它会将这些 MVC 堆起来

61
00:02:31,560 --> 00:02:33,890
So here's a Navigation Controller.
这里有一个 Navigation Controller

62
00:02:33,890 --> 00:02:35,530
And it's got an MVC in it.
它的里面有一个 MVC

63
00:02:35,530 --> 00:02:39,200
This is the "All Settings" MVC from your device.
这里它显示的 MVC 是你设备的 "All Settings" MVC

64
00:02:39,200 --> 00:02:40,870
If you go look in your iPhone or
当你打开你的 iPhone

65
00:02:40,870 --> 00:02:42,530
whatever, you'll see the settings app looks like this.
或者其他 iOS 设备时，你会看到设置 App 的样子就是这样

66
00:02:42,540 --> 00:02:45,200
So this is just an MVC that's kind of the top level.
这就是在最顶层的 MVC

67
00:02:45,200 --> 00:02:49,040
Has all the settings accessible from here.
它包含了所有设置的一个入口

68
00:02:49,040 --> 00:02:53,780
Now the Navigation Controller is drawing only a little part
需要注意的是，由 Navigation Controller 只会绘制它的 View 的一小部分

69
00:02:53,780 --> 00:02:57,410
of its View here, which is that title bar.
就是 Title Bar（顶部的一块区域）

70
00:02:57,420 --> 00:02:59,950
And the Navigation Controller will put the title
Navigation Controller 会在 Title Bar 这里显示标题（Title）

71
00:02:59,950 --> 00:03:02,550
there, and also you can have a couple of buttons up at
当然你还可以在这里放置一些按钮

72
00:03:02,550 --> 00:03:05,490
the top and the Navigation Controller draws that part.
Navigation Controller 也会帮你绘制

73
00:03:05,490 --> 00:03:06,820
The rest of it is totally drawn,
而在它之外的部分

74
00:03:06,820 --> 00:03:10,390
and even underneath that title bar, totally drawn by
甚至是在 Title Bar 底下（而不是下方）的那部分

75
00:03:10,390 --> 00:03:13,660
whatever MVC is on top of this stack of cards.
由 MVC 堆栈顶部的那个 MVC 来负责绘图

76
00:03:13,660 --> 00:03:14,930
Okay, and right now the only thing on
在这个图片中

77
00:03:14,930 --> 00:03:18,700
our stack of cards is this "All Settings" MVC.
我们 MVC 堆栈顶部的那个 MVC 是 "All Settings" MVC

78
00:03:18,700 --> 00:03:19,870
Now even though the contents of
尽管顶部的部分由 Navigation Controller 来绘制

79
00:03:19,870 --> 00:03:22,700
the top are drawn by the Navigation Controller, what
但是，顶部部分的内容

80
00:03:22,700 --> 00:03:27,340
the contents are is determined by the MVC that's showing.
仍是由当前 MVC 堆栈顶部的 MVC 所决定的

81
00:03:27,340 --> 00:03:28,710
Okay? And that's done with this

82
00:03:28,710 --> 00:03:31,580
UIViewController property called navigationItem.
UIViewController 里有一个叫 navigationItem 的属性

83
00:03:31,580 --> 00:03:33,040
So if you go look in the documentation for
如果你查看 UIViewController 的文档时

84
00:03:33,050 --> 00:03:35,510
UIViewController you'll see this property navigationItem.
你会看到有 navigationItem 这么一个属性

85
00:03:35,510 --> 00:03:39,720
If you click through to the type UINavigation item you'll
如果你查看 UINavigation 类型的东西的文档时

86
00:03:39,720 --> 00:03:41,780
see that it's got a lot of properties and
你看到它有许多的属性

87
00:03:41,790 --> 00:03:45,690
they're like left button, right button, title.
例如左按钮、右按钮、标题

88
00:03:45,690 --> 00:03:47,540
Things like that. So,
等等类似的东西

89
00:03:47,540 --> 00:03:49,390
the way the Navigation Controllers figures out
Navigation Controller 通过查询当前 MVC 堆栈顶部的 MVC

90
00:03:49,390 --> 00:03:52,590
what to put in the top bar is it asks whatever MVC is on
来决定它在 Title Bar 上显示的内容

91
00:03:52,600 --> 00:03:54,100
top of the stack.

92
00:03:54,100 --> 00:03:56,900
So as you go to different MVCs being on this stack of
所以栈顶 MVC 在不断变化的同时

93
00:03:56,900 --> 00:03:59,200
cards that thing at the top will change.
Navigation Controller 顶部区域也会随之变化

94
00:04:00,300 --> 00:04:01,200
Okay?
有问题吗？

95
00:04:01,200 --> 00:04:04,470
So, let's say I click on General here,
假如我点击 General

96
00:04:04,470 --> 00:04:06,070
because I want to see general settings.
因为我想看看通用设置

97
00:04:06,070 --> 00:04:09,770
Okay, so I click on it, and a new MVC gets put on top of
好的，当我点击 General 的时候，一个新的 MVC 就放在 MVC 堆栈的顶部了

98
00:04:09,780 --> 00:04:12,910
the stack of cards, so now I can't see the other one, okay?
现在，我就看不到其他的 MVC 了

99
00:04:12,910 --> 00:04:14,180
This new one is overlaying it,
新出现的 MVC 覆盖在其他 MVC 之上了

100
00:04:14,180 --> 00:04:17,050
and this is just a "General Settings" MVC.
这里是一个 "General Settings" MVC

101
00:04:17,050 --> 00:04:19,680
Completely different MVC,
一个完全不同的 MVC

102
00:04:19,680 --> 00:04:22,320
completely independent of the other one working on its own.
完全独立于其他 MVC 而工作的一个 MVC

103
00:04:22,320 --> 00:04:23,650
By the way,
这里顺便提一句

104
00:04:23,650 --> 00:04:24,990
I don't have a good screenshot of this unfortunately, but
这里我不巧，没有一个很棒的截图来给你们展示其他的功能

105
00:04:24,990 --> 00:04:27,720
it's also possible for the Navigation Controller to
但是 Navigation Controller 可以

106
00:04:27,730 --> 00:04:31,730
draw some buttons along the bottom there.
在底部绘制几个新的按钮

107
00:04:31,730 --> 00:04:33,190
A little small sliver on the bottom.
可以在底部有一个小的灰色栏

108
00:04:33,200 --> 00:04:36,400
And it get those button items to put there,
然后将按钮置于那里

109
00:04:36,400 --> 00:04:40,000
by asking the MVC that's on top of the stack of cards for
而这个灰色栏的按钮布局是可以通过堆栈顶部的 MVC 的

110
00:04:40,000 --> 00:04:42,670
the toolbar items property.
toolbarItems 属性来设置的

111
00:04:42,670 --> 00:04:43,870
So if you look at toolbar items,
当你查看 toolbarItems 的文档时

112
00:04:43,870 --> 00:04:47,240
it's just an Array of these Bar Buttons, so
你会发现它就是一系列 Bar Button 组成的数组

113
00:04:47,240 --> 00:04:50,080
any MVC that returns anything in that Array,
当任意一个在 Navigation Controller 堆栈中的 MVC

114
00:04:50,080 --> 00:04:52,140
when it's in a Navigation Controller like this,
在 toolbarItems 数组中返回什么东西的时候

115
00:04:52,150 --> 00:04:54,280
those buttons will appear at the bottom.
那些按钮会出现在屏幕的底部

116
00:04:54,280 --> 00:04:55,710
So those would change each time you go
同样，每次当你在堆栈上添加新的 MVC 的时候

117
00:04:55,720 --> 00:04:58,320
to the next thing on the stack as well.
这些按钮也会随之变化

118
00:04:58,320 --> 00:05:00,920
So let's go ahead and click on something here.
现在让我们继续点击什么东西

119
00:05:01,920 --> 00:05:04,720
Let's click on, oh sorry, the back button.
让我们点击，噢，返回按钮

120
00:05:04,720 --> 00:05:07,290
Yeah, you see there's a back button in the upper left.
你可以在屏幕的左上方看到一个返回按钮

121
00:05:07,290 --> 00:05:11,090
The back button says, Throw the top card off.
这个返回按钮的意思是，移走最顶部的那张卡片

122
00:05:11,100 --> 00:05:12,260
That's basically what back means.
这是返回最基本的意思

123
00:05:12,260 --> 00:05:14,250
Throw the top card on
移走 MVC 堆栈中

124
00:05:14,250 --> 00:05:16,230
this stack of MVCs that we're building, throw it off, and
最顶部的那张卡片

125
00:05:16,230 --> 00:05:18,000
then I'm going to go back to where I was before.
然后将我返回到我之前的那个位置

126
00:05:18,000 --> 00:05:19,670
So that's how back works, it just throws it off.
这就是返回如何工作的，扔掉卡片

127
00:05:19,670 --> 00:05:21,570
And when it throws it off, it completely throws it off,
当从 MVC 堆栈中移除最顶部的那张卡片时，它是完全被移除的

128
00:05:21,570 --> 00:05:22,800
it disappears.
它消失了

129
00:05:22,810 --> 00:05:23,500
Completely gone.
完全消失

130
00:05:23,510 --> 00:05:24,400
All right?
明白了吗？

131
00:05:24,410 --> 00:05:27,170
Out of the heep, okay?
从堆栈中完全移除了

132
00:05:27,180 --> 00:05:30,010
All right, so let's put another card on the stacks,
好的，接下来让我们在堆栈中增加一个卡片

133
00:05:30,010 --> 00:05:32,140
I'm going to click on Accessibility here,
我点击这里的 Accessibility

134
00:05:32,150 --> 00:05:34,350
another card's going to slide in,
另外一个卡片将会移入

135
00:05:34,350 --> 00:05:39,380
I'm trying to simulate the animation of it but in keynote
我尝试在 Keynote 里模仿这个动画

136
00:05:39,390 --> 00:05:42,290
I can't exactly do it, but it slides in from the side.
我不能很精确地模仿它，但是他从侧边移进去

137
00:05:42,290 --> 00:05:44,710
And this is yet
现在，这是

138
00:05:44,710 --> 00:05:47,120
another completely different MVC, the "Accessibility" MVC.
另外的一个完全不同的 MVC，"Accessibility" MVC

139
00:05:47,130 --> 00:05:48,460
And we can pick something out of here,
这里我可以选择一些东西

140
00:05:48,460 --> 00:05:51,060
like I'm going to pick Larger Text right there, and
比如，我点击 Larger Text

141
00:05:51,060 --> 00:05:52,900
another MVC is going to slide in.
这时，会有另外的一个 MVC 移入

142
00:05:52,900 --> 00:05:55,530
So we have four MVCs, totally different MVCs,
现在，我们有 4 个完全不同的 MVC 了

143
00:05:55,530 --> 00:05:57,530
on our stack of cards right here.
都在卡片堆栈上

144
00:05:57,540 --> 00:06:00,400
And the one on top, which is the last one that I chose,
最顶上的那个，也就是我最后选择的那个

145
00:06:00,400 --> 00:06:02,600
this "Larger Text" MVC, is showing.
"Larger Text" MVC，就是正在显示的这个 MVC

146
00:06:02,610 --> 00:06:03,840
Okay? The rest of them are there,
明白了吗？在它的底下有其他的 MVC

147
00:06:03,840 --> 00:06:05,670
you just can't see
但你看不见

148
00:06:05,670 --> 00:06:07,510
them because they're underneath this top card.
因为被顶部的卡片覆盖住了

149
00:06:07,510 --> 00:06:08,940
Okay, so now let's do the back button.
好的，现在让我们做返回操作

150
00:06:08,950 --> 00:06:12,350
So I'm going to click this back button in the upper left
我将点击左上角的返回按钮

151
00:06:12,350 --> 00:06:15,420
and when I do, it takes that "Larger Text" one off, throws it
当我点击的时候，它会将 "Larger Text" MVC 移走

152
00:06:15,420 --> 00:06:18,750
out, and now we've got the Accessibility card, which is
从堆栈里扔掉，现在我们有 Accessibility 的卡片了

153
00:06:18,750 --> 00:06:22,320
now the top of our stack which only has three things on it.
Accessibility 的卡片变成了堆栈上三个卡片中最顶端的那个

154
00:06:22,320 --> 00:06:23,690
And we can do back again.
我们继续返回

155
00:06:23,690 --> 00:06:25,690
It goes back to the general one.
现在返回到了 General 卡片

156
00:06:25,690 --> 00:06:26,560
We do back again.
再返回

157
00:06:26,560 --> 00:06:28,490
It goes back to the very top.
回到了最最上层

158
00:06:28,490 --> 00:06:30,430
Of course, once we get back to the very top there's no
当然，当我们回到了最最上层的时候

159
00:06:30,430 --> 00:06:33,700
more back button because this is the only card on the stack.
不会再有返回按钮了，因为那是堆栈上唯一的卡片了

160
00:06:33,700 --> 00:06:34,870
Okay, so everyone understand what
现在，每个人对 Navigation Controller

161
00:06:34,870 --> 00:06:35,800
a Navigation Controller is?
都理解了吗？

162
00:06:35,800 --> 00:06:37,230
It's just a stack of MVCs.
简单的说，就是 MVC 堆栈

163
00:06:37,240 --> 00:06:38,370
All right?
没问题吧？

164
00:06:38,370 --> 00:06:40,600
But it's just like Split View Controller and
但是它和 Split View Controller 和

165
00:06:40,610 --> 00:06:44,370
UITabBarController in that it is showing multiple MVCs.
UITabBarController 一样，它们的功能都是展示多重 MVC

166
00:06:44,380 --> 00:06:45,970
So I'm going talk a little bit about how navigation
所以我将更详细地讨论一下 Navigation Controller

167
00:06:45,980 --> 00:06:49,080
controller works internally, so you can get a feel for it.
内部的工作方式，让你们有一个更直观的感受

168
00:06:49,080 --> 00:06:52,950
And I'm going to try to mix it with our MVC image that we
同时，我会尝试将它和我们的其他 MVC 混合在一起

169
00:06:52,950 --> 00:06:56,220
had so you can kind of combine the two concepts in your mind.
这样你就能在你的大脑里混合这两种概念了

170
00:06:56,220 --> 00:06:58,690
So, let's say I had an MVC.
这里，假设我有一个 MVC

171
00:06:58,690 --> 00:07:01,490
This one up here, the purple MVC thing.
顶上的那个紫色的 MVC

172
00:07:01,490 --> 00:07:04,420
And I had more features I wanted to put on there, but
我本想在这个 MVC 之上添加一些其他的功能，但是

173
00:07:04,430 --> 00:07:06,430
there's just not enough room on the screen anymore,
屏幕的空间不够

174
00:07:06,430 --> 00:07:07,830
I've kind of maxed out.
我已经尽量使用了所有可用的屏幕空间

175
00:07:07,830 --> 00:07:10,400
Or it's just those features don't logically make sense to
或者从逻辑上，我要添加的功能不应当

176
00:07:10,400 --> 00:07:12,100
be in the same place.
显示在这个 MVC 之上时

177
00:07:12,100 --> 00:07:15,300
Well, what I would do is create another MVC to manage
我应该怎么做呢？我应该创建另外一个 MVC

178
00:07:15,300 --> 00:07:18,300
those other features that won't fit, okay?
去管理那些不属于这个 MVC 的那些功能，对吗？

179
00:07:18,310 --> 00:07:22,710
And, so now though I need a way to have those two MVCs
所以，我应该找到某种方法，让这两个 MVC

180
00:07:22,710 --> 00:07:25,140
share the screen and I can use a Split View Controller or
能够共享一个屏幕空间。这里，我能使用一个 Split View Controller

181
00:07:25,140 --> 00:07:27,140
Tab Bar Controller if they were peers or
或者如果这两个 MVC 之间是平等关系的话，我可以使用 Tab Bar Controller

182
00:07:27,150 --> 00:07:28,910
I could use Navigation Controller.
当然我也可以使用 Navigation Controller

183
00:07:28,910 --> 00:07:30,280
So, let's see what it would look like to
让我们来看看

184
00:07:30,280 --> 00:07:33,950
use a Navigation Controller to have these two MVCs which
当我们使用一个 Navigation Controller 来结合这两个 MVC

185
00:07:33,950 --> 00:07:36,990
they're related share the screen.
使得它们共享同一屏幕空间的情况

186
00:07:36,990 --> 00:07:40,220
So a Navigation Controller is just an MVC, okay?
还记得 Navigation Controller 也是一个 MVC 吗？

187
00:07:40,220 --> 00:07:42,810
It's a controller of an MVC.
一个 MVC 的控制器（Controller）

188
00:07:42,810 --> 00:07:45,390
And it's view is a little rectangular area that usually
它的视图是一个小的矩形区域

189
00:07:45,400 --> 00:07:47,930
fills the entire screen or a portion of the screen.
通常布满整个屏幕空间，或是占屏幕空间的一部分

190
00:07:47,930 --> 00:07:48,860
It's got the title.
它有一个标题

191
00:07:48,870 --> 00:07:53,000
But it's a special MVC and they've just got an outlet
但它是一个特殊的 MVC，它有一个叫做 rootViewController 的 outlet

192
00:07:53,000 --> 00:07:56,070
called rootViewController that points to an MVC.
这个 outlet 指向某个 MVC

193
00:07:56,070 --> 00:07:59,440
Okay, points to the controller of an MVC.
确切的说，是指向某个 MVC 的控制器

194
00:07:59,440 --> 00:08:03,240
And when it is pointing to that, then the navigation
当这个 outlet 指向某个 MVC 的控制器时

195
00:08:03,240 --> 00:08:08,080
controller puts that MVC's view, okay, its view property.
Navigation Controller 便会将那个 MVC 的视图绘制出来，也就是 view 属性

196
00:08:08,080 --> 00:08:09,680
All right, we know that UIViewController has
我们已经知道 UIViewController 有一个

197
00:08:09,680 --> 00:08:11,320
this very important property called view,
非常重要的属性，叫做 view

198
00:08:11,320 --> 00:08:12,980
which is its top level of its view.
它是所有视图中最顶层的那个

199
00:08:12,990 --> 00:08:16,520
It puts that on the screen underneath this title thing.
Navigation Controller 把它放置在屏幕上，标题栏之下

200
00:08:16,520 --> 00:08:18,860
So it fills the entire rectangular area and
因为它会布满整个矩形空间

201
00:08:18,860 --> 00:08:21,190
then the title kind of overlaps it transparently,
所以标题栏会变成半透明，以显示标题栏之下的那部分

202
00:08:21,190 --> 00:08:25,060
semi-lucent transparency.
毛玻璃透明效果

203
00:08:25,060 --> 00:08:25,730
Okay?
明白了吗？

204
00:08:25,730 --> 00:08:26,860
So that's great.
很好

205
00:08:26,860 --> 00:08:28,480
So we got it in there.
我们现在成功把一个 MVC 和 Navigation Controller 结合在一起了

206
00:08:28,480 --> 00:08:30,100
Now how do we get the other MVC on?
我们如何让其他的 MVC 和 Navigation Controller 继续结合在一起？

207
00:08:30,100 --> 00:08:33,170
Well, when a ui element inside the view of
好的，当某个在这个视图中的 UI 元素

208
00:08:33,170 --> 00:08:35,970
this MVC like a button or something like that
例如一个按钮或者其他的东西

209
00:08:35,970 --> 00:08:40,110
is pressed then it can cause another MVC to get created.
被按下的时候，这能导致其他的 MVC 被创建

210
00:08:40,110 --> 00:08:42,010
You notice that MVC just appeared?
你注意到这个 MVC 刚刚出现了吗？

211
00:08:42,010 --> 00:08:43,310
It wasn't there before.
之前这个新的 MVC 没有出现过

212
00:08:43,310 --> 00:08:46,080
But as soon as the button gets pressed in this guy's view,
但是，在用户的视图中，只要有按钮一按下

213
00:08:46,080 --> 00:08:48,250
this MVC's view, that thing gets created.
那么一个新的 MVC 就会被创建

214
00:08:48,250 --> 00:08:50,880
And that's something important to notice that we're always
在这个过程中，需要注意到的是

215
00:08:50,890 --> 00:08:54,350
going to be creating a new MVC when we do these transitions.
当我们做这些转换时，我们始终会创建一个新的 MVC

216
00:08:54,360 --> 00:08:56,520
Okay? Transitioning to a new card.
明白了吗？转换到一个新的卡片

217
00:08:56,520 --> 00:08:58,060
In a Split View,
在一个 Split View 中

218
00:08:58,060 --> 00:08:59,590
we do something in the master that changes the detail.
我们在 Master 中做的操作会改变 Detail

219
00:08:59,590 --> 00:09:00,890
That's always creating a new,
这也就是说，它始终创建了一个新的 Detail

220
00:09:00,890 --> 00:09:03,160
even the first time we press a tab bar, but
这种情况甚至存在于，当我们按下了 Tab Bar

221
00:09:03,160 --> 00:09:06,230
only the first time for the tab bar, it creates a new MVC.
并且是第一次按下 Tab Bar 的时候

222
00:09:06,230 --> 00:09:07,730
Okay? So it creates this new MVC.
明白了吗？所以这样的操作会创建一个新的 MVC

223
00:09:07,730 --> 00:09:10,470
And then the Navigation Controller just
接着，Navigation Controller 就会移动到

224
00:09:10,470 --> 00:09:13,270
moves over to put that MVC's view on top.
新创建的 MVC 之上

225
00:09:13,270 --> 00:09:15,000
All right?

226
00:09:15,010 --> 00:09:16,840
And then of course you've got the back button.
当然，之后你就会在左上角有一个返回按钮

227
00:09:16,840 --> 00:09:18,310
When you click the back button,
当你按下返回按钮的时候

228
00:09:18,310 --> 00:09:20,640
it goes back to the first MVC.
Navigation Controller 回到了第一个 MVC

229
00:09:20,640 --> 00:09:22,580
And look what happens to that MVC.
让我们来看看新创建的 MVC，它会发生什么

230
00:09:22,580 --> 00:09:23,780
Gone.
消失了

231
00:09:23,780 --> 00:09:25,010
Okay.

232
00:09:25,010 --> 00:09:26,350
That is not hidden or something.
它不是被隐藏起来了

233
00:09:26,350 --> 00:09:28,220
It's just gone.
它消失了

234
00:09:28,220 --> 00:09:30,080
It got deallocated probably from the heap.
它所占用的内存空间中被释放了

235
00:09:30,090 --> 00:09:31,380
Okay? And then we're back to here.
我们回到了第一个 MVC

236
00:09:32,590 --> 00:09:34,350
Okay, so that's how Navigation Controller works.
好的，这就是 Navigation Controller 工作的方式

237
00:09:34,360 --> 00:09:35,300
Very simple.
非常的简单

238
00:09:35,310 --> 00:09:36,250
And, you know, Split View and
你要知道，Split View 和

239
00:09:36,260 --> 00:09:38,420
tab bar are similar kind of mechanism.
Tab Bar 的工作方式也是类似

240
00:09:39,690 --> 00:09:41,780
Okay. So
好的

241
00:09:41,780 --> 00:09:43,860
how do we get at these sub-MVCs?
另外一个问题，我们如何能够取得这些子 MVC 呢？

242
00:09:43,860 --> 00:09:45,960
So let's say I had a Split View Controller or
假设说，我有一个 Split View Controller

243
00:09:45,960 --> 00:09:47,530
a Navigation Controller or a Tab Bar Controller.
或者一个 Navigation Controller 或者一个 Tab Bar Controller

244
00:09:47,530 --> 00:09:50,170
How do I get at the things on the stack of cards,
我如何去获取这些卡片堆栈上的东西呢？

245
00:09:50,170 --> 00:09:52,970
or the two things the master and detail?
或者说，我如何去获取 Master 和 Detail 中的东西呢？

246
00:09:52,970 --> 00:09:54,840
And the answer is
答案是

247
00:09:54,840 --> 00:09:56,710
they all have a property called viewControllers.
它们都会有一个叫 viewControllers 的属性

248
00:09:56,710 --> 00:09:58,870
And it's an Array of View Controller.
它是由 UIViewController 组成的一个数组

249
00:09:58,880 --> 00:10:00,490
Okay?
明白了吗？

250
00:10:00,490 --> 00:10:02,110
And that it's all the View Controllers in a system.
它里面存储的是一个系统中所有的 View Controller

251
00:10:02,110 --> 00:10:05,110
So in a Split View, there will be only two in there,
在 Split View 中，这里面只会有两个元素

252
00:10:05,110 --> 00:10:07,550
the master and the detail, in the tab bar there will be how
Master 和 Detail，在 Tab Bar 中

253
00:10:07,550 --> 00:10:09,650
ever many tabs there are, in a Navigation Controller there
有多少个 Tab，这里面就有多少个元素，而在 Navigation Controller 中

254
00:10:09,650 --> 00:10:11,720
will be however many cards are on the stack.
堆栈上有多少卡片，这里面就有多少个元素

255
00:10:11,720 --> 00:10:13,050
That's how many things will be in that Array.
这就是知道这个数组有多少个元素的方式

256
00:10:13,050 --> 00:10:15,420
And it's settable too which is a little weird,
当然它是可以被设值的，但是这么做有点奇怪

257
00:10:15,420 --> 00:10:19,090
we don't usually set things but you can do it.
通常我们不会对它直接设值，但是不代表不可以这么做

258
00:10:19,090 --> 00:10:23,800
And the way we usually set it is we're going to
我们通常对它设值的方式是

259
00:10:23,800 --> 00:10:26,600
do it in the Storyboards or Navigation Controller for
比如我们在 Storyboard 的 Navigation Controller 中

260
00:10:26,600 --> 00:10:29,300
example has methods like push and pop View Controller that
有 push 和 pop View Controller 的方法

261
00:10:29,300 --> 00:10:31,400
will push View Controller onto the stack.
这样的操作会把 View Controller push 到堆栈中

262
00:10:31,400 --> 00:10:32,640
But that is doing that in code and
但这是在代码中设值的方式

263
00:10:32,640 --> 00:10:35,210
we are usually doing all of this stuff in Storyboards.
通常我们在 Storyboard 中做这一系列的操作

264
00:10:35,210 --> 00:10:38,910
So that's how you get at the sub things of
以上就是你如何获得这些子 MVC

265
00:10:38,910 --> 00:10:41,740
these three kinds of View Controllers.
这些 View Controller 的方法

266
00:10:41,750 --> 00:10:44,550
What about, how do I get a hold of the View Controller?
那么，我如何获得一个 View Controller 呢？

267
00:10:44,550 --> 00:10:45,480
Okay? How do I get that
我如何获得一个

268
00:10:45,480 --> 00:10:46,550
Navigation Controller?
Navigation Controller？

269
00:10:46,550 --> 00:10:48,620
How do I get a pointer to it, or whatever?
我怎么获得它的一个指针呢？

270
00:10:48,620 --> 00:10:52,420
Well it turns out every View Controller knows if it's
答案是，每个 View Controller 都知道

271
00:10:52,420 --> 00:10:55,660
inside a Navigation Controller or if it's inside a split-view
它自己是不是身处在一个 Navigation Controller 或者

272
00:10:55,660 --> 00:10:57,590
controller, or if it's inside a Tab Bar Controller.
Split View Controller 或者 Tab Bar Controller 中

273
00:10:57,590 --> 00:10:59,310
It knows.
它自己知道

274
00:10:59,310 --> 00:11:01,030
And so UIView controller has these three properties:
因为，UIViewController 有三个属性：

275
00:11:01,030 --> 00:11:02,360
tabBarController, splitViewController,
tabBarController，splitViewController

276
00:11:02,360 --> 00:11:03,560
navigationController.
和 navigationController

277
00:11:03,560 --> 00:11:05,530
And they will return to you the splitViewController
splitViewController 属性会返回给你

278
00:11:05,530 --> 00:11:07,470
that the View Controller is in.
它处在哪个 Split View Controller 中，其他的属性类推

279
00:11:07,470 --> 00:11:09,030
Okay?
明白了吗？

280
00:11:09,040 --> 00:11:11,070
If it's in one, if it's not then it returns nil.
如果它不在某个 Controller 中，这个属性返回的是 nil

281
00:11:11,070 --> 00:11:12,940
And notice some View Controllers might be inside a
注意到某些 View Controller 会在一个 Navigation Controller 中

282
00:11:12,940 --> 00:11:15,510
Navigation Controller, inside a Split View Controller.
而这个 Navigation Controller 又嵌套在一个 Split View Controller 中

283
00:11:16,440 --> 00:11:17,770
So more than one of these things can be
所以这些属性可以有多个

284
00:11:17,780 --> 00:11:19,790
non-nil at a time.
同时不为 nil

285
00:11:19,790 --> 00:11:21,810
Because we can nest these things to build more powerful
我们可以利用这些嵌套来构建一个

286
00:11:21,810 --> 00:11:23,960
user interfaces.
强大的用户界面

287
00:11:23,960 --> 00:11:26,110
So let's just use the example, if I'm the master in
让我们举个例子，如果我是一个 Split View 中的 Master

288
00:11:26,120 --> 00:11:28,720
a Split View, and I want to get the detail.
我想获取 Detail

289
00:11:28,720 --> 00:11:30,920
Well I can get the splitViewController I'm in by
这里我可以通过访问 splitViewController

290
00:11:30,920 --> 00:11:32,390
saying Split View Controller.
来获得我在哪个 Split View Controller 的指针

291
00:11:32,390 --> 00:11:33,720
I'll put the little question mark there,
这里我会输入一个问号

292
00:11:33,720 --> 00:11:34,860
that's optional chaining.
这是 Optional Chaining

293
00:11:34,860 --> 00:11:36,010
If it's nil,
如果它返回的是 nil 的话

294
00:11:36,010 --> 00:11:37,160
then I'm obviously not going to get my detail.
那么显然我不应该获得 Detail（因为我根本不在一个 Split View Controller 中）

295
00:11:37,160 --> 00:11:39,260
And then I'm going to say viewController sub 1,
然后我输入 viewControllers[1]

296
00:11:39,260 --> 00:11:40,960
because we know that viewController sub 1 in
因为我们知道，viewControllers[1] 在

297
00:11:40,960 --> 00:11:43,100
split controller is the detail.
Split View Controller 中代表的是 Detail

298
00:11:43,100 --> 00:11:44,830
So now I've got the detail and
现在，我就获得了 Detail

299
00:11:44,830 --> 00:11:46,570
I can talk to it I could, you know, get to my detail.
我就能向 Detail 发送消息了

300
00:11:46,570 --> 00:11:47,830
So presumably I might want to tell it to
假设这里，我希望告诉 Detail 去

301
00:11:47,840 --> 00:11:50,800
do things display things or whatever, okay?
显示某些东西或者做其他的事情

302
00:11:52,010 --> 00:11:55,170
So that's how we get at these things in code if we need to,
所以，如果我们需要的话，我们可以通过这样的代码来获取我们想要的指针

303
00:11:55,180 --> 00:11:58,240
but we often don't need to because we can manage most of
但我们通常并不需要，因为我们能够

304
00:11:58,240 --> 00:11:59,640
this in the Storyboard.
在 Storyboard 完成大部分的操作

305
00:11:59,650 --> 00:12:02,550
And so how do we wire this up, how do we create this
所以，我们如何在 Storyboard 里链接起来这些 MVC

306
00:12:02,550 --> 00:12:05,720
relationship between these split through tab bar and
如何在子 MVC 和 Split View Controller，Tab Bar Controller 以及

307
00:12:05,720 --> 00:12:08,920
Navigation Controller and these all the sub-MVCs.
Navigation Controller 之间建立关系呢？

308
00:12:08,920 --> 00:12:11,750
And it can be done in code, okay?
这些都可以通过代码来完成

309
00:12:11,760 --> 00:12:12,890
But we're gonna do it
但是我们在这节课上

310
00:12:12,890 --> 00:12:15,390
in Storyboards in this class all the time.
将通过 Storyboard 来完成

311
00:12:15,390 --> 00:12:17,190
Okay. And we're just
我们要做的就是

312
00:12:17,190 --> 00:12:18,990
gonna use Ctrl + drag to do it.
按住Control键并拖动来链接多个 MVC

313
00:12:19,000 --> 00:12:20,500
So let's see what that looks like.
让我们来看看这是什么样子的

314
00:12:20,500 --> 00:12:22,630
I'll do it for Split View Controller,
以 Split View Controller 举例

315
00:12:22,630 --> 00:12:24,330
we're just going to go the utilities area,
我们找到 Utilities 区域

316
00:12:24,330 --> 00:12:26,970
the same place we drag out a button or something like that.
和我们之前拖出来按钮和其他的 UI 元素同样的地方

317
00:12:26,970 --> 00:12:29,300
We're going to drag out a Split View Controller.
我们拖出来一个 Split View Controller

318
00:12:29,300 --> 00:12:30,600
Now, when it comes out,
当它被拖动出来的时候

319
00:12:30,610 --> 00:12:33,410
it's going to come out with a whole bunch of other MVCs
它会带出来一整连串的 MVC

320
00:12:33,410 --> 00:12:35,910
pre-attached to it in attempt to help you, but
这些 MVC 预先链接在一起以方便你的使用

321
00:12:35,910 --> 00:12:38,280
usually you're just going to delete those so
但通常你会删除它们以链接你自己的 MVC

322
00:12:38,280 --> 00:12:41,410
that all you have left is the Split View Controller itself.
这样你就只保留了 Split View Controller 本身

323
00:12:41,420 --> 00:12:43,280
Okay?
明白了吗？

324
00:12:43,280 --> 00:12:45,150
And then you're going to Ctrl+Drag from the Split View
然后，你从 Split View Controller 开始

325
00:12:45,150 --> 00:12:46,720
Controller to the Master and
按住 Control 键拖动，链接 Split View Controller 和 Master

326
00:12:46,720 --> 00:12:50,120
Ctrl+Drag from the Split View Controller to the Detail.
同样方法，链接 Split View Controller 和 Detail

327
00:12:50,120 --> 00:12:51,150
And that's how you are going to do the wire.
这样你就链接起来了 Master 和 Detail

328
00:12:51,160 --> 00:12:52,360
So this is what it looks like.
这就是链接过程看上去的样子

329
00:12:52,360 --> 00:12:53,620
Here I have a Storyboard.
这里我有一个 Storyboard

330
00:12:53,630 --> 00:12:55,120
I've dragged out of Split View Controller.
我从 Split View Controller 开始拖动

331
00:12:55,130 --> 00:12:56,990
That's that gray thing on the left.
Split View Controller 就是左边灰色的那个

332
00:12:56,990 --> 00:12:58,190
Okay?
没问题吧？

333
00:12:58,190 --> 00:12:59,390
I deleted all the things it was attached to so
我删除了之前附加在 Split View Controller 的东西

334
00:12:59,400 --> 00:13:00,360
I just had that.
所以我只保留了 Split View Controller 本身

335
00:13:00,360 --> 00:13:02,730
Then I Ctrl+Drag to,
然后我按住 Control 键并拖动

336
00:13:02,730 --> 00:13:05,500
in this case my Master, which is my calculator.
在这个例子中，我的 Master 是我的计算器

337
00:13:05,500 --> 00:13:08,400
When I do that, it's going to put up this little thing says
当我做这个操作的时候，这里会提示说

338
00:13:08,400 --> 00:13:10,140
okay, what kind of connection do you want to make?
“你想要创建什么样类型的链接？”

339
00:13:10,140 --> 00:13:13,270
And you're going to pick Master View Controller there.
选择 Master View Controller

340
00:13:13,280 --> 00:13:15,540
And that's going to make like a little connection to it.
这样就建立了一个链接

341
00:13:15,540 --> 00:13:18,280
And then I'm going to Ctrl+Drag down to my Detail,
然后，我按住 Control 键并拖动到 Detail 上

342
00:13:18,280 --> 00:13:20,980
which is going to be the right side of my Split View.
这样 Detail 就会成为我 Split View 中右侧的部分了

343
00:13:20,980 --> 00:13:23,320
And here I'm going to choose I want Detail View Controller.
这里同样会弹出一个提示，选择 Detail View Controller

344
00:13:23,320 --> 00:13:25,180
Okay?
明白了吗？

345
00:13:25,190 --> 00:13:26,720
And then I'm going to have this,
然后我就拥有了一个

346
00:13:26,720 --> 00:13:28,050
fully hooked up Split View.
完整的 Split View

347
00:13:28,050 --> 00:13:29,090
And that's it.
这就是如何通过 Storyboard 链接 Split View Controller 的方式

348
00:13:29,090 --> 00:13:31,290
So it's very easy to hook these things up.
非常简单就可以链接起来

349
00:13:31,290 --> 00:13:32,570
All right, and tab bar,
好的，Tab Bar Controller

350
00:13:32,570 --> 00:13:33,860
you can hook up exactly the same way.
你可以通过几乎相同的方法把子 MVC 链接起来

351
00:13:33,860 --> 00:13:36,130
Connect as many of them as you want, okay?
想链接多少 MVC 都可以

352
00:13:36,130 --> 00:13:38,290
Navigation Controllers can be done a little bit differently,
Navigation Controller 有一点点的不同

353
00:13:38,300 --> 00:13:39,730
which we'll see in a second, okay?
稍后我们可以看到

354
00:13:41,030 --> 00:13:45,130
But there's a problem here which is that a Split View
但是这里有一个问题，那就是

355
00:13:45,140 --> 00:13:48,970
can't display side by side on an iPhone.
Split View 不能在 iPhone 上并排显示

356
00:13:48,970 --> 00:13:50,900
Or at least not anything but an iPhone 6 plus.
更确切的说，不能在 iPhone 6 Plus 以外的 iPhone 型号上显示

357
00:13:50,910 --> 00:13:54,070
That's the only one big enough to really display side
因为 iPhone 6 Plus 是唯一一个拥有足够大小

358
00:13:54,080 --> 00:13:55,530
by side.
来并排显示 Master 和 Detail 的型号

359
00:13:55,530 --> 00:13:56,980
So a Split View really can't work on an iPhone.
所以 Split View 不算是真正能够在 iPhone 上使用的

360
00:13:56,980 --> 00:13:59,500
Okay?
明白了吗？

361
00:13:59,500 --> 00:14:02,020
The way we handle this is that iOS adapts its
我们处理这个的方式是

362
00:14:02,020 --> 00:14:07,220
user interface to whatever device it happens to be on,
因为 iOS 会在不同屏幕大小的设备上改变其用户界面

363
00:14:07,220 --> 00:14:10,590
depending on how its Size Class is.
这取决于它的 Size Class 是什么

364
00:14:10,590 --> 00:14:13,930
We'll talk about Size Class later, but if it's Compact,
我们稍后会讲到 Size Class，但如果它是 Compact 尺寸

365
00:14:13,930 --> 00:14:17,730
like a phone, then it can't show it in a Split View.
比如 iPhone，那么它没办法在 Split View 中显示

366
00:14:17,730 --> 00:14:19,300
So how can I show it then?
那我如何显示它呢？

367
00:14:19,300 --> 00:14:21,030
If I have it Master in a Detail and
如果我有 Master 和 Detail

368
00:14:21,030 --> 00:14:24,030
I wanna show it on an iPhone the way I show it is with
而且我想在 iPhone 上显示它的话

369
00:14:24,040 --> 00:14:25,800
a Navigation Controller.
那么请使用 Navigation Controller

370
00:14:25,800 --> 00:14:26,940
So instead of having Master and
来替代同时在屏幕上显示 Master 和 Detail

371
00:14:26,940 --> 00:14:28,900
Detail on the screen at the same time on an iPad,
只有 iPad 可以同时显示

372
00:14:28,910 --> 00:14:32,810
on the phone when I click in the Master, same button that I
在 iPhone 上，我点击 Master 中同样的按钮

373
00:14:32,810 --> 00:14:35,610
clicked to make the Detail show it in Split View,
用以在 Split View 中显示 Detail 的按钮

374
00:14:35,610 --> 00:14:38,410
but when I click in the Master on the iPhone is going to
但是在 iPhone 上同样的操作会导致

375
00:14:38,420 --> 00:14:41,150
slide the Detail on as a card.
Detail 卡片滑入

376
00:14:41,150 --> 00:14:41,980
On the deck.
在层面上

377
00:14:41,980 --> 00:14:42,880
All right.

378
00:14:42,890 --> 00:14:44,850
On the navigation charts stack.
在 Navigation Controller 的栈上

379
00:14:44,850 --> 00:14:46,450
Now the thing is though we want to
现在我们想要做的是

380
00:14:46,450 --> 00:14:48,650
build one Storyboard that will work for
建立同一个 Storyboard 在不同的

381
00:14:48,660 --> 00:14:51,820
both platforms and automatically adapts.
平台上都工作并自动适应其屏幕大小

382
00:14:51,830 --> 00:14:52,960
So how do we do that?
我们应该如何实现呢？

383
00:14:52,960 --> 00:14:56,330
We're just going to wrap our Master in
我们要做的就是，将我们的 Master 嵌入

384
00:14:56,330 --> 00:14:58,730
a Navigation Controller.
进一个 Navigation Controller 中

385
00:14:58,730 --> 00:15:00,870
So here is a Navigation Controller,
这样，这里有一个 Navigation Controller

386
00:15:00,870 --> 00:15:04,130
which is my Master, it's the calculator, right?
它就是我的 Split View Controller 中的 Master，也就是我的计算器，对吗？

387
00:15:04,140 --> 00:15:06,140
And you can see it's hooked up to the Split View already, and
你能看到，它已经链接到 Split View 了

388
00:15:06,140 --> 00:15:08,710
I'm just gonna select it, and then I'm gonna go to
这里我选择它，找到

389
00:15:08,710 --> 00:15:13,810
the Editor menu and pick Embed in Navigation Controller.
Xcode 菜单中的 Editor，然后选择 Embed in Navigation Controller

390
00:15:13,810 --> 00:15:14,740
See that embed?
看到那个 Embed in 了吗？

391
00:15:14,750 --> 00:15:15,680
And this is what's gonna happen.
这就是我们要做的

392
00:15:17,880 --> 00:15:19,280
Okay, the Navigation Controller,
好的，Navigation Controller

393
00:15:19,280 --> 00:15:23,850
is going to the interposed between the Split View and
将会在 Split View 和 Master 之间充当一个中间者

394
00:15:23,850 --> 00:15:25,420
the Master.

395
00:15:25,420 --> 00:15:26,990
So now the Master, is in a Navigation Controller.
现在 Master 已经嵌入进一个 Navigation Controller 中了

396
00:15:27,990 --> 00:15:31,190
Now if I am on an iPhone, and I click in something
当我在 iPhone 上运行并且点击某些东西

397
00:15:31,190 --> 00:15:34,260
that would change the Detail, then it's going to push it
即将改变 Detail 的内容的时候，它会 push 这个

398
00:15:34,260 --> 00:15:37,600
on that Navigation Controller, on top of the stack.
到 Navigation Controller 的栈顶上

399
00:15:37,600 --> 00:15:39,330
But if I am on an iPad it's going to
当我在 iPad 上运行的时候

400
00:15:39,330 --> 00:15:40,930
show them side by side.
它就会在右侧并排展示这个 Detail

401
00:15:40,930 --> 00:15:42,470
So this structure that you see right here,
你这里看到的就是这个结构

402
00:15:42,470 --> 00:15:44,070
Split View, Navigation Controller for
用 Split View，Navigation Controller

403
00:15:44,070 --> 00:15:47,740
the Master and then Detail is very common.
这种结构来链接 Master 和 Detail 是十分普遍的

404
00:15:47,740 --> 00:15:50,470
A universal way of specifying your UI so
这就是定义用户界面的一种通用方法

405
00:15:50,480 --> 00:15:52,380
it works on both, okay?
而且对 iPhone 和 iPad 都适用

406
00:15:54,450 --> 00:15:57,350
Now we can also put the Detail inside of
我们同样可以将 Detail 嵌入一个 Navigation Controller 中

407
00:15:57,350 --> 00:16:00,050
a Navigational Controller too, why would we want to do that?
不过我们会问，为什么我们会想要这么做？

408
00:16:00,050 --> 00:16:01,480
Well the only reason we would wanna do that,
这么做的唯一理由是

409
00:16:01,490 --> 00:16:03,650
is cuz maybe we want
我们可能需要

410
00:16:03,650 --> 00:16:05,820
the Navigation Controller's feature of a title, right?
Navigation Controller 的标题栏的功能，对吗？

411
00:16:05,820 --> 00:16:08,060
Or little buttons we wanna put at the top.
或者是我们想在标题栏上放置一些按钮的功能

412
00:16:08,060 --> 00:16:09,560
It's really nice for that.
这么做是个好方法

413
00:16:09,560 --> 00:16:10,880
But, we don't need
但是，我们并不需要

414
00:16:10,880 --> 00:16:12,190
a Navigation Controller down there for navigation,
用一个 Navigation Controller 来做导航

415
00:16:12,190 --> 00:16:14,530
because we are never navigating from the Detail.
因为我们从来不需要在 Detail 里导航

416
00:16:14,530 --> 00:16:17,160
We only navigate to the Detail.
我们只会导航至 Detail

417
00:16:17,170 --> 00:16:20,330
So, it doesn't, itself, need to be in its own
因此它自身不需要一个 Navigation Controller

418
00:16:20,340 --> 00:16:22,900
Navigation Controller, and we'll see that in the demo.
稍后我们会在 Demo 中看到

419
00:16:22,900 --> 00:16:25,540
All right, so that's how we wire these things up.
好的，这就是我们如何链接这些东西的

420
00:16:25,540 --> 00:16:27,340
Okay, and they end up looking like that.
它们最后应该会是这个样子的

421
00:16:28,340 --> 00:16:31,980
Now how do we make these things appear?
接下来，我们如何将它们显示出来？

422
00:16:31,980 --> 00:16:34,750
How do we make changes in our master,
我们在 Master 中做了一些改变

423
00:16:34,750 --> 00:16:37,010
that cause something to appear in the Detail.
如何使 Detail 显示 Master 中的这些改变

424
00:16:37,020 --> 00:16:39,250
Or if we have a Navigational Controller that has multiple
或者说，我们有一个 Navigation Controller

425
00:16:39,250 --> 00:16:41,920
cards, when we clicked all those buttons and another card
它拥有许多卡片（MVC），当我们点击这些按钮的时候

426
00:16:41,920 --> 00:16:45,820
kept coming on in the stack, how did we do that, okay?
另外的卡片会 push 进栈，我们如何做到呢？

427
00:16:45,820 --> 00:16:48,790
And the answer is we use segues, okay?
答案是，我们利用 Segues，明白吗？

428
00:16:48,790 --> 00:16:53,230
So segues is, how these things transition from
Segues 是如何从一个 View Controller 转换到

429
00:16:53,230 --> 00:16:54,560
View Controller to View Controller.
另一个 View Controller 的方式

430
00:16:55,970 --> 00:16:57,500
There's really four kinds of segues.
iOS 里已经定义了四种不同的 Segues

431
00:16:57,500 --> 00:16:58,730
There are custom segues, too, but
当然你还可以自定义 Segues

432
00:16:58,730 --> 00:17:00,200
we're not gonna talk about that in this class,
但是本节课我们不会讨论到

433
00:17:00,200 --> 00:17:02,070
kind of advanced, you almost never need those.
这些高级的 Segue，而且基本上你也不会用到

434
00:17:03,140 --> 00:17:04,870
So there's four basic segues.
所以，有四种基本的 Segues

435
00:17:04,870 --> 00:17:07,210
There's show segue, okay?
Show Segue

436
00:17:07,210 --> 00:17:11,640
Which basically shows the MVC that you're talking about, and
简而言之，就是展示你正在交互的那个 MVC

437
00:17:11,650 --> 00:17:14,210
if you're a Navigation Controller, it will show it
假如你是一个 Navigation Controller，它会将那个 MVC

438
00:17:14,210 --> 00:17:16,880
on the, it'll put it on top of the stack of cards.
放置于栈顶并显示它

439
00:17:16,880 --> 00:17:18,980
If you're not in a Navigation Controller,
假如你不是一个 Navigation Controller

440
00:17:18,980 --> 00:17:20,780
then it will show it modally.
那么它会 Modally 展示这个 MVC

441
00:17:20,790 --> 00:17:24,220
Okay, so now, modal presentation of an MVC,
下一个是 Modal 展示一个 MVC

442
00:17:24,220 --> 00:17:26,060
we haven't talked about that with all these other things,
我们目前还没有在其他的地方讲到过

443
00:17:26,060 --> 00:17:28,620
but basically it just takes over the entire screen.
但是，基本上它就是会布满整个屏幕空间

444
00:17:28,630 --> 00:17:30,030
Okay? Just completely takes over the
只是将你想要展示的 MVC

445
00:17:30,030 --> 00:17:34,500
entire screen, puts the MVC that you wanna show on screen.
完全布满整个屏幕空间

446
00:17:34,500 --> 00:17:37,230
So it's very kind of disruptive to
可能对于用户，这会有一点点混乱

447
00:17:37,230 --> 00:17:40,300
the user a little bit, because their app is stuck,
因为他们的 App 卡住了

448
00:17:40,300 --> 00:17:43,300
it can only do what this MVC is asking them to do.
App 只能做 MVC 要求做的操作

449
00:17:43,310 --> 00:17:45,940
So I kind of recommend against using modal, and
因此我不太推荐使用 Modal

450
00:17:45,940 --> 00:17:48,910
trying to keep your apps from doing that.
尽量不要在你的 App 中用到它

451
00:17:48,910 --> 00:17:50,110
So if you're using a Show Segue,
所以当你使用一个 Show Segue 的时候

452
00:17:50,110 --> 00:17:52,510
you probably wanna be in a Navigation Controller, so
你大概想在 Navigation Controller 中使用到

453
00:17:52,510 --> 00:17:53,950
that it will slide it on deck.
因为这样的话会有一个滑入的效果

454
00:17:53,950 --> 00:17:55,980
Because, then the user can always go back,
而且，用户总是可以返回

455
00:17:55,980 --> 00:17:58,380
if they didn't mean that, they can go back.
假如用户误操作返回的话，还可以再回去

456
00:17:58,390 --> 00:18:02,190
Then there is Show Detail Segue, very similar to Show,
接下来的是 Show Detail Segue，和 Show Segue 非常相似

457
00:18:02,190 --> 00:18:05,360
the only difference with Show Detail is that if
唯一的区别就是，Show Detail Segue

458
00:18:05,360 --> 00:18:08,360
you happen to be in a Split View Controller it
在 Split View Controller 中的效果就是

459
00:18:08,360 --> 00:18:11,160
will show this MVC as the Detail, okay?
在 Detail 中显示这个 MVC，明白了吗？

460
00:18:11,160 --> 00:18:13,160
Otherwise if you are in Navigation Controller, but
否则，如果你在一个 Navigation Controller 中

461
00:18:13,170 --> 00:18:14,960
not in a Split View Controller it just pushes it
而不是在 Split View Controller 中，这个效果就是

462
00:18:14,970 --> 00:18:16,670
on the stack just like Show would, okay?
在栈上 push 这个 MVC，和 Show Segue 一样的滑入效果，明白了吗？

463
00:18:18,540 --> 00:18:20,470
So, Show Detail tiny difference there.
所以，和 Show Segue 只有一点点的区别

464
00:18:20,470 --> 00:18:22,370
It's just about Split View.
只和 Split View 相关

465
00:18:22,370 --> 00:18:24,410
So, it really helps you when you're in a Split View
所以，如果你在使用 Split View 的时候，这个 Segues 确实很有帮助

466
00:18:24,410 --> 00:18:26,810
decide whether what you want is the Master to,
帮助你决定，你想要 Master 是什么

467
00:18:26,810 --> 00:18:28,710
if the Master is in a Navigation Controller,
如果 Master 嵌入 Navigation Controller 的话

468
00:18:28,710 --> 00:18:30,880
if you want that to slide on the Master?
如果你想要在 Master 上滑入？

469
00:18:30,880 --> 00:18:32,410
The thing you're segueing to or
你 Segue 的目标 View Controller

470
00:18:32,410 --> 00:18:33,680
do you want it to appear in the Detail, okay?
你是否想要它在 Detail 中显示

471
00:18:34,950 --> 00:18:38,180
Then there's modal which forces this full
接下来是 Modal Segue，它强制

472
00:18:38,190 --> 00:18:40,190
screen take over type of thing.
整个屏幕被 MVC 接管

473
00:18:40,190 --> 00:18:42,090
I'm not even gonna talk about that, I'll talk about it
我不打算讨论它

474
00:18:42,090 --> 00:18:43,520
later in the quarter, but I don't wanna talk about it
我会在这学期晚些时候讲一下，但是我不想过早涉及到

475
00:18:43,520 --> 00:18:47,160
early because it can be used as a crutch to build UIs.
因为它可以作为构建 UI 的一个支撑

476
00:18:47,160 --> 00:18:49,490
You really wanna be using Navigation Controllers, and
你肯定会用 Navigation Controller 和

477
00:18:49,500 --> 00:18:50,790
Split View Controllers to do that.
Split View Controller 来这么做的

478
00:18:51,730 --> 00:18:53,030
And then a Popover Segue.
接着，Popover Segue

479
00:18:53,030 --> 00:18:56,400
Now a Popover Segue pops the View Controller that you're
Popover Segue 弹出 Segue 的目标 View Controller

480
00:18:56,400 --> 00:18:59,700
segueing to, up into a little window that's on top of
并让这个 View Controller 显示在所有其他东西之上

481
00:18:59,700 --> 00:19:01,400
everything else, but just a little window instead of
但是并不布满整个屏幕

482
00:19:01,410 --> 00:19:02,640
taking over the whole screen.
它是一个小的窗口

483
00:19:02,640 --> 00:19:04,240
But it, really is taking over the whole screen,
但是，实质上它是布满整个屏幕的

484
00:19:04,240 --> 00:19:06,540
because the user can only interact with what's in
因为用户只能与这个小的 Popover 窗口进行交互

485
00:19:06,540 --> 00:19:09,210
the little Popover window, if they click anywhere else,
如果用户点击了除窗口以外的其他区域

486
00:19:09,210 --> 00:19:11,350
it dismisses the Popover window.
就会取消这个 Popover 窗口

487
00:19:11,350 --> 00:19:14,250
But what makes Popover nicer than just modal is that,
但是 Popover Segue 比 Modal 好的地方在于

488
00:19:14,250 --> 00:19:16,550
since it doesn't take over the whole screen, you can still
它并不布满整个屏幕

489
00:19:16,550 --> 00:19:19,620
kind of see grayed out where you came from, and if you
所以你可以让窗口背后你之前的界面显示为灰色

490
00:19:19,620 --> 00:19:22,190
click where you came from, it puts the Popover away.
当你点击这些灰色的区域，窗口会被弹走

491
00:19:22,190 --> 00:19:25,690
So the Popover has very easy to cancel, it's very easy for
所以 Popover 很容易取消

492
00:19:25,690 --> 00:19:27,880
you just to get back to
很容易让用户回到

493
00:19:27,880 --> 00:19:30,060
where they were if they didn't really mean to click that.
他们之前的界面，如果他们无意中点击到了的话

494
00:19:30,060 --> 00:19:31,500
Okay, so that's Popovers.
这就是 Popover Segues

495
00:19:31,500 --> 00:19:32,930
So we'll talk over Popovers at the end.
我们会在最后再讲到 Popover

496
00:19:32,930 --> 00:19:36,500
Again I wanna emphasize what it was talking about on
再一次，我想强调的是

497
00:19:36,500 --> 00:19:39,240
the previous slide Segues of all kinds,
我们在上一页幻灯片中讲到的各种 Segues

498
00:19:39,240 --> 00:19:43,810
no matter what you're doing, Show Detail, Modal or Popover.
无论你在干什么，Show Detail，Modal 或者 Popover

499
00:19:43,810 --> 00:19:45,640
They always create a new MVC.
它们都会创建一个新的 MVC

500
00:19:45,640 --> 00:19:49,550
You're never segueing to an existing MVC anywhere.
你从来不会 Segue 到一个已经存在的 MVC

501
00:19:49,550 --> 00:19:51,310
You're always creating a new one always,
我们总是创建一个新的

502
00:19:51,320 --> 00:19:52,880
that's what Segues do.
这就是 Segue 所做的事

503
00:19:52,880 --> 00:19:54,550
Okay, that takes a little bit of
这需要你慢慢去

504
00:19:54,550 --> 00:19:55,780
getting used to in your mind.
习惯这个概念

505
00:19:55,790 --> 00:19:57,550
Because of course you see this stack of cards.
因为当你看到卡片堆栈的时候

506
00:19:57,550 --> 00:19:59,890
Navigation one, and you press back.
跳转到一个，然后你点击返回

507
00:19:59,890 --> 00:20:01,760
And then you click to go back to where you were.
然后你再点击回到刚才的界面

508
00:20:01,760 --> 00:20:03,420
And you think you're going back to the same one.
你会认为你回到了原来的那个界面

509
00:20:03,430 --> 00:20:04,690
But you're not. Because as soon as
但事实并不是这样的。因为当

510
00:20:04,690 --> 00:20:06,960
that thing comes off the stack, [SOUND] it's gone.
这个 View 从栈中退出时，呼，它就消失了

511
00:20:06,960 --> 00:20:08,360
Even in Split View.
即便在 Split View 中也是这样的

512
00:20:08,360 --> 00:20:11,500
You click in the Master it updates your Detail.
点击 Master 界面上的东西，你的 Detail 界面就会更新

513
00:20:11,500 --> 00:20:13,430
You click again in the Master to update the Detail,
你再次点击 Master 界面的东西来更新 Detail

514
00:20:13,430 --> 00:20:15,300
and the Detail changes and you think oh,
然后 Detail 改变了，然后你会想，噢

515
00:20:15,300 --> 00:20:17,200
that was the same thing it just got changed.
这和刚刚是一样的东西，只是改变了一点东西

516
00:20:17,200 --> 00:20:19,040
No the previous one got thrown away and
不是这样的，先前的那个被丢掉了

517
00:20:19,040 --> 00:20:21,140
new Detail got created, okay?
你看到的是新创建的 Detail 界面

518
00:20:22,070 --> 00:20:23,870
So Segues always create a new MVC.
因此 Segues 总是创建新的 MVC

519
00:20:25,140 --> 00:20:28,180
All right, so how do we make these Segues happen, okay?
好的，我们怎么实现这些 Segue 呢

520
00:20:28,180 --> 00:20:29,640
You can do this in code as well, and
你可以用代码来实现

521
00:20:29,650 --> 00:20:32,350
I'm gonna show briefly how you do this in code.
我也会简单给你们展示一下怎么用代码实现

522
00:20:32,350 --> 00:20:34,580
But in 90% of the time you're gonna do it
但是百分之九十的情况你都将会

523
00:20:34,580 --> 00:20:36,450
in a Storyboard with Control drag,
在 Storyboard 中使用 Control 键加拖动来实现

524
00:20:36,450 --> 00:20:39,820
which is how we create most of the things we do in iOS.
这也是我们在 iOS 中创建东西最常用的方法

525
00:20:39,820 --> 00:20:42,620
So here's an example of doing it with the Control drag,
下面是一个用 Control 键加拖动来实现 Segue 的例子

526
00:20:43,990 --> 00:20:47,230
I'm Control dragging from a button in my calculator, so
我按住 Control 然后从按钮拖动到我的计算器

527
00:20:47,230 --> 00:20:48,260
I added a button.
那么我添加了一个按钮

528
00:20:48,260 --> 00:20:49,600
The icon is very, very small but
它的图标很小很小

529
00:20:51,870 --> 00:20:53,450
it actually looks like a little graph.
但是事实上它看起来像一个小图表

530
00:20:53,450 --> 00:20:55,030
So I'm Control dragging from that in the upper right corner
那么我 Control 拖动，从右上角

531
00:20:55,040 --> 00:20:58,070
there down to the Detail, because I
拖到 Detail 这个界面

532
00:20:58,070 --> 00:21:01,340
want when that buttons pressed I want the detail to be
因为我希望当我点击这个按钮时，Detail 界面就能够

533
00:21:01,340 --> 00:21:06,440
replaced with a new graphing MVC, okay?
被替换为一个新的绘图 MVC

534
00:21:06,450 --> 00:21:07,680
When I let go it that,
当我放开鼠标

535
00:21:07,680 --> 00:21:11,310
it's gonna say, what kind of Segue do you want?
Xcode 就会问你想要哪一种 Segue

536
00:21:11,320 --> 00:21:13,980
This little black box is gonna appear.
将会弹出这个小小的黑色框框

537
00:21:13,990 --> 00:21:15,420
And here I'm gonna pick Show Detail,
这里我会选择 Show Detail

538
00:21:15,420 --> 00:21:16,650
because if I'm in a Split View,
因为这是个 Split View

539
00:21:16,650 --> 00:21:18,450
I wanted to replace the Detail.
我想要替代 Detail

540
00:21:18,460 --> 00:21:21,160
If I was in a Navigation Controller only,
如果这是个 Navigation Controller

541
00:21:21,160 --> 00:21:23,190
I probably still would choose Show Detail because that
我也许仍然会选择 Show Detail

542
00:21:23,190 --> 00:21:25,030
also pushes on the stack.
因为这也会把 View 压入栈内

543
00:21:25,030 --> 00:21:27,130
But if I were the Master in a Split View and
但是如果是 Split View 中的 Master

544
00:21:27,130 --> 00:21:28,500
I didn't want it to do the Detail,
我不希望它是 Detail

545
00:21:28,500 --> 00:21:31,260
I wanted it to actually slide on the stack of the Master,
我希望它存在 Master 的栈中

546
00:21:31,270 --> 00:21:34,070
cuz the Master could be a stack then I would use Show.
因为 Master 可以是一个栈，这种情况我就会用 Show Segue

547
00:21:34,070 --> 00:21:35,700
All right?

548
00:21:35,700 --> 00:21:39,570
I could also make it a Popover or a Modal here.
我也可以让它以 Popover 或者 Modal 的形式展示

549
00:21:39,570 --> 00:21:42,710
So I'm gonna pick Show Detail, that's what I want.
这里我选择 Show Detail，这正是我想要的

550
00:21:42,710 --> 00:21:46,840
And it's gonna make a line appear in the Storyboard.
这将会在 Storyboard 中生成一条连线

551
00:21:46,850 --> 00:21:49,210
And the middle of the line is a little round circle.
线的中间有个小小的圆圈

552
00:21:49,220 --> 00:21:51,520
If you click on that and bring up the attribute
如果你点击它，attribute inspector 中就会显示它的属性

553
00:21:51,520 --> 00:21:54,920
inspector, on the right you'll see that there's a little pop
你将会在右边看到这个下拉框

554
00:21:54,920 --> 00:21:56,750
up that says what kind of Segue you want.
上面显示你用的是哪种 Segue

555
00:21:56,760 --> 00:21:59,660
We already, we already chose this one to be Show Detail.
我们已经选择了 Show Detail 作为 Segue 的类型

556
00:21:59,660 --> 00:22:02,430
And there's also a critical field there called Identifier.
这里还有一个重要的区域，叫做 Identifier（标识符）

557
00:22:02,430 --> 00:22:04,630
That's a unique Identifier for
这是你的 Segue 唯一的 Identifier

558
00:22:04,630 --> 00:22:07,700
this segue, and you need this Identifier.
你将会在后面用到这个 Identifier

559
00:22:07,700 --> 00:22:10,900
Let's talk about, why we need this Identifier?
我们来说说为什么需要这个 Identifier

560
00:22:10,900 --> 00:22:12,500
So I'm gonna call this Identifier for
我把这个 Identifier

561
00:22:12,500 --> 00:22:14,820
this one Show Graph.
叫做 Show Graph

562
00:22:14,820 --> 00:22:17,140
And you should usually, call the Segue something that
一般来说你应该把 Segue 命名为

563
00:22:17,140 --> 00:22:20,370
is probably a verb phrase that says what this segue does.
一个动词短语，这个名字能够告诉别人这个 Segue 是用来做什么的

564
00:22:20,380 --> 00:22:21,980
So this Segue when you're pressing the button it
这里的这个 Segue 是当你按下那个按钮时

565
00:22:21,980 --> 00:22:25,850
shows a graph so I'm gonna call it Show Graph, okay?
它显示出一个图标，所以我就叫它为 Show Graph

566
00:22:25,850 --> 00:22:27,210
So just type that in there.
把名字输入进去就好了

567
00:22:27,220 --> 00:22:29,680
So, I told you before that everything in the Storyboard
我曾经说过，Storyboard 里的所有东西

568
00:22:29,680 --> 00:22:32,320
is linked up with what's in your code by name.
都是通过名字来和你的代码连接在一起的

569
00:22:32,320 --> 00:22:33,720
Whether it's the class of View Controller.
不管是 ViewController 的 class

570
00:22:33,720 --> 00:22:35,090
Class of of UI view.
或者是 UIView 的 class

571
00:22:35,090 --> 00:22:36,150
Name of an outlet.
outlet 的名字

572
00:22:36,160 --> 00:22:37,250
Name of an action.
action 的名字

573
00:22:37,260 --> 00:22:38,870
Name of a Segue which is
Segue 的名字

574
00:22:38,870 --> 00:22:40,490
basically what the Identifier of a segue is.
这里说的就是 Segue 的 Identifier

575
00:22:40,490 --> 00:22:41,930
They're all just names, and
它们通通都只是名字而已

576
00:22:41,930 --> 00:22:44,060
we have to make the names the same in our code.
我们需要让代码中的名字和 Storyboard 中的名字一致

577
00:22:44,060 --> 00:22:46,700
So it's a loose coupling to make those two
这是一种松散耦合，能让两个

578
00:22:46,700 --> 00:22:48,630
things work together.
东西连接在一起

579
00:22:48,630 --> 00:22:50,570
So, we'll have to reference this name in our code.
因此我们需要让我们的代码和这个名字关联起来

580
00:22:51,870 --> 00:22:54,040
Okay, so where, where are we gonna use that Identifier?
好的，那我们在哪里用到这个 Identifier 呢

581
00:22:54,040 --> 00:22:57,740
Well, one way we can do it, only the 10% case I said,
其中一种方法，很少用到，可能只有 10% 的情况

582
00:22:57,740 --> 00:23:00,640
is to cause a Segue to happen from code.
就是在代码中触发这个 Segue

583
00:23:00,640 --> 00:23:02,690
And you do that with
你会用

584
00:23:02,690 --> 00:23:04,740
UIViewController method performSequeWithIdentifier.
UIViewController 的一个方法，叫 performSequeWithIdentifier

585
00:23:04,750 --> 00:23:06,480
And you just specify that Identifier, and
你只要在里面用了这个 Identifier，

586
00:23:06,480 --> 00:23:08,010
it's gonna make that Segue happen, okay?
就能触发这个 Segue

587
00:23:09,620 --> 00:23:10,880
Simple as that,
很简单

588
00:23:10,890 --> 00:23:12,180
so I am not gonna talk about this,
所以我不会讲这个的，

589
00:23:12,190 --> 00:23:14,120
because you're not gonna be doing this one,
因为你们不会用这个，

590
00:23:14,120 --> 00:23:15,990
probably in this class, maybe in your final project,
也许在这节课不会用，也许你们的最后的项目会用到

591
00:23:15,990 --> 00:23:17,560
you might find a reason to do it.
你也许能找到一个用它的理由

592
00:23:18,890 --> 00:23:21,730
But the number one reason to have the Identifier in there
但是使用 Identifier 最主要的理由

593
00:23:21,730 --> 00:23:23,460
and the main thing that it's used for
也是最主要用到的地方

594
00:23:23,460 --> 00:23:27,730
is to prepare a Segue, because when that segue happens,
是准备一个 Segue，因为当这些 Segue 被触发

595
00:23:27,730 --> 00:23:32,000
it creates a new MVC, that new MVC was just born.
它会创建一个新的 MVC，这个 MVC 刚来到这个世界

596
00:23:32,000 --> 00:23:34,570
It needs to be prepared to do what it wants to do.
它需要一些准备才能做你想让它做的事情

597
00:23:34,570 --> 00:23:36,760
So for example,
举例说明

598
00:23:36,760 --> 00:23:38,940
in the calculator case, when I Segue to a graphing MVC,
在计算器的例子中，当我 Segue 到一个绘图 MVC

599
00:23:39,880 --> 00:23:41,680
it's just a blank graphing MVC.
它只是一个空白的绘图 MVC

600
00:23:41,680 --> 00:23:43,340
I have to tell it what to graph.
我需要告诉它画什么

601
00:23:43,350 --> 00:23:46,150
I have to prepare it basically, okay?
我需要为它准备最基本的东西

602
00:23:46,150 --> 00:23:48,150
So, that's the number one thing, preparing.
所以这是最重要的，准备

603
00:23:48,150 --> 00:23:50,120
So how does preparing work?
怎么做这个准备工作呢

604
00:23:50,120 --> 00:23:52,080
Preparing very simple.
准备很简单的

605
00:23:52,090 --> 00:23:55,690
The MVC that contains the instigator of this segue.
MVC 包含着一个 segue 的发起者

606
00:23:55,690 --> 00:23:58,820
Like the button, or whatever's causing it to segue.
比如按钮，或者任何能够触发 segue 的东西

607
00:23:58,830 --> 00:24:01,990
That MVC implements a method called, prepareForSegue.
MVC 实现了一个方法，叫做 prepareForeSegue

608
00:24:02,000 --> 00:24:05,200
And inside, it gets the MVC that was just created, and
在里面，它存着刚刚创建出来的 MVC，

609
00:24:05,200 --> 00:24:06,960
it has to prepare it.
它需要为这个 MVC 做准备

610
00:24:06,970 --> 00:24:09,430
So let's talk about what that code looks like,
接着我们来说说这个 prepareForSegue

611
00:24:09,440 --> 00:24:11,200
prepareForSegue.
里面的代码长什么样子

612
00:24:11,200 --> 00:24:12,740
It takes two arguments, okay?
它有两个参数

613
00:24:12,740 --> 00:24:14,940
The first one is the segue.
第一个就是 segue

614
00:24:14,940 --> 00:24:16,840
That's UIStoryboardSegue instance and
UIStoryboardSegue 的实例

615
00:24:16,840 --> 00:24:18,910
it really has two important things in there.
这个实例里有两个相当重要的东西

616
00:24:18,910 --> 00:24:20,480
One is the Identifier, so
一个是 Identifier

617
00:24:20,480 --> 00:24:22,310
you know which segue you're preparing.
这能让你知道你在准备哪一个 segue

618
00:24:22,310 --> 00:24:24,200
And two is,
第二个是

619
00:24:24,200 --> 00:24:26,080
the MVC that it just created that you're going to segue to,
这个 segue 发生时新建的那个 MVC

620
00:24:26,080 --> 00:24:28,780
which is called the destinationViewController.
名字叫 destinationViewController

621
00:24:28,780 --> 00:24:30,150
It has a second argument there,
第二个参数是

622
00:24:30,150 --> 00:24:33,220
which is sender, that's just the UIButton or
叫做 sender 的，这就是比如说我们这里的 UIButton

623
00:24:33,220 --> 00:24:36,120
whatever that caused the segue to happen.
或者触发这个 segue 的东西

624
00:24:36,120 --> 00:24:38,220
You don't usually need to look at that but sometimes.
一般来说你不需要经常用到这个参数

625
00:24:38,230 --> 00:24:40,560
We'll see later in the quarter when we wanna look at that.
这学期后面一点我们将会用到它的，到那时我们再看看它

626
00:24:40,560 --> 00:24:42,590
But that's all it is,
这就是它的全部了

627
00:24:42,600 --> 00:24:44,630
it's just what object caused the segue to happen.
它就是一个触发 segue 的对象

628
00:24:45,730 --> 00:24:48,000
So we're gonna look at that segue identifier.
我们来看一看这个 segue 的 Identifier

629
00:24:48,000 --> 00:24:49,770
It's just a property, segue.identifier.
它只是一个 segue 的属性，通过 segue.identifier 来访问

630
00:24:49,770 --> 00:24:52,240
It could be nil, because you might not have set it.
它可能是 nil 值，因为你可能没有给它赋值

631
00:24:52,240 --> 00:24:54,670
And so you wanna check if it's nil here, so
所以你需要去检查一下它是不是 nil

632
00:24:54,670 --> 00:24:57,710
here I am doing "if let" to check if that thing is nil.
所以这里我做解包，用 if let 来检查一下它是不是 nil

633
00:24:57,710 --> 00:25:00,410
Then I'm just gonna switch on it, okay?
接着我只需要用 switch 来区分

634
00:25:00,410 --> 00:25:03,080
And I'm gonna look for Show Graph, and
我需要的是 Show Graph

635
00:25:03,080 --> 00:25:06,750
once I know that, I'm preparing to show a graph,
一旦我知道了是哪一个，我就需要准备显示图表了

636
00:25:06,750 --> 00:25:08,920
then I can say, give me the MVC,
我可以告诉它，把 MVC 给我

637
00:25:08,920 --> 00:25:12,450
that graphing calculator MVC that you just made.
这个 MVC 是你刚刚新建的用来画图表的 MVC

638
00:25:12,460 --> 00:25:15,220
Now, the thing is segue.destinationViewController,
现在，这个 MVC 就是 segue.destinationViewController

639
00:25:15,220 --> 00:25:16,960
that property is anyObject.
这个属性是一个 anyObject

640
00:25:18,230 --> 00:25:21,590
Okay, so you have to use as to turn it into
你需要把这个 anyObject 变成

641
00:25:21,600 --> 00:25:24,460
the right class of the MVC you just create.
你刚刚创建的 MVC 的类

642
00:25:24,470 --> 00:25:26,070
Now in the case here,
在这个例子中

643
00:25:26,070 --> 00:25:28,630
I created a calculator graph View Controller,
我创建了一个计算器画图的 View Controller

644
00:25:28,640 --> 00:25:30,940
I've abbreviated here calcGraphViewController,
我缩写成 calcGraphViewController

645
00:25:30,940 --> 00:25:33,200
although you shouldn't do that in your homework, okay?
尽管如此，你不该在你的作业中这么写

646
00:25:33,210 --> 00:25:34,970
It's just that it wouldn't fit on the slide here,
我这么写是因为如果不缩写就太长了，ppt单行容纳不下

647
00:25:34,970 --> 00:25:37,440
so CalculatorGraphViewControllers are on,
所以 CalculatorGraphViewControllers 是

648
00:25:37,440 --> 00:25:38,640
turning that destinationViewController
把 destinationView 变成

649
00:25:38,640 --> 00:25:40,610
into a CalculatorGraphViewController, and
一个 CalculatorGraphViewController

650
00:25:40,610 --> 00:25:42,410
if I can't do it, well then I can't prepare it.
如果我不能把它变成 CalculatorGraphViewController，那我就不能准备它了

651
00:25:42,410 --> 00:25:44,310
So, I'm just gonna do if let there.
所以我这里用 if let 来解包

652
00:25:45,450 --> 00:25:50,390
So if I can, then I'm just going to call methods and set
如果我能够解包，也就是不是 nil 值，那我就可以在

653
00:25:50,390 --> 00:25:54,620
properties in that CalculatorGraphViewController, that
CalculatorGraphViewController 中调用方法和设定属性的值

654
00:25:54,620 --> 00:25:58,830
are needed to prepare that thing to come onscreen, okay?
这样就可以准备展现在屏幕上的东西了

655
00:25:58,830 --> 00:26:01,060
So again in this case I
再一次在这个例子中

656
00:26:01,060 --> 00:26:03,300
would probably tell it what I wanted it to graph here.
我很可能会告诉它我想要画什么

657
00:26:03,300 --> 00:26:06,270
Okay, maybe I would set it to color, or something else.
也许我会设定它的颜色之类的

658
00:26:06,270 --> 00:26:09,670
The scale, or I don't know whatever we wanted to set here
或者缩放大小，或者一些其他的东西

659
00:26:09,670 --> 00:26:12,240
we can do, okay?
我们都能这么做

660
00:26:12,240 --> 00:26:15,540
Now, I don't put a lot of red on my slides.
一般来说，我不会在我的幻灯片中放红色的东西

661
00:26:15,540 --> 00:26:18,040
And when I do, you really should pay attention, okay?
如果我放了，那你就真的要认真看一看了

662
00:26:18,050 --> 00:26:20,080
Very important thing to understand,
需要理解的很重要很重要的东西

663
00:26:20,080 --> 00:26:23,150
is when you are preparing that newly created MVC,
就是当你在准备新创建的 MVC 的时候

664
00:26:24,220 --> 00:26:26,620
it's outlets have not been set.
它的 outlet 还没被设定

665
00:26:28,290 --> 00:26:30,170
Remember outlets are these
记得这些 outlet 是

666
00:26:30,170 --> 00:26:32,050
implicitly unwrapped optionals, we are always kind
隐性解包的 optional，一般来说

667
00:26:32,060 --> 00:26:33,890
of expecting them to have been set.
它们都是被设定值的

668
00:26:33,890 --> 00:26:36,320
Well, this is one case where that's not true.
但是这个情况例外

669
00:26:36,330 --> 00:26:39,060
When you're preparing your MVC, it's outlets are not yet
当你正在准备你的 MVC 的时候，它的 outlet 还没

670
00:26:39,060 --> 00:26:40,860
set, okay?
被设定

671
00:26:40,860 --> 00:26:44,800
That can cause crashers, that can cause you to unexpected
这会让你的程序崩了，也可能会产生一些意想不到的

672
00:26:44,800 --> 00:26:48,400
behavior, because you set something in preparing it and
行为，因为你在准备的时候设定了一些东西

673
00:26:48,400 --> 00:26:51,570
you're expecting something in the view to have been set, but
你希望设定的东西是已经设定过的了，但是

674
00:26:51,570 --> 00:26:54,470
it didn't happen because the outlet is just not set yet.
它没发生，因为这些 outlet 还么被赋值

675
00:26:54,480 --> 00:26:57,640
So you have to take whatever the preparation is and hold
所以你需要把你的关于这些 oulet 的准备工作暂时存到一个地方

676
00:26:57,650 --> 00:27:01,250
onto it, and then later on when the outlet does get set,
当这些 outlet 被赋值了以后

677
00:27:01,250 --> 00:27:04,780
maybe in the property observer of that outlet, you can load
也许在 outlet 中的 property observer，你可以把

678
00:27:04,790 --> 00:27:08,390
up the information that you're prepared with here, okay?
刚刚准备的那些信息读取然后再设定

679
00:27:08,390 --> 00:27:09,290
I'll see that in the demo.
一会展示给你们看

680
00:27:09,290 --> 00:27:10,890
I've made my demo
我已经故意让我的展示

681
00:27:10,890 --> 00:27:12,490
intentionally crash because of this.
因为这个而崩溃了

682
00:27:12,490 --> 00:27:14,890
And we'll go back and look at why that happens, okay?
我们会看看为什么会这样

683
00:27:14,890 --> 00:27:18,960
But this is red, pay attention, you know,
这个是红色的，请注意，你知道

684
00:27:18,960 --> 00:27:20,630
if your segue doesn't work the first time,
如果你的 segue 一开始没正常工作

685
00:27:20,630 --> 00:27:23,200
it might well be because you're expecting outlets to
有可能是因为你以为 outlet 在

686
00:27:23,200 --> 00:27:29,340
be set when your MVC is being prepared, okay?
准备的时候已经赋值了

687
00:27:29,340 --> 00:27:30,740
So that's preparing for a segue.
这就是准备 segue

688
00:27:30,740 --> 00:27:33,140
You can also prevent a segue from happening.
你也可以防止一个 segue 的触发

689
00:27:33,140 --> 00:27:34,540
If there's some reason it doesn't make sense for
如果有些原因让 segue 的发生不合理

690
00:27:34,540 --> 00:27:36,710
that segue to happen, you could just disable the button,
你直接可以禁用那个按钮

691
00:27:36,710 --> 00:27:39,950
but if you didn't wanna disable the button you could
不过如果你不想禁用按钮的话，你希望能够

692
00:27:39,950 --> 00:27:41,920
click the button.
点击那个按钮

693
00:27:41,920 --> 00:27:43,880
And what'll happen here is your UIViewController will be
这时候你的 UIViewController 会被问到

694
00:27:43,890 --> 00:27:47,220
asked, should I perform this segue with Identifier?
我应该执行这个 Identifier 的 segue 吗

695
00:27:47,220 --> 00:27:49,290
It'll pass you the Identifier and the sender.
它会把 Identifier 和 sender 传给你

696
00:27:49,290 --> 00:27:51,060
And you can just return, false.
然后你可以返回 false

697
00:27:51,060 --> 00:27:53,960
And then it won't do that segue.
那么它就不会执行 segue 了

698
00:27:53,960 --> 00:27:56,150
It won't crash or anything.
这样做所有东西都不会崩

699
00:27:56,150 --> 00:27:58,330
It just, you know, touch the button, it does nothing.
它只是，当你按这个按钮，它什么都不会触发

700
00:27:58,330 --> 00:28:01,430
'Kay, so you can control your segues kind of
所以你可以某种意义上

701
00:28:01,440 --> 00:28:05,440
programmatically as well like that.Okay?
用代码来控制你的 segue 了

703
00:28:05,440 --> 00:28:07,200
So, demo time here.
那么，演示时间开始

704
00:28:07,210 --> 00:28:09,770
We're gonna demonstrate all of this.
我们将要演示刚刚说的那些

705
00:28:09,780 --> 00:28:13,680
And I'm gonna do this demonstration by creating
为了演示这些，我将会创建一个

706
00:28:13,680 --> 00:28:18,450
completely new application called Psychologist.
完全新的应用，叫 Psychologist

707
00:28:18,450 --> 00:28:21,420
Okay, so, let's go over here.
那么我们开始吧

708
00:28:22,750 --> 00:28:24,420
So I'm going to Xcode.
我将要打开 Xcode

709
00:28:24,420 --> 00:28:25,690
And here's Happiness and Calculator.
这里是 Happiness 和 Calculator 项目

710
00:28:25,690 --> 00:28:27,890
But I'm gonna create a new project here.
但是我将要创建一个新的项目

711
00:28:27,890 --> 00:28:33,190
I'm gonna call it psychologist, Psychologist.
我将其命名为 Psychologist

712
00:28:33,190 --> 00:28:37,400
Okay this gonna put it in the same place that
我把它放在和我们前两个项目

713
00:28:37,400 --> 00:28:40,030
my Calculator and Happiness apps were.
Calculator 和 Happiness 相同的目录下

714
00:28:41,230 --> 00:28:42,750
Here it is.
创建好了

715
00:28:42,750 --> 00:28:44,270
I'm gonna move these things out of the way,
我将把这些东西放到 Supporting Files，

716
00:28:44,270 --> 00:28:46,470
like we always do.
就像我们之前做的那样

717
00:28:46,470 --> 00:28:48,670
The images, the assets, the launch screen so that I
这些 images 啊， assets 啊， LaunchScreen 啊都放进去

718
00:28:48,670 --> 00:28:53,140
just have my main Storyboard here and this View Controller.
那么外面只剩下 MainStoryboard 和这个 ViewController 了

719
00:28:53,150 --> 00:28:55,810
And I'm actually gonna rename this View Controller.
事实上我会改一下这个 ViewController 的名字

720
00:28:55,810 --> 00:28:59,080
I don't like the name generic ViewController.
我不喜欢用这个普通的 ViewController 这个名字

721
00:28:59,080 --> 00:29:00,280
I even had you change it
我甚至会要求你们也要改

722
00:29:01,220 --> 00:29:02,850
in the latest homework assignment, because I
在这一次作业中要你们改，因为我

723
00:29:02,850 --> 00:29:04,720
just don't think that's a very descriptive name.
觉得这不是一个带有描述性的名字

724
00:29:04,720 --> 00:29:07,190
So, I'm gonna change the name of
于是我把我的 ViewController

725
00:29:07,190 --> 00:29:09,660
my ViewController here to be PsychologistViewController.
的名字改成 PsychologistViewController

726
00:29:09,660 --> 00:29:12,090
So I have to do that in three different places again,
所以我需要改三个地方

727
00:29:12,090 --> 00:29:17,330
so here I'm gonna say Psychologist. Okay?
这里加上 Psychologist

729
00:29:17,330 --> 00:29:19,100
Here I'm gonna change the name of the file,
这里我更改文件的名字

730
00:29:19,100 --> 00:29:20,900
to be Psychologist.
加上 Psychologist

731
00:29:20,900 --> 00:29:23,640
That's surprisingly hard to type by the way.
抱怨一下，这挺难打的

732
00:29:23,640 --> 00:29:25,100
And then in the Storyboard,
接着在 Storyboard 中

733
00:29:25,110 --> 00:29:28,040
of course, I need to go to the identity inspector here and
当然，我需要在 identity inspector 这里

734
00:29:28,040 --> 00:29:30,640
change it to be a PsychologistViewController.
修改成 PsychologistViewController

735
00:29:31,810 --> 00:29:33,840
So that's those three steps.
就是这三个地方了

736
00:29:33,850 --> 00:29:35,880
So now I have this PsychologistViewController.
那么现在我有了这个 PsychologistViewController

737
00:29:35,880 --> 00:29:37,280
What's this Psychologist gonna do?
它需要做什么呢

738
00:29:37,280 --> 00:29:40,650
Well, he can ask you a question like Psychologists
他可以像一个心理学家一样问你一个

739
00:29:40,650 --> 00:29:41,890
want to do.
问题

740
00:29:41,890 --> 00:29:43,120
And you're gonna give an answer.
然后你需要提供一个答案

741
00:29:43,120 --> 00:29:45,450
And then he's gonna make a diagnosis.
紧接着他将会对此做出判断

742
00:29:45,460 --> 00:29:47,090
Okay. Based on your answer as to
好了，基于你的回答然后

743
00:29:47,090 --> 00:29:48,690
how happy you are or not.
判断出你快不快乐

744
00:29:48,690 --> 00:29:51,790
And then it's gonna use the HappinessViewController,
然后它就会用 HappinessViewController

745
00:29:51,800 --> 00:29:55,000
to show how happy you are, show the diagnosis basically.
来告诉你快不快乐，显示出判断结果

746
00:29:55,000 --> 00:29:56,630
Okay, so we are gonna use both the
所以我们将会同时

747
00:29:56,630 --> 00:29:58,430
PsychologistViewController, and
用到 PsychologistViewController

748
00:29:58,430 --> 00:30:00,870
the HappinessViewController from our last app.
和 HappinessViewController，后者是我们上一个 app 中写的

749
00:30:00,870 --> 00:30:03,200
But let's start with this PsychologistViewController
那么，让我们开始实现这个 PsychologistViewController

750
00:30:03,210 --> 00:30:05,270
here, let's build its UI.
先设计它的 UI

751
00:30:05,270 --> 00:30:06,870
He's going to ask a question, so
他会提问题，所以

752
00:30:06,870 --> 00:30:09,240
I'm going to bring out a label for the question.
我拖出一个 label 用来显示问题

753
00:30:09,240 --> 00:30:12,010
He's going to ask the question,
他将会问

754
00:30:12,010 --> 00:30:15,810
what do you see in your dreams?
你在梦中看到了什么

755
00:30:15,820 --> 00:30:17,700
That sounds like
这听起来像

756
00:30:17,700 --> 00:30:19,580
a very psychologisty kind of question.
一个很心理学的问题

757
00:30:19,590 --> 00:30:21,820
And let's make it bigger font.
让字体变大一点

758
00:30:22,890 --> 00:30:25,690
Maybe like, 36 point or something like that.
大概 36 point 上下

759
00:30:27,430 --> 00:30:31,190
We can make it larger here.
让文本框也大一点

760
00:30:32,900 --> 00:30:36,060
Let's center it, make this text centered.
让文本居中

761
00:30:36,070 --> 00:30:38,070
Let's try to put it in a nice place, okay?
我们试着把它放到一个好的位置

762
00:30:38,070 --> 00:30:40,370
Let's use our blue lines to put it somewhere here.
用这些蓝线条来对齐

763
00:30:40,370 --> 00:30:43,440
Let's put it like that, so it's nice.
这么放就挺好的

764
00:30:43,440 --> 00:30:46,970
And put it in a good place.
让它呆在一个好的位置

765
00:30:46,980 --> 00:30:48,170
Let's try.
尝试一下

766
00:30:48,180 --> 00:30:49,740
I'm going to show you a little bit of
我每节课都尝试给你们传授一点

767
00:30:49,740 --> 00:30:51,040
Auto Layout every lecture.
关于 Auto Layout 的秘籍

768
00:30:51,050 --> 00:30:53,110
Just show you kind of things you can do.
展示一下你们可以怎么做

769
00:30:53,110 --> 00:30:55,110
So let's try and see if we can.
那我们一起试试看能不能这么做

770
00:30:55,120 --> 00:30:57,180
We put this all on blue lines up here.
我们把它全按照蓝线来放

771
00:30:57,180 --> 00:30:58,780
Right.
好的

772
00:30:58,780 --> 00:31:00,380
So let's see if we can request, or have it
接着来看看我们能否让它用这个

773
00:31:00,390 --> 00:31:03,390
Reset to Suggested Constraints and see if it'll work, okay?
Reset to Suggested Constraints，然后看看行不行

774
00:31:03,390 --> 00:31:05,620
So here I'm, this is for the Selected View.
这里是给选中的 View 的

775
00:31:05,620 --> 00:31:07,260
To select this view.
选中这个view

776
00:31:07,260 --> 00:31:10,830
I'm gonna go reset to Suggested Constraints.
我将要设置 reset to Suggested Constraints

777
00:31:10,830 --> 00:31:11,730
Now, let's see what happened.
现在看看发生了什么

778
00:31:11,730 --> 00:31:12,560
Now, this doesn't look good.
这并不好

779
00:31:12,560 --> 00:31:14,430
I don't like this,
我不喜欢这个

780
00:31:14,430 --> 00:31:16,300
cuz I really don't want this thing attached to the bottom.
因为我真的不想这个东西和 view 的底部有关系

781
00:31:16,300 --> 00:31:19,000
But the real place, a good place to look for
但是一个能看到我们约束的地方是

782
00:31:19,000 --> 00:31:22,570
the constraints is over here again in Size Inspector.
这里的 Size Inspector

783
00:31:22,570 --> 00:31:24,000
If you look down at the bottom,
如果你看下去

784
00:31:24,010 --> 00:31:26,970
you can see all the constraints that that reset to
你能看到所有的约束

785
00:31:26,980 --> 00:31:28,810
Suggested Constraints did.
这些都是 reset to Suggested Constraints 生成的

786
00:31:28,810 --> 00:31:32,680
And I'd like this one, and I like that one.
我喜欢这个，也喜欢那个

787
00:31:32,680 --> 00:31:33,810
And I like that one.
还有这个也是

788
00:31:33,810 --> 00:31:35,010
But I don't like that one.
但是我不喜欢那个

789
00:31:35,020 --> 00:31:36,350
So I can just click on it and
所以我可以点击它

790
00:31:36,350 --> 00:31:37,880
hit delete, and get rid of that.
然后按 delete 键，就把它删了

791
00:31:37,880 --> 00:31:39,350
Now as soon as I did that,
当我删掉它以后

792
00:31:39,350 --> 00:31:42,120
of course I got the yellow cuz it's misplaced.
我就会得到了这些黄色的线因为它没有足够的约束了

793
00:31:42,120 --> 00:31:43,390
So I'm gonna go back and
所以我需要回到这里

794
00:31:43,390 --> 00:31:46,290
do what we did all the way, way back in lecture one,
然后做我们在第一课里面做过的动作

795
00:31:46,290 --> 00:31:49,460
which I'm gonna update this frame, fix the misplacement.
更新这个 frame，修正这个位置的问题

796
00:31:49,460 --> 00:31:50,660
No issues.
没问题了

797
00:31:50,660 --> 00:31:52,360
Boom. I've got this where I want it.
咔的一下，我得到了我向要得结果

798
00:31:52,360 --> 00:31:55,800
Okay, so that's another way to use auto layout there.
所以这是另一个用 autolayout 的方法

799
00:31:56,970 --> 00:31:58,230
Alright, so let's get the answers out.
好的，接着把答案给拖出来

800
00:31:58,230 --> 00:31:59,500
Here's our question.
这里是我们的问题

801
00:31:59,500 --> 00:32:00,770
Let's grab our answers out here.
现在把答案抓出来

802
00:32:00,770 --> 00:32:05,670
So let's, maybe I see a dancing tree, okay?
所以，也许我在这里输入“我看到一棵会跳舞的树”

803
00:32:05,670 --> 00:32:07,710
If I see a dancing tree in my dream,
如果我想象看到一棵会跳舞的树

804
00:32:07,710 --> 00:32:09,840
let's make this font bigger again on this one too.
先让我把字体调大一点点

805
00:32:11,550 --> 00:32:14,550
If I see a dancing tree in my dreams I'm probably gonna be
如果我想象看到一棵会跳舞的树，我想我应该会

806
00:32:14,550 --> 00:32:16,280
pretty happy I think.
挺开心的

807
00:32:16,280 --> 00:32:18,580
So let's try and put this one where it should be.
尝试把它放在它该在的地方

808
00:32:18,590 --> 00:32:20,350
So I'm gonna try and
所以我尝试把它放在

809
00:32:20,350 --> 00:32:22,120
put this one right in the center of my view.
我的 view 的正中间

810
00:32:22,120 --> 00:32:25,090
So again, let's try and reset the suggested constraints and
再一次，试一下用 Reset to the Suggest Constraint

811
00:32:25,090 --> 00:32:26,320
see if that works.
看这行不行

812
00:32:26,330 --> 00:32:28,220
Okay well that looks bad too.
好吧这个也不太行

813
00:32:28,230 --> 00:32:29,690
So let's go look over and see what it did.
所以我们看看它做了些什么

814
00:32:31,600 --> 00:32:34,100
Alright, well, it aligns center to the super view.
啊好的它在父类 view 中居中了

815
00:32:34,100 --> 00:32:35,260
That looks good.
这看起来不错

816
00:32:35,270 --> 00:32:39,170
But it aligned the X up with this thing up here and
但是它和 X 轴的上面对齐

817
00:32:39,170 --> 00:32:40,940
I don't really want that, so I'm gonna delete that.
我并不想要这样，所以我删掉它

818
00:32:40,940 --> 00:32:43,470
The bottom space, I definitely don't want that.
离底部的距离，我肯定也不想要这个

819
00:32:43,470 --> 00:32:45,270
And it fixed the width.
还有固定了它的宽度

820
00:32:45,270 --> 00:32:46,870
I definitely don't want the width fixed.
我肯定不想要宽度是固定的

821
00:32:46,880 --> 00:32:50,140
I want the width to match whatever the size of
我希望宽度随着里面的内容变化

822
00:32:50,150 --> 00:32:51,480
this thing is.
而变化

823
00:32:51,480 --> 00:32:52,810
So, kinda got most things here.
看起来做了很多东西

824
00:32:52,810 --> 00:32:55,780
But I really don't have a vertical position or
但是我并不想设定这个东西的

825
00:32:55,780 --> 00:32:58,150
horizontal position of this thing set.
垂直位置和水平位置

826
00:32:58,150 --> 00:33:00,690
So I'm gonna use another one down here.
所以我需要用这下面的另一个按钮

827
00:33:00,690 --> 00:33:02,150
This is the alignment one.
这就是 alignment 的这个按钮

828
00:33:02,160 --> 00:33:05,260
And I'm gonna go down here and say, I want the alignment,
然后我在最下面，我希望这个对齐

829
00:33:05,260 --> 00:33:10,590
the horizontal and vertical centers to be lined up.
到水平中心和垂直中心

830
00:33:10,600 --> 00:33:15,030
So I really already got the vertical center right there.
所以我已经在有垂直中心的这个约束了

831
00:33:15,030 --> 00:33:16,400
So I just do horizontal center, so
我只需要再加一个水平中心的就可以了

832
00:33:16,400 --> 00:33:17,770
I'll add that constraint.
那么我就添加了这个约束

833
00:33:17,770 --> 00:33:20,370
So now I've got these two things lined up,
所以现在我有这两个约束来对齐

834
00:33:20,370 --> 00:33:21,870
that looks like what I want.
这看起来就是我想要的

835
00:33:21,870 --> 00:33:25,910
Again, it's a little off this placement probably size is
再一次，这有一点点和放置的位置或者大小不一样

836
00:33:25,910 --> 00:33:28,710
not quite right, we'll put that right.
我们把它放到正确地位置

837
00:33:28,710 --> 00:33:32,850
And boom, now we've got this tree in the middle.Okay.
然后我们就让这个树居中了

839
00:33:32,850 --> 00:33:34,450
So let's add some more answers. I'm just going
接下来我们再添加多几个答案，我只要

840
00:33:34,450 --> 00:33:36,050
to copy and paste because I like this fun combination.
复制和粘贴就行了，因为我喜欢这个有趣的组合

841
00:33:36,050 --> 00:33:40,790
Let's say you dream of a dirty Golden, no not dirty,
比如说你想象一个肮脏的黄金，不不是肮脏

842
00:33:40,790 --> 00:33:43,790
we'll just say, a Golden Bear.
我们说，一个金色的熊

843
00:33:43,790 --> 00:33:45,960
[NOISE] Okay so let's say the Golden Bear somehow shows up
好吧这头金色的熊无意中出现

844
00:33:45,960 --> 00:33:46,590
in your dreams.
在你的想象里

845
00:33:46,590 --> 00:33:50,030
Doesn't sound very good.
听起来不太好

846
00:33:50,030 --> 00:33:51,100
So there's that.
就这样啦

847
00:33:51,100 --> 00:33:54,100
And this one, let's see if we
这个呢，我们看一下我们

848
00:33:54,100 --> 00:33:56,870
can do suggested constraints with this one.
能不能用推荐的约束

849
00:33:58,270 --> 00:34:00,700
Okay, we do that. Now this one looks good.
好的我们点击。哦！这看起来不错

850
00:34:00,710 --> 00:34:04,240
It's got the bottom space and the center.
它有底部距离，还有居中

851
00:34:04,240 --> 00:34:05,110
Looks good, okay?
看起来不错

852
00:34:05,110 --> 00:34:06,470
So we're rocking with that one.
所以我们就搞掂了这个了

853
00:34:06,480 --> 00:34:07,610
No need to do anything.
这个啥都不用做了

854
00:34:07,610 --> 00:34:08,540
Let's do another one.
来加另一个

855
00:34:09,680 --> 00:34:12,550
Buckeye, I'm not even sure what that is, but
加一个“七叶树”，我不太确定这是什么，但是

856
00:34:12,550 --> 00:34:14,080
we'll put that in there.
我们就把它放这里

857
00:34:14,080 --> 00:34:17,420
We'll reset suggested constraints for this one too.
我们也对它做 Reset Suggest Constraints

858
00:34:17,420 --> 00:34:19,690
Make sure that looks good, yes it does, okay,
保证它看起来不错，啊，是的看起来不错

859
00:34:19,690 --> 00:34:22,050
this is just the size inspector right here, alright.
这个是 Size Inspector

860
00:34:22,060 --> 00:34:23,640
Alright, so that's good.
好了，这不错

861
00:34:23,640 --> 00:34:25,220
So let's run our app and see how it looks.
先跑跑我们的程序看看怎么样

862
00:34:30,230 --> 00:34:31,360
Okay, here we go.
好的跑了

863
00:34:31,360 --> 00:34:32,500
Oh, that's doesn't look good.
噢这看起来不太好

864
00:34:32,500 --> 00:34:34,060
What do you see is getting cut off?
你看到这些字被切掉了

865
00:34:34,070 --> 00:34:35,530
Let's see, if we rotate.
我们旋转着看一看

866
00:34:35,530 --> 00:34:36,930
So it's good in landscape.
横屏模式看起来很好

867
00:34:36,940 --> 00:34:39,170
It doesn't look very good in portrait.
但是竖屏就不太好了

868
00:34:39,170 --> 00:34:40,900
So why is that happening right there?
为什么会这样呢

869
00:34:40,910 --> 00:34:43,670
Some of you found this out in your homework.
你们也能自己在作业中找到答案

870
00:34:43,670 --> 00:34:44,910
It's because right now,
因为在这里

871
00:34:44,910 --> 00:34:48,440
we have this thing set to be of a fixed size.
我们把这个的大小定死了

872
00:34:48,450 --> 00:34:52,550
The font size are here, see auto shrink, fixed font size.
字体大小，看这个 Autoshrink， Fixed Font Size（固定字体大小）

873
00:34:52,550 --> 00:34:54,010
And that doesn't need to be fixed,
但这个并不需要固定大小

874
00:34:54,020 --> 00:34:55,820
I'm happy if that's any size.
我会希望

875
00:34:55,820 --> 00:34:57,520
I really don't want it to
我不希望它的字体大小

876
00:34:57,520 --> 00:34:59,220
be any smaller than like 12 point.
比 12 点小

877
00:34:59,220 --> 00:35:01,190
That's getting pretty small in the UI so,
如果比这小整个 UI 就会很小

878
00:35:01,190 --> 00:35:04,090
I'm gonna set the minimum size to 12.
我把最小尺寸设为 12

879
00:35:04,090 --> 00:35:05,720
And now when we run,
现在当我们运行

880
00:35:05,730 --> 00:35:08,160
it'll make the font smaller to fit the size.
会让字体缩小来适应屏幕的尺寸

881
00:35:08,160 --> 00:35:10,300
But if we go to a larger, it will make the font bigger.
但是如果我们屏幕变宽，字体就会跟着变大

882
00:35:11,460 --> 00:35:12,980
Okay. Question back there.
好的后面有问题

883
00:35:12,980 --> 00:35:14,500
>> Is there any way to make it wrap around to the next line?
有没有办法让这段文字自动换行呢

884
00:35:14,500 --> 00:35:16,170
>> So the question is,
所以问题是

885
00:35:16,170 --> 00:35:18,770
is there any way to make this text wrap to the next line?
有没有办法让这些文字自动换行到下一行

886
00:35:18,770 --> 00:35:21,040
And there is.There's a couple of ways to do it.
有的，有几个方法来实现

887
00:35:21,040 --> 00:35:22,440
There's UI text view,
有一个是 UI TextView

888
00:35:22,440 --> 00:35:26,580
which is a very powerful text wrapping one.
这是个非常强大的可以让文字换行的东西

889
00:35:26,580 --> 00:35:29,310
But even Label, you can go here to the Label and
不过即使使用 Label，你可以点击你的 Label

890
00:35:29,310 --> 00:35:32,410
when you inspect it, you can say,
然后去到 inspector，你可以选择

891
00:35:32,420 --> 00:35:34,120
how you want the line breaks to happen.
你想怎么断句

892
00:35:34,120 --> 00:35:36,820
You see here it says truncate tail.
你看这里说的是删减尾部

893
00:35:36,820 --> 00:35:40,850
And you can also control how many lines long you're gonna
你也可以控制你想要这个 label

894
00:35:40,860 --> 00:35:42,420
allow the label to be.
能显示多少行

895
00:35:43,730 --> 00:35:48,860
Okay, so now we have this good UI, and we want to
好的，所以我们有这个做好的 UI，然后我们打算

896
00:35:48,860 --> 00:35:52,460
make it so that it works with the Happiness View Controller.
让它和我们的 Happiness View Controller 一起工作

897
00:35:52,470 --> 00:35:54,170
So we need our Happiness View Controller.
所以我们需要我们的 Happiness View Controller

898
00:35:54,170 --> 00:35:56,400
So how are we going to get our Happiness View Controller?
那我们怎么获得这个 Happiness View Controller 呢

899
00:35:56,400 --> 00:35:58,170
And the answer is,
答案是

900
00:35:58,170 --> 00:35:59,940
we're just going to copy and paste it from our other app.
我们只需要从另一个 app 中复制粘贴过来

901
00:35:59,940 --> 00:36:02,240
So let's go open our other app.
让我们打开另一个 app

902
00:36:02,240 --> 00:36:03,810
Okay, where is it?
唔，在哪儿呢

903
00:36:03,810 --> 00:36:05,370
It's here, Developer Happiness.
啊，在这儿，Developer文件夹，Happiness

904
00:36:05,380 --> 00:36:07,110
I'm just gonna open Happiness in Xcode.
我用 Xcode 打开 Happiness

905
00:36:07,110 --> 00:36:08,760
Here it is.
这就是了

906
00:36:08,760 --> 00:36:10,410
And I'm just gonna first of all copy the code over.
接着我只需要复制所有代码过来

907
00:36:10,420 --> 00:36:13,680
So I have my FaceView and my HappinessViewController.
这里我有 FaceView 和 HappinessViewController

908
00:36:13,690 --> 00:36:17,220
I'm just gonna drag them from one into the other.
我只需要把它们从这里拖到那里

909
00:36:18,160 --> 00:36:20,460
Okay, just drag them from one project into the other.
只用把它们从一个项目拖到另一个项目

910
00:36:20,460 --> 00:36:23,460
When you do, it'll allow you to copy them if you want, or
当你这么做时，它会询问你是复制它们，还是

911
00:36:23,460 --> 00:36:25,060
you could have a reference.
只是做一个引用

912
00:36:25,060 --> 00:36:27,830
If you're going to have a reference, make sure that that
如果你选择了引用，请确认

913
00:36:27,830 --> 00:36:30,330
place you're referencing to stays around,
你放这个引用的位置在哪里

914
00:36:30,330 --> 00:36:32,330
that you're not deleting it and things like that.
你不会删除它或做其他操作

915
00:36:32,330 --> 00:36:34,420
Or you could have a copy.
或者你可以选择复制

916
00:36:34,420 --> 00:36:36,500
I'm going to add a copy, the items right here.
我选复制，选择这里

917
00:36:36,500 --> 00:36:37,970
Okay, so, copy those two things in.
好的，把这俩复制进来

918
00:36:37,970 --> 00:36:40,070
And then what about my Storyboard here?
那么我们的 Storyboard 怎么办

919
00:36:40,070 --> 00:36:42,870
I need to kind of get this HappinessViewController
我需要有这个 HappinessView

920
00:36:42,880 --> 00:36:44,540
over here.
这里的

921
00:36:44,540 --> 00:36:46,810
Okay. Over, into this guy.
复制到这里

922
00:36:46,810 --> 00:36:48,680
Okay, well I can copy and paste that too.
我也可以复制粘贴这个

923
00:36:48,680 --> 00:36:50,810
Just select this thing, copy.
只需要选中它，复制

924
00:36:50,820 --> 00:36:52,250
Go over to here and paste.
来到这里，然后粘贴

925
00:36:52,250 --> 00:36:53,480
Okay.
就好了

926
00:36:53,490 --> 00:36:59,860
So, now I have somewhere my two View Controllers.
那么现在我有两个我的 ViewController 了

927
00:36:59,860 --> 00:37:02,260
Okay.
好的

928
00:37:02,260 --> 00:37:04,490
Now one thing I notice when you do copy and
现在我注意到一件事情

929
00:37:04,490 --> 00:37:07,900
paste, it doesn't draw the face.
当我复制粘贴以后，脸没有了

930
00:37:07,900 --> 00:37:11,100
It seems like it needs kind of a little bit of a kick,
看起来这需要一些触发，

931
00:37:11,100 --> 00:37:13,700
a little boost before I do that.
一些小的触发动作

932
00:37:13,700 --> 00:37:15,640
So like if you go to FaceView and
比如我去到 FaceView 的文件

933
00:37:15,640 --> 00:37:17,800
just edit this file and hit save.
然后稍稍编辑一下然后保存

934
00:37:17,810 --> 00:37:20,840
It seems like that gives it the kick in the head,
这似乎就可以看到笑脸了

935
00:37:20,840 --> 00:37:23,810
literally, that it needs to draw the head, okay?
确实，它需要把脸画出来

936
00:37:23,810 --> 00:37:25,900
So, now we have it.
那么现在我们是有脸的人了

937
00:37:25,900 --> 00:37:27,980
So, we got our two View Controllers here and
所以我们有两个 ViewController 了

938
00:37:27,980 --> 00:37:29,950
we want to put them in a Split View.
我想把它们放进 SplitView 里面

939
00:37:29,950 --> 00:37:33,280
So that this is the master, and this is the detail.
这样做让这个是 master，而这个是 detail

940
00:37:33,290 --> 00:37:34,290
So let's do that.
我们来做这个吧

941
00:37:34,290 --> 00:37:36,050
Super simple, we're gonna go down here.
超级简单，我们只需要滚到这里

942
00:37:36,990 --> 00:37:39,060
Go grab a Split View Controller, okay?
拖一个 SplitViewController 出来

943
00:37:39,060 --> 00:37:40,690
The Split View Controller's right here.
SplitViewController 在这里

944
00:37:40,690 --> 00:37:42,930
See, here's Tab Bar Controller.
看，这个是 TabBarController

945
00:37:42,930 --> 00:37:45,860
Here's Navigation Controller, somewhere.
这个是 Navigation Controller

946
00:37:45,860 --> 00:37:46,900
PageViewController, even.
这个是 PageViewController

947
00:37:46,900 --> 00:37:48,060
We're not gonna talk about that, but
我们不会说这个，但是

948
00:37:48,070 --> 00:37:50,500
that's another way to combine MVCs.
这是另一种组合 MVC 的方法

949
00:37:50,500 --> 00:37:53,200
But let's drag this Split View Controller out.
我们把 SplitViewController 拖出来

950
00:37:53,200 --> 00:37:54,770
Now see how it
现在我们看看怎么把

951
00:37:54,770 --> 00:37:56,340
comes with other stuff that you don't want?
你不想要的它的一切其他东西删掉

952
00:37:56,340 --> 00:37:58,640
So when you drop it in there, literally just
那么当你把它放在这里，简单地选择

953
00:37:58,640 --> 00:38:01,070
select the stuff you don't want and delete it.
你不想要的东西，然后删除

954
00:38:02,080 --> 00:38:04,210
Okay. Don't want any of that stuff.
好吧。不想要

955
00:38:04,210 --> 00:38:05,780
Trying to be helpful.
那些可能有用而我们不想要的东西

956
00:38:05,780 --> 00:38:08,810
And so here's my Split View Controller, okay and
那么这就是我的 Split View Controller 了，

957
00:38:08,820 --> 00:38:10,550
here's my master and detail.
然后这个是 master 和 detail

958
00:38:10,550 --> 00:38:12,750
I'm just gonna control drag.
我只需要 control 加拖动

959
00:38:12,750 --> 00:38:14,320
To set my master.
去设置它为 master

960
00:38:14,320 --> 00:38:16,200
So here's the master.
这就是 master 了

961
00:38:16,200 --> 00:38:18,090
And I'm gonna control drag, to set the detail.
接着我 control 加拖动去设置 detail

962
00:38:20,190 --> 00:38:21,360
Okay. That's it.
好了就这样

963
00:38:21,360 --> 00:38:22,360
So let's run.
让我们运行一下

964
00:38:22,360 --> 00:38:24,330
Let's actually run on an iPad.
让我们在 iPad 上运行一下

965
00:38:24,330 --> 00:38:27,460
See what this looks like.
看看效果怎样

966
00:38:27,470 --> 00:38:33,370
[BLANK AUDIO] Alright, so here's an iPad.
好咧，这是 iPad

967
00:38:33,370 --> 00:38:36,970
Oh, I thought I was gonna get a Split View, with this thing.
噢我想我会在这里得到一个 Split View

968
00:38:36,970 --> 00:38:38,110
How come I don't get a Split View?
但是为什么我没有 Split View 呢

969
00:38:38,110 --> 00:38:42,040
>> [INAUDIBLE] >> What?
什么

970
00:38:42,040 --> 00:38:45,980
>> [INAUDIBLE] >> Yes, exactly.
对哒

971
00:38:45,980 --> 00:38:47,850
Very good job.
机智如你

972
00:38:47,850 --> 00:38:50,450
You should get extra credit or something up there.
我应该给你一些棒棒糖奖励

973
00:38:50,450 --> 00:38:53,950
Yeah, the problem is this UI comes in through this arrow,
是的，问题在于 UI 启动会从这个箭头开始

974
00:38:53,950 --> 00:38:54,850
so it comes to here.
现在它从这里启动

975
00:38:54,860 --> 00:38:56,420
So it's bypassing the Split View.
所以它跳过了这个 Split View

976
00:38:56,420 --> 00:38:57,790
It's not even going.
它甚至没有经过

977
00:38:57,790 --> 00:38:59,360
So it's just a common mistake you'll do,
这是个常见的错误

978
00:38:59,360 --> 00:39:00,770
you'll forget to move this.
你可能会忘记移动这个箭头

979
00:39:00,780 --> 00:39:02,190
And you can just pick this arrow up and
那么你只需要把箭头拖动

980
00:39:02,190 --> 00:39:02,790
move it over here.
移动到这里

981
00:39:04,330 --> 00:39:06,380
Okay.
好的

982
00:39:06,380 --> 00:39:08,430
Now when we run, it's going to come in, via the Split View.
现在当我们运行，UI 将从 Split View 开始

983
00:39:08,430 --> 00:39:09,400
And it is a Split View.
这里确实有 Split View

984
00:39:09,400 --> 00:39:11,000
If I slide out from the left,
如果我从左边划开

985
00:39:11,000 --> 00:39:14,600
there's my master and here's my detail.
这是我的 master，而这是我的 detail

986
00:39:14,600 --> 00:39:17,070
Okay. And if I rotate.
好的，如果我旋转屏幕

987
00:39:17,070 --> 00:39:18,210
Okay. I get the master and detail on
那么我就有 master 和 detail 同时在

988
00:39:18,210 --> 00:39:19,140
the screen at the same time.
同一个屏幕上了

989
00:39:20,940 --> 00:39:23,240
Sound good? Now clicking this doesn't seem
听起来很棒不是么？现在，点击似乎没有

990
00:39:23,250 --> 00:39:24,910
to do anything, okay.
触发什么

991
00:39:24,910 --> 00:39:26,150
So we're gonna have to fix that.
接下来我们需要实现它们

992
00:39:26,150 --> 00:39:28,210
And let's go look at it on an iPhone see what it
让我们看看程序在 iPhone 上跑

993
00:39:28,220 --> 00:39:29,180
looks like there?
是什么样子的

994
00:39:33,320 --> 00:39:38,960
I didn't hit the button sorry Alright, here's my iPhone.
我忘记点运行按钮了抱歉同学们，好的，这是我的 iPhone

995
00:39:38,960 --> 00:39:40,620
Okay?
好吧

996
00:39:40,630 --> 00:39:41,120
Oh.
噢

997
00:39:41,130 --> 00:39:41,660
Wait.
等等

998
00:39:41,660 --> 00:39:43,060
How do I?
怎么办？

999
00:39:43,060 --> 00:39:44,290
I can't see the face.
我看不到笑脸了

1000
00:39:44,300 --> 00:39:45,860
Okay? Let's try landscape.
好吧？试试横着屏幕

1001
00:39:45,860 --> 00:39:47,000
That doesn't work either.
还是不行。

1002
00:39:47,000 --> 00:39:49,400
So there's no way to get at the face, right now.
看来是怎么都看不到笑脸了。

1003
00:39:49,400 --> 00:39:51,470
Absolutely no way to get the face.
貌似完全没办法了，

1004
00:39:51,470 --> 00:39:52,470
And why is that?
这是为什么呢？

1005
00:39:52,470 --> 00:39:54,230
Well that's because again on phone which is
刚才说过了，当设备处于

1006
00:39:54,240 --> 00:39:56,670
a compact size trait device.
横向compact尺寸的时候。

1007
00:39:56,670 --> 00:40:02,310
SplitView doesn't put things side by side, it just doesn't do that, okay.
SplitView 是不会左右平铺开的，

1009
00:40:02,310 --> 00:40:06,150
Now if we do iPhone6 Plus.
如果我们在iPhone6 Plus上

1010
00:40:06,150 --> 00:40:06,910
Try that one.
尝试一下

1011
00:40:11,380 --> 00:40:13,620
It's kind of a hybrid.
iPhone6 plus是一种混合的产品，

1012
00:40:13,620 --> 00:40:15,850
First of all it's such high resolution that even the small
首先来说，它虽然小，但是确有高分辨率的屏幕，

1013
00:40:15,860 --> 00:40:17,620
versions, the smallest I can get it.
是高分辨率设备里最小的。

1014
00:40:17,620 --> 00:40:18,590
But see, in portrait,
看，在竖屏的时候，

1015
00:40:18,590 --> 00:40:20,320
I have the same problem as another iPhone.
遇到了和其它iPhone一样的问题，

1016
00:40:20,330 --> 00:40:22,790
There's just no way for me to get to the face.
看不到笑脸

1017
00:40:22,790 --> 00:40:24,880
Cuz it's no way to,
没办法，

1018
00:40:24,880 --> 00:40:26,960
if I try sliding out from the side, nothing happens.
即使我从左边滑动，也没用。

1019
00:40:26,960 --> 00:40:28,600
Okay? Because in portrait mode,
因为在竖屏模式下，

1020
00:40:28,600 --> 00:40:31,270
the iPhone 6 Plus works like an iPhone.
iPhone6 Plus和其它iPhine没区别。

1021
00:40:31,270 --> 00:40:33,770
But in landscape, on iPhone 6 Plus,
但是在iPhone6 plus的横屏下，

1022
00:40:33,770 --> 00:40:37,940
it's big enough, that it can actually show them both. Okay?
因为足够大，所以两部分就可以完全显示。

1024
00:40:37,940 --> 00:40:39,370
So that's kinda cool.
这个非常酷。

1025
00:40:39,370 --> 00:40:42,680
Alright but it still doesn't work. Okay.
但是这个按钮依然不能用。

1027
00:40:42,680 --> 00:40:44,440
So why does this not work?
为什么没用？

1028
00:40:44,450 --> 00:40:47,710
Well, it doesn't work because we have no segues.
因为我们还没有加入segue。

1029
00:40:47,720 --> 00:40:51,550
We don't describe how to get from one of
还没有告诉程序如何从这个地方跳转到

1030
00:40:51,550 --> 00:40:53,620
these things to another.
另一个地方。

1031
00:40:53,620 --> 00:40:54,950
So let's put some segues in.
现在我们来加入segue。

1032
00:40:54,950 --> 00:40:56,320
What we're gonna do,
在segue之前，

1033
00:40:56,320 --> 00:40:58,620
well, actually before we do the segues,
我们要做的是，

1034
00:40:58,620 --> 00:41:02,590
let's fix this problem with the iPhone not working.
如何修复在iPhone上的这个问题，

1035
00:41:02,590 --> 00:41:05,500
Okay, let's fix the problem where we can't see the iPhone.
修复在iPhone上看不到两个视图的问题，

1036
00:41:05,500 --> 00:41:08,360
In order to fix that, what we talked about in the slides,
我们需要把主视图放到一个

1037
00:41:08,370 --> 00:41:11,730
by putting this guy in a Navigation Controller.Okay.
Navigation Controller里来解决这个问题。

1039
00:41:11,740 --> 00:41:13,030
So let's go do that.
下面开始做，

1040
00:41:13,040 --> 00:41:15,440
We're gonna do that with embed.
进到embed in里边，

1041
00:41:15,440 --> 00:41:17,270
In Navigation Controller.
选Navigation Controller。

1042
00:41:17,270 --> 00:41:19,740
It puts it in a Navigation Controller, okay.
现在主视图在Navigation Controller里，

1043
00:41:19,740 --> 00:41:22,710
Now when we run on the iPhone, we'll just run it in normal
现在我们在普通的iPhone上运行一下，

1044
00:41:22,710 --> 00:41:29,250
iPhone, you'll see that we get the face.
可以正常看到笑脸了。

1045
00:41:29,250 --> 00:41:30,350
Okay? Awesome.
厉害吧。

1046
00:41:30,350 --> 00:41:33,050
And we can go back to the master and
可以正常的回到主视图，

1047
00:41:33,050 --> 00:41:35,990
there's no way to get back to the detail.Okay.
但是没办法回到笑脸了。

1049
00:41:35,990 --> 00:41:37,720
So now we definitely need those segues.
所以现在我们必须要用到segue了。

1050
00:41:37,720 --> 00:41:41,660
We need these buttons to cause a segue to happen to the detail.
所以我们现在需要通过点击这些按钮跳转到笑脸。

1052
00:41:41,660 --> 00:41:45,200
Okay. So that's what we're gonna do next.
我们接下来做这个，

1054
00:41:45,200 --> 00:41:47,430
And actually, let's take a second here and
在这之前，我们先看一下

1055
00:41:47,430 --> 00:41:49,070
show what this looks like on the iPad.
加了Navigation Controller之后，

1056
00:41:50,540 --> 00:41:53,000
We added the Navigation Controller here.
在iPad上看起来是什么样的。

1057
00:41:53,000 --> 00:41:55,170
Let's see what effect it had on the iPad.
看一下在iPad上会有什么影响。

1058
00:41:55,170 --> 00:41:58,940
And the answer is, that the master now has a title.
看，主视图上现在有了一个标题，

1059
00:42:00,380 --> 00:42:02,940
See? Has a title there.
看到没？这有个标题。

1061
00:42:02,950 --> 00:42:04,610
And this kind of would be nice,
在这放一个标题我

1062
00:42:04,610 --> 00:42:06,700
even to put a title in here.
感觉挺好的。

1063
00:42:06,700 --> 00:42:08,780
So we can go over here, and actually double click on here,
现在我们可以双击这，

1064
00:42:08,780 --> 00:42:14,250
and put in psychologist.
然后输入 psychologist 。

1065
00:42:14,260 --> 00:42:16,150
Put a title in there.
设置一个标题。

1066
00:42:16,160 --> 00:42:18,460
Notice, look what happened to our question.
注意看我们刚才设置的问题。

1067
00:42:18,460 --> 00:42:19,720
It kind of got obscured.
被挡住了。

1068
00:42:19,730 --> 00:42:21,690
Do you see that?
看到了吗？

1069
00:42:21,690 --> 00:42:23,130
By this title.
被标题挡住了。

1070
00:42:23,130 --> 00:42:24,530
And actually we have a warning up here.
上边有一个警告，

1071
00:42:24,530 --> 00:42:25,830
Do you see that warning?
看见那个警告了么？

1072
00:42:25,830 --> 00:42:27,130
That warning is about that.
那个警告说的是。。

1073
00:42:27,130 --> 00:42:27,830
Let's click on it.
点一下看看。

1074
00:42:27,830 --> 00:42:31,300
It says, the frame for what you see in your dreams will be different at run time.
它说，这个问题的label的frame在运行时看上去会不一样。

1076
00:42:31,300 --> 00:42:36,470
That's because it's going to automatically move it down underneath this.
因为在运行时它会自动往下挪到标题下边。

1078
00:42:36,470 --> 00:42:39,240
And we can make that happen in our Storyboard by going over
在 Storyboard 上也可以修改好，

1079
00:42:39,240 --> 00:42:42,580
here, clicking here, doing what we always do when we
就像我们平时修复 auto layout的问题一样，

1080
00:42:42,580 --> 00:42:44,580
have a problem with our auto layout,
点这里。

1081
00:42:44,580 --> 00:42:47,310
fix our misplacement and it will move it back down. Okay.
修复一下，它就往下移了。

1083
00:42:49,080 --> 00:42:52,050
Alright so this is looking good.
现在看上去没问题了。

1084
00:42:52,050 --> 00:42:54,590
So let's get this segue business happening.
好了，现在开始加segue了。

1085
00:42:54,590 --> 00:42:57,790
So I told you the segues are done just with control drag. Okay.
前面说过了，segue 也是通过control ＋ 拖拽实现的。

1087
00:42:59,130 --> 00:43:02,590
When we click one of these things I wanna segue to
当点击这些按钮的时候，我希望看到一个脸

1088
00:43:02,600 --> 00:43:05,400
a face that shows the diagnosis based on
作为在梦里见到的东西

1089
00:43:05,400 --> 00:43:06,930
what you saw in your dreams.
的诊断结果。

1090
00:43:06,930 --> 00:43:09,030
So we do this just with Ctrl+drag.
开始 control ＋ 拖拽，

1091
00:43:09,030 --> 00:43:11,900
So let's Ctrl+drag from Golden Bear.
咱们从 Golden Bear 拽到

1092
00:43:11,900 --> 00:43:13,920
Down here.
这里。

1093
00:43:13,920 --> 00:43:15,940
See how it's grabbing on to this MVC down here?
看到下边这个MVC的变化了吗？

1094
00:43:15,940 --> 00:43:17,940
So we'll let go and
松手

1095
00:43:17,940 --> 00:43:19,940
it says what kind of segue do you want.
然后Xcode问我们需要什么类型的segue。

1096
00:43:19,940 --> 00:43:22,610
And we're going to do show detail because we want it to
我们选 show detail，因为我们希望诊断结果显示在

1097
00:43:22,610 --> 00:43:25,380
show it in the detail side of the Split View, and
SplitView的细节视图部分，在Navination Controller里

1098
00:43:25,380 --> 00:43:27,650
in the Navigation Controller it will just push it.
把它推进来。

1099
00:43:27,650 --> 00:43:30,220
But the show detail will do the Split View thing.
虽然实际上它在做SplitView的事情。

1100
00:43:30,220 --> 00:43:31,890
So, there we go and
下边我们

1101
00:43:31,890 --> 00:43:33,550
look what happened there we got this little segue.
看看有了这个segue，会发生什么。

1102
00:43:33,560 --> 00:43:35,290
If we inspect it, over here,
如果我们点击它，在右边

1103
00:43:35,290 --> 00:43:36,690
you can see there is its identifier.
你会看到一个它的 identifier 。

1104
00:43:36,690 --> 00:43:37,760
You can even change what kind of
如果之后有需要，

1105
00:43:37,760 --> 00:43:39,860
segue it is in the future if you wanted.
你还能在这修改segue的类型。

1106
00:43:39,860 --> 00:43:42,560
But this identifier is the Golden Bear one.
这个 identifier 指的是 Golden Bear。

1107
00:43:42,560 --> 00:43:47,430
I'm going to call this the sad identifier, okay.
所以我想让这个 identifier 叫 sad。

1108
00:43:47,430 --> 00:43:49,330
So whenever this goes through,
之后无论何时用到这个segue，

1109
00:43:49,340 --> 00:43:51,970
this identifier for this segue, is called sad.
它的 identifier 就叫 sad。

1110
00:43:51,970 --> 00:43:53,100
And we'll do the same thing here for
下面是 Dancing Tree，是一样的，

1111
00:43:53,110 --> 00:43:57,010
Dancing Tree, okay, show detail again.
还是选 show detail。

1112
00:43:57,010 --> 00:44:00,910
And dancing trees segue, which is right here.
Dancing Tree 的segue在这，

1113
00:44:00,910 --> 00:44:02,780
We're gonna call this one, happy.
我们叫它 happy。

1114
00:44:02,780 --> 00:44:04,000
That's the happy one.
这个就叫happy了。

1115
00:44:04,000 --> 00:44:05,210
Now, I told you these should be verbs so
我之前说过这个名字最好用

1116
00:44:05,220 --> 00:44:07,250
maybe this should be,
动词。

1117
00:44:07,250 --> 00:44:09,280
show happy diagnosis, show sad diagnosis.
比如 ”显示 happy 的诊断“，”显示 sad 的诊断“

1118
00:44:09,290 --> 00:44:11,920
But for demo it's less typing later,
因为这是演示，我们就少打点字儿。

1119
00:44:11,920 --> 00:44:13,150
I'm just putting happy in that.
所以就叫 happy 吧。

1120
00:44:13,160 --> 00:44:14,860
How about buckeye.
Buckeye 呢？

1121
00:44:14,860 --> 00:44:16,490
Okay, we'll say show detail.
还是 show detail。

1122
00:44:16,490 --> 00:44:19,560
And for the buckeye one. Where is that one?
Buckeye的segue 是哪个？

1124
00:44:19,560 --> 00:44:20,730
That's this one I guess.
应该是这个。

1125
00:44:20,730 --> 00:44:24,800
We'll say meh. Okay, not happy or sad.
我们叫它 meh， 既不开心也不难过。

1127
00:44:25,830 --> 00:44:28,300
Okay, and you can move these things around.
你可以随意的拖拽。

1128
00:44:28,300 --> 00:44:30,200
Right, if you're having trouble selecting them or
当你不好选上这些的时候，

1129
00:44:30,200 --> 00:44:33,970
whatever, you can move them around to get at them better.
你能拖拽调整一下

1130
00:44:33,970 --> 00:44:35,420
Okay.

1131
00:44:35,420 --> 00:44:36,870
So this is what our Storyboard looks like now.
现在我们的 Storyboard 看上去是这样的。

1132
00:44:36,880 --> 00:44:40,840
Let's make some more space so you can see it, right here.
腾出点空间看的更清楚。

1133
00:44:40,850 --> 00:44:42,140
And we've got our detail.
这是我们的细节视图。

1134
00:44:42,150 --> 00:44:44,810
Let me whip this up here.
调整一下。

1135
00:44:44,820 --> 00:44:48,050
And we got our master and we've got the segues now.
这是主视图，这是segue。

1136
00:44:48,050 --> 00:44:50,890
So let's go ahead and run, and see if this works.
运行一下看看效果

1137
00:44:50,890 --> 00:44:53,340
Let's go.
走你。

1138
00:44:53,340 --> 00:44:55,790
On iPad, okay, huh, does not appear to work on the i-Pad,
在iPad上运行，啊，貌似在iPad上不行，

1139
00:44:55,790 --> 00:44:57,660
huh, that's interesting.
奇怪。

1140
00:44:57,660 --> 00:44:59,290
Alright, let's try it on the iPhone.
到iPhone上试试。

1141
00:45:10,970 --> 00:45:12,100
All right, so there's iPhone.
iPhone来了。

1142
00:45:12,110 --> 00:45:14,070
So we're at the face, let's go back to the master.
我们先看到笑脸，点回到主视图。

1143
00:45:14,080 --> 00:45:15,690
Here's the master,
主视图。

1144
00:45:15,690 --> 00:45:17,310
notice we have this nice title up here now, Psychologist.
看到我们这有一个标题， Psychologist 。

1145
00:45:17,310 --> 00:45:18,680
Let's do this.
点一下，

1146
00:45:18,680 --> 00:45:20,040
Oh, it's doing something, but,
啊，有变化了，

1147
00:45:20,050 --> 00:45:21,850
it's not actually showing the diagnosis.
但是并没有显示出诊断结果。

1148
00:45:21,850 --> 00:45:25,680
But at least it's segueing to the other one.
但是至少跳转了。

1149
00:45:25,690 --> 00:45:27,400
Okay?

1150
00:45:27,400 --> 00:45:29,120
So the iPad was working too, it's just there was nothing to
所以说在iPad上也是没问题的，因为细节视图已经在

1151
00:45:29,120 --> 00:45:32,090
see, because there was already a detail there and
右边了，所以看不到变化。它只是生成了一个

1152
00:45:32,090 --> 00:45:33,990
it replaced that detail with a new one.
新的细节视图。

1153
00:45:33,990 --> 00:45:37,560
But we didn't prepare that thing, so it doesn't know how
我们没有准备segue，所以它们还不知道笑脸要变化成

1154
00:45:37,560 --> 00:45:39,800
much to smile, it doesn't know how to show the diagnosis,
什么样，不知道如何显示诊断结果，

1155
00:45:39,800 --> 00:45:41,500
cuz we have to prepare it.
我们要准备了它才能知道。

1156
00:45:41,500 --> 00:45:43,570
Okay, so preparing is the next step.
所以，下一步是准备。

1157
00:45:43,570 --> 00:45:47,740
We do the preparation for these segues in this ViewController.
我们需要在这个 View controller里准备这几个segue。

1159
00:45:47,740 --> 00:45:50,470
This is the ViewController that's instigating the segue,
因为跳转是从这开始的，

1160
00:45:50,470 --> 00:45:53,140
so here's where we have to put our preparation.
所以我们要在这做准备。

1161
00:45:53,140 --> 00:45:55,810
This is the PsychologistViewController.
就是这个 PsychologistViewController 。

1162
00:45:55,810 --> 00:45:57,910
Okay, so we're gonna go over here to
所以我们现在到

1163
00:45:57,910 --> 00:46:02,150
our PsychologistViewController code, delete that stuff.
PsychologistViewController 的代码部分，删掉这些东西。

1164
00:46:03,720 --> 00:46:05,150
Okay, here's PsychologistViewController.
好了。

1165
00:46:05,150 --> 00:46:09,990
And all we have to do here is implement that one prepare method, okay.
我们要做的就是在这实现一个准备的方法，

1167
00:46:09,990 --> 00:46:15,090
So it's called prepareForSegue.
这个方法叫 prepareForSegue 。

1168
00:46:15,090 --> 00:46:18,760
'Kay, I'll let it type it out for me by hitting tab.
我可以先打这个字儿然后摁 tab 。

1169
00:46:18,760 --> 00:46:22,260
And you can see there's the two arguments, the segue and the sender.
可以看到这个方法有两个参数，segue 和 sender 。

1171
00:46:22,270 --> 00:46:26,140
Now I'm gonna just say here, if the segue's
这我就可以写，if segue 的

1172
00:46:26,140 --> 00:46:31,040
destinationViewController, sorry, if I can let HVC,
destinationViewController，啊，对不起， if let HVC ，

1173
00:46:31,040 --> 00:46:36,980
HappinessViewController, equal the DestinationViewController
HappinessViewController 等于 segue的 destinationViewController

1174
00:46:36,980 --> 00:46:41,350
as a HappinessViewController, then I'm gonna do
as HappinessViewController ， 然后我们就可以判断

1175
00:46:41,350 --> 00:46:45,290
something based on what the identifier is.
identifier 然后写代码了

1176
00:46:45,290 --> 00:46:47,650
Now, if this segue, if we have a prepareForSegue and we're
在这个方法里，如果我们要跳转的

1177
00:46:47,660 --> 00:46:50,220
segueing to something that's not a HappinessViewController,
目的地不是 HappinessViewController。

1178
00:46:50,220 --> 00:46:51,660
then this if let is not gonna happen.
那么这个if let 就不会发生。

1179
00:46:51,660 --> 00:46:53,960
So none of what I'm gonna type right here is gonna happen,
所以下边我即将要完成的代码就不会运行，

1180
00:46:53,960 --> 00:46:55,390
and that's perfectly fine.
完全没有问题。

1181
00:46:55,400 --> 00:46:58,830
You can kinda do the if let on what kind of
你可以先if let要跳转到什么

1182
00:46:58,830 --> 00:47:00,560
thing you're segueing to, or
对象上，或者 segue 的identifier，

1183
00:47:00,570 --> 00:47:02,500
on the identifier, one on the outside,
一个在外边，一个在里边，

1184
00:47:02,500 --> 00:47:05,800
one on the inside, kind of depends on what's going on.
根据实际情况来。

1185
00:47:05,800 --> 00:47:08,100
But in this case, I'm going to do the if let for
在这里，我要在外边先 if let 我的

1186
00:47:08,110 --> 00:47:10,740
my destinationViewController on the outside, and then I'm
destinationViewController， 然后在里面if let segue的

1187
00:47:10,740 --> 00:47:16,110
going to do the if let on the identifier on the inside.
identifier。

1188
00:47:16,110 --> 00:47:18,250
Okay? So if I had a segue to
如果我有一个跳转到

1189
00:47:18,250 --> 00:47:21,950
a happiness controller that had no identifier set,
HappinessViewController。而且没设置 identifier，


1190
00:47:21,950 --> 00:47:24,120
then we would do nothing.
那就不用做什么了。

1191
00:47:24,120 --> 00:47:25,820
But if it's set, we're going to go in here,
如果设置了，我们就需要一个

1192
00:47:25,820 --> 00:47:27,190
we'll switch on it.
switch

1193
00:47:27,190 --> 00:47:28,720
So let's switch on identifier.
对 identifier 做一个 switch

1194
00:47:30,130 --> 00:47:34,430
If it is the sad identifier, okay,
如果它是 sad

1195
00:47:34,430 --> 00:47:39,400
the sad segue, then let's set our hvc's happiness to 0.
那 HVC 的开心值我们设置成0

1196
00:47:41,770 --> 00:47:46,300
Okay, so here's where I'm preparing, this newly created
所以我在这里准备马上要显示在屏幕上的新

1197
00:47:46,310 --> 00:47:49,040
HappinessViewController to be displayed on screen.
生成的 HappinessViewController

1198
00:47:50,280 --> 00:47:53,010
Okay, and if it's the happy segue,
继续，如果segue是happy

1199
00:47:53,010 --> 00:47:56,710
then we'll set the happiness to 100.
就把开心值设为100.

1200
00:47:56,710 --> 00:48:01,180
And then, actually for anything else, I'm just gonna set the happiness to 50.
其他的情况，开心值是50就好了

1202
00:48:01,180 --> 00:48:03,080
Okay, something in the middle.
中间值

1203
00:48:04,550 --> 00:48:06,950
Okay, so that's it, that's all I have to do here,
好了，这是全部需要做的

1204
00:48:06,960 --> 00:48:09,990
that's all my ViewController needs to be prepared.
这是我的 ViewController 需要准备的所有东西

1205
00:48:09,990 --> 00:48:12,830
You know, if I had other things in here, I could
当然，如果这里有别的东西

1206
00:48:12,830 --> 00:48:16,030
set other properties, but this is all this one needs.
我可以在这里设置其他的属性，但是在这，现在就已经够了

1207
00:48:16,030 --> 00:48:16,930
Okay?
OK?

1208
00:48:16,930 --> 00:48:18,100
So it's prepared.
已经准备好了

1209
00:48:18,100 --> 00:48:19,260
So let's go ahead and run this.
我们来运行一下

1210
00:48:19,270 --> 00:48:20,770
This should all work, right?
应该有效

1211
00:48:20,770 --> 00:48:21,870
It should be no problems.
应该没什么问题了

1212
00:48:22,800 --> 00:48:24,270
Okay. Here's our psychologist.
好，这是 Psychologist

1213
00:48:24,270 --> 00:48:25,570
Let's try dancing tree.
试试 Dancing Tree

1214
00:48:25,570 --> 00:48:26,870
Oh, crashed our program.
崩溃了

1215
00:48:26,870 --> 00:48:30,070
All right, kind of told you I was going to do this.
之前应该说过我会这么做

1216
00:48:30,080 --> 00:48:31,770
Why did our program crash?
为什么崩溃了呢？

1217
00:48:31,780 --> 00:48:33,280
Well it says unexpected,
它说有未知的

1218
00:48:33,280 --> 00:48:35,410
I'm looking in the console down here.
我正在看下边的控制台。

1219
00:48:35,410 --> 00:48:37,450
You should always look in the console when it crashes.
程序崩溃的时候一般都要看这

1220
00:48:37,450 --> 00:48:38,380
Okay? It's the first place you want to look.
这是你最先要看的地方

1222
00:48:40,530 --> 00:48:42,680
This says unexpected found nil while unwrapping an optional.
它说在解包一个可选值的时候意外的发现空值

1223
00:48:42,690 --> 00:48:46,490
Okay, so I accessed some optional that was nil.
说明我使用了一个为空的可选值

1224
00:48:46,490 --> 00:48:47,750
So that's bad.
很糟

1225
00:48:47,760 --> 00:48:49,940
Where did I do that?
在哪发生的呢？

1226
00:48:49,940 --> 00:48:52,130
Right here in updateUI, in HappinessViewController,
就在这，HappinessViewController

1227
00:48:52,130 --> 00:48:53,260
HappinessViewController updateUI.
内部的 updateUI

1228
00:48:53,260 --> 00:48:57,930
Well, let's see, what in this line might be nil?
让我们看一下，这行里什么东西是空值

1229
00:48:57,930 --> 00:48:59,800
Well, of course, it's the only thing that could be nil,
当然，这是唯一有可能为空的

1230
00:48:59,800 --> 00:49:02,170
which is the faceView is nil.
是 faceView

1231
00:49:03,100 --> 00:49:04,500
What is the faceView?
faceView 是什么？

1232
00:49:04,500 --> 00:49:06,040
It's this outlet right here.
它是在这的一个 outlet

1233
00:49:06,040 --> 00:49:09,410
Okay, we can also, by the way, go over here and
另外，我们还能在这边

1234
00:49:09,410 --> 00:49:11,010
find out how we got here.
看看可以发现什么。

1235
00:49:11,010 --> 00:49:12,780
So we got here because someone was setting our
发现了updateUI 在属性观察器里

1236
00:49:12,780 --> 00:49:14,640
model into the property observer,
设置我们的 model

1237
00:49:14,650 --> 00:49:18,850
we wanted to update UI, and we got there from preparation.
我们希望更新 UI，而且我们在这已经准备了

1238
00:49:18,850 --> 00:49:19,910
So here we are preparing,
在这准备好了

1239
00:49:19,920 --> 00:49:22,120
we're trying to prepare this new MVC, and
我们在这准备了新的 MVC

1240
00:49:22,120 --> 00:49:25,650
it sets the model to be something,
设置了我们的 model

1241
00:49:25,660 --> 00:49:29,760
that updates the UI, and we get here and we crash.
然后更新 UI， 然后我们在这就崩溃了

1242
00:49:29,760 --> 00:49:31,690
And why is faceView nil right there?
那么为什么 faceView 在这是空？

1243
00:49:31,690 --> 00:49:34,160
Because as I said in red,
因为前面的 slide 我用红字提醒了

1244
00:49:34,160 --> 00:49:37,200
when you're preparing the outlets have not been set.
当你准备 segue 的时候，outlet 还没有设置

1245
00:49:37,200 --> 00:49:40,330
So this faceView outlet, down here, has not been set.
所以这个 faceView 的 outlet，还没有被设置

1246
00:49:40,330 --> 00:49:43,240
So, you know, it's an implicit unwrapped optional, but
这是一个强制解包的可选值，但是

1247
00:49:43,240 --> 00:49:46,770
it's still an optional, and it has not been set yet.
它依然是一个可选值，只是还没被设置

1248
00:49:46,770 --> 00:49:48,540
Okay, so how are we going to get around this?
那么我们怎么解决这个问题呢？

1249
00:49:48,540 --> 00:49:52,340
Well, luckily in our case, whenever we set, if we set our
幸运的是，每当我们设置 model 的值时

1250
00:49:52,350 --> 00:49:55,150
model and we try to update the UI and the faceView's not
我们就会尝试更新 UI，如果这个时候 faceView 的 outlet 没有

1251
00:49:55,150 --> 00:49:57,810
even connected yet, well, we can just ignore it then,
连接，我们只需要忽略就好了


1252
00:49:57,820 --> 00:50:00,980
because obviously the faceView is up to date because it's
因为很明显 faceView 是实时更新的，即使它在一开始

1253
00:50:00,990 --> 00:50:02,620
not even hooked up.
没有连接

1254
00:50:02,620 --> 00:50:05,350
So we can just use optional chaining here and
所以我们可以使用可选值链条

1255
00:50:05,360 --> 00:50:06,590
just put a question mark there.
在这加一个问号

1256
00:50:07,560 --> 00:50:10,430
Right, and what that says, if this thing is nil,
这个意思就是，如果它是空值

1257
00:50:10,430 --> 00:50:12,290
than just ignore the rest of this statement.
就忽略后边的部分

1258
00:50:12,300 --> 00:50:14,030
Okay.
好的

1259
00:50:14,030 --> 00:50:18,470
So, one thing you'll probably end up doing a lot of times
所以你之后应该经常做的一件事就是

1260
00:50:18,470 --> 00:50:21,600
is, in the things that could be called from a prepare,
如果某个属性在准备的时候被调用

1261
00:50:21,600 --> 00:50:23,770
you might be putting this optional chaining in.
你就需要把它们放到可选链里

1262
00:50:23,770 --> 00:50:26,070
Or checking, if base view does not equal nil,
或者先检查它是否为空

1263
00:50:26,070 --> 00:50:30,010
then do something. Okay?
然后在做其他的

1265
00:50:30,010 --> 00:50:30,840
So that should fix that.
这样应该就解决问题了

1266
00:50:30,840 --> 00:50:33,310
Let's go ahead and run this.
运行一下试试

1267
00:50:33,310 --> 00:50:34,150
Here it is.
出来了

1268
00:50:34,150 --> 00:50:35,050
Let's go back.
先回去

1269
00:50:35,050 --> 00:50:37,450
Dancing tree, very happy.
Dancing Tree，非常开心的笑脸

1270
00:50:37,450 --> 00:50:39,780
Golden bear, very unhappy.
Golden Bear，非常不爽

1271
00:50:39,790 --> 00:50:41,380
Buckeye?
Buckeye？

1272
00:50:41,390 --> 00:50:42,650
Okay.
没问题

1273
00:50:42,650 --> 00:50:43,920
Working fine, let's go take a look, and
都没问题，然我们试试

1274
00:50:43,920 --> 00:50:46,860
let's go look in landscape here.
横屏

1275
00:50:46,860 --> 00:50:48,160
Golden Bear, working fine.
Golden Bear，没问题

1276
00:50:48,160 --> 00:50:53,230
Notice that this MVC underlaps this title bar up here.
注意这个 MVC 在标题栏的下层

1277
00:50:53,230 --> 00:50:57,000
You can actually control that in Storyboard if you inspect
你可以在 Storyboard 里点击这个 MVC

1278
00:50:57,000 --> 00:50:58,630
the MVC, you can click on there,
设置它不要让

1279
00:50:58,630 --> 00:51:02,970
say do not go under thing above me.
任何东西覆盖在它的上面

1280
00:51:02,970 --> 00:51:04,140
Also notice that in landscape,
另外要注意在横屏下

1281
00:51:04,140 --> 00:51:06,340
you get a little smaller title bar up here,
标题栏变的更小了

1282
00:51:06,340 --> 00:51:08,410
which is kind of nice.
这样挺好看的

1283
00:51:08,410 --> 00:51:09,810
Okay
好的

1284
00:51:09,810 --> 00:51:11,340
But back in here, you get the bigger one,
回到横屏，就大了一些

1285
00:51:11,340 --> 00:51:14,650
because you're getting the carrier and the time up here.
因为上面有运营商和时间等等的东西

1286
00:51:14,650 --> 00:51:17,680
Okay, let's go look at it on the iPad.
我们在 iPad 上运行一下看看

1287
00:51:25,420 --> 00:51:28,490
Okay, here's this, I can slide this thing out from the right,
我能把主视图从左边滑出来

1288
00:51:28,490 --> 00:51:31,590
Golden Bear, Dancing Tree, Buckeye, working great.
Golden Bear, Dancing Tree, Buckeye,没问题

1289
00:51:31,600 --> 00:51:33,900
We can go over here.
再看看横屏

1290
00:51:33,900 --> 00:51:37,530
Golden Bear, Dancing Tree, Buckeye.
Golden Bear, Dancing Tree, Buckeye.

1291
00:51:37,530 --> 00:51:40,020
Okay?
有问题吗？

1292
00:51:40,020 --> 00:51:42,500
So pretty straightforward, the stuff is all pretty easy to
非常直观，所有东西在你的

1293
00:51:42,510 --> 00:51:44,340
envisualize in your Storyboard,
Storyboard 是可视的

1294
00:51:44,340 --> 00:51:47,510
when you're looking at the Storyboard it's pretty clear,
当你明白了这些连接的原理以后

1295
00:51:47,510 --> 00:51:51,640
once you understand how these connections happen, to see
看一下 Storyboard 你就会知道

1296
00:51:51,650 --> 00:51:52,680
what's going on over here.
运行的时候大致会发生什么

1297
00:51:53,920 --> 00:51:59,120
Okay, so one other thing I want to do here is make,
好了，下边我要做的是

1298
00:51:59,120 --> 00:52:04,690
let me go back to my simulator.
回到模拟器

1299
00:52:04,690 --> 00:52:06,620
Look at this guy over here.
看这

1300
00:52:06,630 --> 00:52:07,960
This guy doesn't get a title.
这边没有标题

1301
00:52:08,960 --> 00:52:12,400
That's kind of a bummer, that he doesn't get a title right
这有点讨厌，它在那里没有标题

1302
00:52:12,400 --> 00:52:14,260
there and he does on the iPhone.
iPhone 那边有（标题）

1303
00:52:14,270 --> 00:52:16,170
Right, if you remember on the iPhone, he had a title,
如果你记得 iPhone，它有标题

1304
00:52:16,170 --> 00:52:17,370
it was blank, but he had a title.
这里是空，但它有标题

1305
00:52:17,370 --> 00:52:21,200
So I wanna give this guy a title on the iPad as well.
所以我想给这个家伙在 iPad 也有一个标题

1306
00:52:21,210 --> 00:52:24,640
So I'm gonna do that by just selecting it here and
我只要这样做，选择这里

1307
00:52:24,640 --> 00:52:28,310
saying Embed In > Navigation Controller.
选择 Embed In > Navigation Controller

1308
00:52:28,310 --> 00:52:29,380
So I put this guy in
然后我就把这个家伙

1309
00:52:29,380 --> 00:52:30,440
a Navigation Controller too, down here.
放在 Navigation Controller 上了，在这下面

1310
00:52:32,010 --> 00:52:32,880
Okay?
OK?

1311
00:52:32,880 --> 00:52:35,280
So then, I can have a title.
然后，我就有标题

1312
00:52:35,280 --> 00:52:38,020
Now, I could click here to set the title, right here I
现在，我可以点击这里设置标题，就在这里

1313
00:52:38,020 --> 00:52:40,320
could say diagnosis or something like that,
我可以使用 diagnosis 或类似的题目

1314
00:52:40,320 --> 00:52:42,720
but actually I am going to have the title be set in code.
但实际上我要在代码中设置标题

1315
00:52:42,720 --> 00:52:45,990
What I'm going to do is, every time someone says for my model
我将要做的是，每次有人在我的 HappinessViewController

1316
00:52:45,990 --> 00:52:48,890
in my HappinessViewController, when I update the UI,
中访问我的 model，当我更新 UI 时

1317
00:52:48,900 --> 00:52:56,070
I'm going to say my title equals my happiness.
我将设置我的标题等于我的 happiness

1318
00:52:56,070 --> 00:52:57,970
So I'm just gonna put that integer,
所以我只要设置这个数字

1319
00:52:57,970 --> 00:52:59,640
which is my happiness, as my title.
我的 happiness，为我的标题

1320
00:52:59,640 --> 00:53:02,200
So I'm gonna put that in here let's see if that works.
我要把这个放在这里，让我们看看这样是否可行

1321
00:53:04,380 --> 00:53:06,440
So we run, I've got a title.
我们运行下，我有了标题。

1322
00:53:06,440 --> 00:53:07,840
Doesn't look I've got there, but
看起来我没有设置成功

1323
00:53:07,840 --> 00:53:13,780
no one has set my happiness yet, so that makes sense.
但是还没人设置我的 happiness，所以这说的通

1324
00:53:13,780 --> 00:53:14,580
Oh, but it looks like I've
但看起来，这样做我似乎

1325
00:53:14,580 --> 00:53:16,520
broken something by doing that.
破坏了一些东西

1326
00:53:16,520 --> 00:53:17,650
This doesn't work.
这行不通

1327
00:53:17,650 --> 00:53:18,850
Huh.
哈

1328
00:53:18,850 --> 00:53:20,690
Why doesn't this work?
为什么这行不通？

1329
00:53:20,690 --> 00:53:24,920
Well, the reason this doesn't work is because these segues
原因是，这些 segues

1330
00:53:24,930 --> 00:53:28,760
are seguing now to a Navigation Controller.
现在导向 Navigation Controller

1331
00:53:28,760 --> 00:53:31,560
They're not seguing directly to a HappinessViewController.
它们并没有直接导向 HappinessViewController

1332
00:53:31,560 --> 00:53:34,430
So this prepare that we have right here,
所以我们在这里的 prepare

1333
00:53:34,430 --> 00:53:37,170
this very first line is going to not work.
这里的第一行行不通

1334
00:53:37,170 --> 00:53:38,940
Because the destinationViewController is
因为 destinationViewController 不再是

1335
00:53:38,940 --> 00:53:40,340
no longer a HappinessController,
一个 HappinessController

1336
00:53:40,340 --> 00:53:41,670
it's a Navigation Controller.
它是一个 Navigation Controller

1337
00:53:41,670 --> 00:53:44,770
Everyone understand that?
每个人都明白这点吗？

1338
00:53:44,780 --> 00:53:46,080
So how can we deal with that?
所以我们要怎样处理这个？

1339
00:53:46,080 --> 00:53:48,480
Well, that's actually quite easy to deal with.
实际上这很容易处理

1340
00:53:48,480 --> 00:53:52,280
I'm gonna create a variable here called destination, which
我将创建一个叫做 destination 的变量

1341
00:53:52,280 --> 00:53:57,850
I'm gonna set equal to the destinationViewController as
我将这个变量等于 destinationViewController as?

1342
00:53:57,850 --> 00:53:59,790
a UIViewController,
UIViewController

1343
00:53:59,790 --> 00:54:02,720
cuz I know it's a UIViewController of some sort.
我知道它是某类 UIViewController

1344
00:54:02,730 --> 00:54:07,390
And then I'm gonna say, if I can let navCon equal
我将说，if let navCon = destination

1345
00:54:07,400 --> 00:54:12,260
the destination as a UINavigationController,
as? UINavigationController

1346
00:54:12,270 --> 00:54:15,500
okay, then I'm going to set the destination to be the nav
我要让 destination = navCon

1347
00:54:15,500 --> 00:54:18,540
cons, and what I want is the visible ViewController,
我要的是 visibleViewController

1348
00:54:18,540 --> 00:54:20,740
the one on top of the stack.
在 stack 最上面的（Controller）。

1349
00:54:20,740 --> 00:54:23,210
Right?
对吧

1350
00:54:23,210 --> 00:54:25,680
So I'm going to say, .visibleViewController.
所以，我说的是 .visibleViewController

1351
00:54:25,680 --> 00:54:28,010
So visibleViewController is just a property in
因此 visibleViewController 只是

1352
00:54:28,010 --> 00:54:30,250
UINavigationController that returns to the one
UINavigationController 的一个属性，它返回

1353
00:54:30,250 --> 00:54:31,470
that's on top of the stack,
stack 中最上面的（controller）

1354
00:54:31,470 --> 00:54:32,680
which is going to be HappinessViewController,
即 HappinessViewController

1355
00:54:32,680 --> 00:54:34,780
because it's the only one on the stack.
因为它是 stack 中唯一的（controller）

1356
00:54:34,790 --> 00:54:36,300
Okay. And
OK

1357
00:54:36,300 --> 00:54:37,820
then here, instead of saying destinationViewController
这里，不是 destinationViewController

1358
00:54:37,820 --> 00:54:39,490
here, I'll just say destination.
而是 destination

1359
00:54:40,660 --> 00:54:42,760
So now, if we come in here and
现在，如果我们来到这里

1360
00:54:42,760 --> 00:54:44,160
this is the HappinessViewController,
这是 HappinessViewController

1361
00:54:44,160 --> 00:54:46,060
in other words, I don't have the Navigation Controller,
换句话说，我没有 Navigation Controller

1362
00:54:46,060 --> 00:54:47,360
then this is not even going to happen.
那这就不会发生

1363
00:54:47,360 --> 00:54:48,560
And so it's fine.
所以这是可以的

1364
00:54:48,560 --> 00:54:49,600
This will work.
这可行

1365
00:54:49,600 --> 00:54:51,060
Otherwise, if it's a Navigation Controller,
否则，如果它是 Navigation Controller

1366
00:54:51,070 --> 00:54:53,530
I'm going to pull the HappinessViewController out of
我将从中拉出 HappinessViewController

1367
00:54:53,530 --> 00:54:55,670
it, and then this'll work again.
然后这就又可行了

1368
00:54:55,670 --> 00:54:56,700
So it would have worked in either case.
这在其它情况也可行

1369
00:54:56,700 --> 00:54:59,400
So this is nice, in your prepares,
所以这很好，在你的 prepares

1370
00:54:59,410 --> 00:55:02,210
to make it so that if you ever think that the thing you're
这样做，以便你认为你将导向的控制器

1371
00:55:02,210 --> 00:55:04,680
segueing to might be wrapped in a Navigation Controller,
可能包裹在 Navigation Controller 中

1372
00:55:04,680 --> 00:55:06,940
this will make it so it'll work either way.
这会处理之，因此它在任何方式中都可行

1373
00:55:06,950 --> 00:55:08,410
So later, if you decide to unwrap it or
一会，如果你决定解包它或者

1374
00:55:08,410 --> 00:55:09,850
whatever, this'll work.
做其它任何操作，这依然可行

1375
00:55:09,850 --> 00:55:10,750
So let's try this.
让我们试试这个

1376
00:55:13,080 --> 00:55:14,700
All right, so
完全正确

1377
00:55:14,700 --> 00:55:16,320
we've got this Golden Bear, there's the title and
所以我选择这个 Golden Bear，这是标题

1378
00:55:16,320 --> 00:55:20,460
it's working, 100, Buckeye, that's working too.
它可以了，100，Buckeye，这也可以。

1379
00:55:20,460 --> 00:55:21,020
Okay?
OK?

1380
00:55:22,390 --> 00:55:23,020
Make sense there?
有道理吧？

1381
00:55:24,990 --> 00:55:27,890
All right, the last thing I want to show here is
我在这里要讲的最后一件事是

1382
00:55:28,860 --> 00:55:31,860
briefly how to do a segue in code.
在代码中如何处理 segue

1383
00:55:31,870 --> 00:55:34,830
Because this segue we did with control dragging in
因为这个 segue，我们都在 Storyboard

1384
00:55:34,840 --> 00:55:36,800
the Storyboard entirely.
中使用 control 拖拽实现的

1385
00:55:36,800 --> 00:55:39,300
So how would we do a segue in code?
那么我们要怎样在代码处理 segue

1386
00:55:39,310 --> 00:55:41,110
So let's do a different segue here,
让我们弄个不一样的 segue

1387
00:55:41,110 --> 00:55:45,340
I'm gonna add another thing to this.
我要做另一件事

1388
00:55:46,750 --> 00:55:52,350
Let's go down here and add a new button right here.
让我们到下面，在这里添加一个新的 button

1389
00:55:52,350 --> 00:55:54,550
Put it in here, I'm going to call this Nothing.
把它放在这里，我把这个叫做 Nothing

1390
00:55:54,550 --> 00:55:56,180
So what do I see in my dreams?
因此在我的梦中我看到了什么？

1391
00:55:56,190 --> 00:55:56,970
Nothing.
Nothing

1392
00:55:56,970 --> 00:55:57,750
I don't see anything.
我什么也没看到

1393
00:55:57,750 --> 00:55:59,650
Okay and I am going to put that here.
我要把它放在这里

1394
00:55:59,660 --> 00:56:03,220
I'm going to try Reset to Suggested Constraints.
我选择 Reset to Suggested Constraints

1395
00:56:03,230 --> 00:56:04,590
I'm going to check to see what it did.
我要检查看看它做了什么

1396
00:56:04,590 --> 00:56:06,830
That looks perfectly fine to me.
对我来说，它看起来非常好

1397
00:56:06,830 --> 00:56:08,760
I'm rocking!
我很6！

1398
00:56:08,760 --> 00:56:10,700
But instead of control dragging from here to make
但不是在这里用 control 拖拽以创建

1399
00:56:10,700 --> 00:56:13,730
this segue, I'm just going to create a normal target
segue，我将创建一个普通的目标

1400
00:56:13,740 --> 00:56:14,330
action method.
action 方法

1401
00:56:15,270 --> 00:56:17,000
Okay.
好的

1402
00:56:17,000 --> 00:56:18,740
So this is I'm just gonna make this be a completely normal
所以这就是我完全将这个当作普通的

1403
00:56:18,740 --> 00:56:22,410
button that's going to do target action from here.
button，它将从这里做一个目标 action

1404
00:56:22,410 --> 00:56:24,140
Okay, so let's make some space over here in our
让我们在我们的 PsychologistViewController

1405
00:56:24,140 --> 00:56:25,240
PsychologistViewController.
腾出些空间

1406
00:56:25,240 --> 00:56:28,380
I'm gonna Ctrl+drag over to here.
要将 Ctrl+drag 到这里

1407
00:56:28,380 --> 00:56:29,650
Okay, it's gonna be an action.
这将是个 action

1408
00:56:29,650 --> 00:56:33,950
I'm gonna call it the nothing action.
我把这个命名为 nothing action

1409
00:56:33,950 --> 00:56:37,350
I'm gonna have the center be a UI button, and Connect.
我将让中间是一个 UI button，然后连接

1410
00:56:37,360 --> 00:56:39,150
So now every time I click on Nothing,
现在每次我点击 Nothing

1411
00:56:39,160 --> 00:56:42,860
it's going to do this target action right here.
它将执行这里的目标 action

1412
00:56:42,860 --> 00:56:45,890
And what I wanna do inside here is cause a segue
在这个里面我想做的是，产生一个

1413
00:56:45,900 --> 00:56:47,130
to happen.
segue

1414
00:56:47,130 --> 00:56:49,300
Okay?
OK?

1415
00:56:49,300 --> 00:56:51,470
So base this segue in code, so how am I gonna do that?
所以在代码中有这个 segue，这样我要怎么做呢？

1416
00:56:51,470 --> 00:56:56,570
Well, I still have to create the segue in the Storyboard.
我依然要在 Storyboard 中创建 segue

1417
00:56:56,570 --> 00:56:59,210
Okay, so I'm still going to go back here and
所以我还得回到这里

1418
00:56:59,210 --> 00:57:00,870
create the segue, but
然后创建这个 segue

1419
00:57:00,880 --> 00:57:02,540
the question is where do I create the segue from?
但问题是，我从哪里创建这个 segue？

1420
00:57:02,540 --> 00:57:03,710
Where do I drag from?
我从哪里拖拽？

1421
00:57:03,710 --> 00:57:06,550
Since I don't want this to directly cause it,
因为我不想这个直接创建它

1422
00:57:06,550 --> 00:57:08,580
and the answer is, I drag from this little thing up here.
答案是，我从这上面的这个小图标开始拖拽

1423
00:57:08,580 --> 00:57:10,220
Do you see this little yellow guy?
你们看到这个小小的黄色图标吗？

1424
00:57:10,220 --> 00:57:13,250
This yellow thing represents the ViewController.
这个黄色的东西代表这个 ViewController

1425
00:57:13,250 --> 00:57:14,850
So, when you're setting up a segue that's gonna be
当你创建一个 segue 时，

1426
00:57:14,850 --> 00:57:16,150
fired off in code,
它会在代码中生成

1427
00:57:16,160 --> 00:57:19,060
you do the control drag from this little yellow thing.
我从这个黄色的东西开始拖拽

1428
00:57:19,060 --> 00:57:20,890
So, let's go down here.
让我们来到下面这里

1429
00:57:20,890 --> 00:57:23,840
Okay?
OK?

1430
00:57:23,840 --> 00:57:26,800
I'm gonna take this guy and I'm gonna control drag over to
我将带着这个，我要拖拽到

1431
00:57:26,800 --> 00:57:29,060
here, to this Navigation Controller.
这里，到这个 Navigation Controller

1432
00:57:29,070 --> 00:57:31,370
Sorry for the screen resolution there.
我为这个屏幕分辨率感到抱歉

1433
00:57:31,370 --> 00:57:34,070
It's still gonna be a show detail segue.
它依然是个 show detail segue

1434
00:57:34,070 --> 00:57:35,940
I'm going to now zoom out.
现在我要缩小

1435
00:57:38,310 --> 00:57:40,140
Okay, let's find this thing.
让我们找到这个

1436
00:57:40,140 --> 00:57:46,450
It's not that one, it's not that one, it's this one.
它不是那个，不是那个，是这个

1437
00:57:46,450 --> 00:57:48,250
And so notice that when I select this one,
注意了，当我选择这个时

1438
00:57:48,250 --> 00:57:51,150
it's showing the whole View Controller sending this, and
可以看到，整个 View Controller 发送这个

1439
00:57:51,150 --> 00:57:56,050
so we will call this the nothing segue.
我们把这个叫做 nothing segue

1440
00:57:57,060 --> 00:57:59,120
Okay, so now we have this segue named nothing,
现在我们有了这个叫做 nothing 的 segue

1441
00:57:59,130 --> 00:58:02,160
it's not hooked up to any button or anything like that.
它没有和任何 button 关联，或和其他按钮关联

1442
00:58:02,160 --> 00:58:06,330
Okay, but if I go over to my PsychologistViewController,
但如果我来到我的 PsychologistViewController

1443
00:58:06,330 --> 00:58:09,870
now in nothing I can say, let's make this nice and wide,
现在在 nothing 里，让我们把这个变好变宽

1444
00:58:09,870 --> 00:58:15,400
performSegueWithIdentifier the nothing segue.
performSegueWithIdentifier ("nothing",

1445
00:58:15,410 --> 00:58:18,940
And the sender, we could make it be the button or
sender : sender)，我们可以让它为 button 或

1446
00:58:18,940 --> 00:58:21,340
we could make this actually be self, so
实际上我们可以用 self

1447
00:58:21,350 --> 00:58:23,550
that the view control itself could be the sender.
因此 View Controller 本身可以作为 sender

1448
00:58:23,550 --> 00:58:25,280
Or we could make it be nil.
或者我们可以让它为 nil

1449
00:58:25,280 --> 00:58:26,550
Okay?

1450
00:58:26,550 --> 00:58:28,780
But this sender, whatever we put here is just going to get
但这个 sender，当我们有机会 prepare 时，

1451
00:58:28,780 --> 00:58:31,690
passed along when we get a chance to prepare.
我们放在这里的任何东西都将被传递

1452
00:58:31,690 --> 00:58:34,890
Because this segue, even though we are executing it
因为这个 segue，即使我们在代码中

1453
00:58:34,890 --> 00:58:37,420
from code, is still going to get a chance to prepare.
执行它，它依然有机会 prepare

1454
00:58:37,430 --> 00:58:41,190
So if we went down here and said case nothing,
如果我们来到下面这里，case nothing

1455
00:58:41,200 --> 00:58:44,560
maybe the happiness there is not very happy,
那里的 happiness 可能并不高兴

1456
00:58:44,570 --> 00:58:47,830
okay, then you can still prepare down here.
然后你依然可以从下面这里 prepare

1457
00:58:47,840 --> 00:58:49,570
So even though we are doing it in code,
即使我们在代码中做这个

1458
00:58:49,570 --> 00:58:50,640
it's still going to prepare.
它依然会 prepare

1459
00:58:52,140 --> 00:58:53,900
All right, so let's go take a look at that.
让我们看看那个

1460
00:58:55,340 --> 00:58:57,890
Back to our iPad here.
回到我们的 iPad

1461
00:58:57,890 --> 00:59:00,440
So there's happy, sad, and here's nothing.
这里有 happy，sad，这里是 nothing

1462
00:59:00,450 --> 00:59:01,110
'Kay?
OK?

1463
00:59:03,180 --> 00:59:04,480
Make sense?
说的通吧？

1464
00:59:04,480 --> 00:59:05,780
So you can do things from code.
所以你可以在代码中做些事情

1465
00:59:05,780 --> 00:59:07,080
Now why would you ever wanna do it in code?
但为什么你想在代码中处理这个？

1466
00:59:07,080 --> 00:59:10,150
Well, maybe you want to have a button clicked, and then,
你可能想让一个 button 被点击，然后

1467
00:59:10,150 --> 00:59:11,720
depending on the state of something,
根据一些东西的状态

1468
00:59:11,720 --> 00:59:14,590
it'll do one segue versus doing another segue.
它会处理一个 segue 相对另一个 segue

1469
00:59:14,590 --> 00:59:17,320
So you can have a little if then there that performs one
你可以用少些代码，如果要执行两个

1470
00:59:17,330 --> 00:59:18,830
of two different segues.
不同 segue 中的一个

1471
00:59:18,830 --> 00:59:20,160
That's a classic reason you might want to
这是个经典理由，为什么你可能想在

1472
00:59:20,160 --> 00:59:23,360
do segues in code
代码中使用 segue

1473
00:59:23,360 --> 00:59:26,570
versus just control dragging directly from the button.
而不是直接从 button control 拖拽生成

1474
00:59:26,570 --> 00:59:28,720
All right?
有问题吗？

1475
00:59:28,720 --> 00:59:30,870
I believe that's all I wanted to cover today on that, yes.
我相信这是我今天要讲解的有关 （Navigation Controller）所有内容了

1476
00:59:30,870 --> 00:59:35,140
So now we'll go talk about popovers, so
现在让我们谈谈 popovers

1477
00:59:35,140 --> 00:59:38,840
let's go back to our slides here.
让我们回到我们的幻灯片

1478
00:59:42,720 --> 00:59:43,880
All right, popovers.
popovers

1479
00:59:45,150 --> 00:59:50,050
So I don't talk about popovers with the other three, because
我们没有和其他三个一起讲 popovers，因为

1480
00:59:50,050 --> 00:59:51,920
it's a little bit different, a popover's a little different.
它有点不一样，popover 是不一样的

1481
00:59:51,920 --> 00:59:54,860
So here is a UI that has a popover in it.
这是有一个 popover 的 UI

1482
00:59:54,860 --> 00:59:56,690
This is the calendar app.
这是日历 app

1483
00:59:56,690 --> 00:59:59,290
And you can see the popover is that whole area there where
你可以看到 popover，就是我在

1484
00:59:59,300 --> 01:00:01,960
I'm searching in my calendar trying to find something.
在我的日历中搜索一些东西的整个区域

1485
01:00:01,960 --> 01:00:04,580
Okay.
OK

1486
01:00:04,580 --> 01:00:07,200
So that whole popover, that little lighter colored area in
因此整个 popover，在右上角的

1487
01:00:07,200 --> 01:00:10,740
the upper righthand corner, that is all one MVC.
有点颜色的区域，这是个 MVC

1488
01:00:10,740 --> 01:00:15,040
It's the search for appointment MVC, okay?
这个搜索是为了 appointment MVC

1489
01:00:15,040 --> 01:00:18,640
So and it completely fills that popover space.
所以它完全占据了 popover 的空间

1490
01:00:18,650 --> 01:00:21,410
Now, notice that the popover also has kind of
现在，注意 popover 也有类似的

1491
01:00:21,420 --> 01:00:22,380
a little arrow.
小箭头

1492
01:00:22,380 --> 01:00:23,350
You see that tiny little arrow?
你们看到这个小小的箭头了吗？

1493
01:00:23,350 --> 01:00:25,020
It's just like a little white triangle.
它像一个小的白色三角形

1494
01:00:25,020 --> 01:00:27,990
That's pointing to whatever caused this to come up.
它指向让它出现的任何（view）

1495
01:00:27,990 --> 01:00:29,500
So in this case,
所以在这个例子中

1496
01:00:29,510 --> 01:00:31,020
that little thing that looks like a magnifying glass,
这个小东西像个放大镜

1497
01:00:31,020 --> 01:00:33,690
that's what the user must have pressed on in order to
用户必须点击这个

1498
01:00:33,690 --> 01:00:37,290
have this pop-over for searching come up.
然后这个搜索用的 popover 才会出现

1499
01:00:37,300 --> 01:00:39,050
Right?
对吧

1500
01:00:39,050 --> 01:00:40,800
Now notice the rest of the screen here is gray,
注意现在屏幕上的其他地方是灰色的

1501
01:00:40,800 --> 01:00:42,260
except for the keyboard, is gray.
除了键盘，都是灰色的

1502
01:00:42,270 --> 01:00:43,730
See it's kind of grayed out?
像是灰色的在外面？

1503
01:00:43,730 --> 01:00:46,070
And it's also if you tried to click in there,
如果你试图在灰色区域点击

1504
01:00:46,070 --> 01:00:47,640
it wouldn't work.
是行不通的

1505
01:00:47,640 --> 01:00:49,200
Like if you tried to click on the Week button at the top,
如果你试图点击顶部的 Week button

1506
01:00:49,210 --> 01:00:51,670
or the Month button or the Year button it wouldn't work.
或者 Month button，或者 Year button，都不行

1507
01:00:51,680 --> 01:00:56,240
But what it would do is dismiss the popover, okay?
它能做的是让 popover 消失

1508
01:00:56,250 --> 01:00:58,910
So that grey area, so you can see that it's not as
所以灰色区域，你可以看到，没有和

1509
01:00:58,910 --> 01:01:02,580
bad as take over the screen, but it's still the case that I
占据整个屏幕一样糟糕，但依然是这种情况

1510
01:01:02,580 --> 01:01:04,920
can only do what the popover is asking me to do.
我只能做 popover 要我做的事情

1511
01:01:04,920 --> 01:01:07,020
I can't do anything else until I dismiss the popover but
直到我关闭 popover 我才能做其他事情

1512
01:01:07,020 --> 01:01:09,490
it's just really, really easy to see what the rest of
在你把 popover 放在最上面前，很容易看

1513
01:01:09,490 --> 01:01:11,860
what was going on before you brought the popover up,
其他都在做什么

1514
01:01:11,860 --> 01:01:14,860
and it's usually easy to get rid of the popover.
通常地，很容易就可以关闭 popover

1515
01:01:14,860 --> 01:01:16,390
Now, the interesting thing about popover, and
关于 popover 有趣的事情是

1516
01:01:16,400 --> 01:01:17,900
the reason I talk about it differently,
我说它不同的原因是

1517
01:01:17,900 --> 01:01:20,000
is that it's not a UIViewController.
它不是一个 UIViewController

1518
01:01:21,070 --> 01:01:22,800
Okay. Popover is itself,
Popover 就是 popover

1519
01:01:22,800 --> 01:01:24,670
not a UIViewController.
不是一个 UIViewController

1520
01:01:24,670 --> 01:01:26,650
It's brought on
它是通过一个叫做

1521
01:01:26,650 --> 01:01:28,640
screen using what's called a PresentationController.
PresentationController 来出现在屏幕上的

1522
01:01:28,640 --> 01:01:30,810
And I'm not really going to talk about presentation
我不是真的要讲 PresentationController

1523
01:01:30,810 --> 01:01:33,440
controller, just a little bit about the PopoverPresentationController
只是一点有关 PopoverPresentationController 的内容

1524
01:01:33,440 --> 01:01:36,610
but it's the underlying mechanism that all
但是这是所有这些东西基于的

1525
01:01:36,610 --> 01:01:40,050
of this stuff is based on, so popover doesn't really need to
底层机制，因此 popover 并不真的需要

1526
01:01:40,050 --> 01:01:43,320
have a ViewController whose view is this MVC.
一个 ViewController，它的 view 是这个 MVC

1527
01:01:44,290 --> 01:01:46,370
It can do it
它能由

1528
01:01:46,370 --> 01:01:48,460
purely with the presentation controller mechanism.
PresentationController 机制纯粹做到这一点

1529
01:01:48,460 --> 01:01:50,720
So let's talk about the popover then,
让我们谈谈 popover

1530
01:01:50,730 --> 01:01:53,230
and how we make it work, because the interesting of
还有我们是怎样让它工作的，由于强大的 popover 很有趣

1531
01:01:53,230 --> 01:01:56,860
Power Popover that even though it's not its own MVC,
即使它不是自己的 MVC

1532
01:01:56,860 --> 01:02:00,030
it still segues and all that stuff exactly the same.
它依然可以 segue，还有所有和此相关的

1533
01:02:00,030 --> 01:02:02,900
You still Ctrl+drag to some View Controller.
你依然可以 Ctrl＋拖拽到一些 View Controller

1534
01:02:02,900 --> 01:02:04,570
You still get to do prepareForSegue.
你依然可以处理 prepareForSegue.

1535
01:02:04,570 --> 01:02:06,770
It all looks exactly the same because it's still doing
它看起来完全一样，因为它依然可以 segue

1536
01:02:06,770 --> 01:02:08,840
segues even though it's not its own View Controller.
即使它不是自己的 View Controller

1537
01:02:08,840 --> 01:02:11,540
It's still using segues to cause it to appear.
它依然使用 segue，让它出现

1538
01:02:13,280 --> 01:02:17,310
So, things to note when you're preparing for a segue here.
需要注意的是，当你在这为一个 segue 做 prepare 时，

1539
01:02:17,310 --> 01:02:22,950
One is that inside your preparer you
一个是在你的 preparer 中，

1540
01:02:22,950 --> 01:02:26,250
can get ahold of what's called the presentation controller.
你可以获取到 PresentationController.

1541
01:02:26,260 --> 01:02:28,390
And the presentation controller for
这个创建 popover 的 PresentationController

1542
01:02:28,390 --> 01:02:31,960
a popover will tell you things like what's the button that
将告诉你一些事情，比如是哪个 button

1543
01:02:31,960 --> 01:02:34,060
brought this popover up.
带出了这个 popover

1544
01:02:34,060 --> 01:02:37,200
And you can even configure the presentation like I don't want
你甚至可以配置这个 presentation，比如我不想

1545
01:02:37,200 --> 01:02:40,430
this popover to pop up to the left of anything.
让这个 popover 出现在左边

1546
01:02:40,440 --> 01:02:43,000
I always want it on the right side of something.
我想让它总在右边

1547
01:02:43,000 --> 01:02:44,740
So you can even control that.
你甚至可以控制这个

1548
01:02:44,740 --> 01:02:48,310
And very interestingly using the presentation controller's
PresentationController 的 delegate 非常有趣

1549
01:02:48,310 --> 01:02:49,740
delegate, this is the first time we
这是我们在这个课程上第一次

1550
01:02:49,740 --> 01:02:51,940
have talked about a delegate in iOS in this class,
谈论 iOS 中的 delegate

1551
01:02:51,950 --> 01:02:54,450
although we'll gonna talk about it in slides next week.
虽然我们会在下周的 slides 中讲这个

1552
01:02:56,780 --> 01:02:59,280
Using the presentation controller's delegate,
使用 PresentationController 的 delegate

1553
01:02:59,280 --> 01:03:04,050
you can affect how the popover adapts to being on an iPhone.
你可以调整 popover 以在 iPhone 上适配

1554
01:03:04,060 --> 01:03:08,960
So a popover on an iPad pops up like you saw in
popover 在 iPad 上出现，如你们在刚才

1555
01:03:08,960 --> 01:03:10,660
the previous screen there.
的屏幕上看到的

1556
01:03:10,660 --> 01:03:12,260
A little window that pops up.
一个小的窗口出现了

1557
01:03:12,260 --> 01:03:14,500
Well on the iPhone it adapts and
在 iPhone 上它被调整了

1558
01:03:14,500 --> 01:03:17,930
instead does modal, full-screen, okay?
成为了 modal 的全屏模式

1559
01:03:17,930 --> 01:03:22,200
So it doesn't pop up as a little thing on an iPhone.
所以在 iPhone 上它不是以一个小的窗口出现

1560
01:03:22,200 --> 01:03:23,370
And why is that?
为什么这样

1561
01:03:23,370 --> 01:03:24,540
Well, the iPhone's smaller and
好吧，iPhone 比较小

1562
01:03:24,540 --> 01:03:27,670
so if the thing you're popping up is really big,
所以如果你要弹出的 popover 很大

1563
01:03:27,680 --> 01:03:30,110
there might be no way to cram it in there and make it fit.
可能没有办法把它塞进去，让它适合

1564
01:03:31,180 --> 01:03:33,240
But if you present full screen modal,
但如果你展示为全屏的 modal 模式

1565
01:03:33,250 --> 01:03:34,810
it's definitely going to fit.
它肯定适合

1566
01:03:34,810 --> 01:03:37,620
Okay, so it automatically does this.
它自动为你处理了这个

1567
01:03:37,620 --> 01:03:39,680
iOS automatically does this adaptation for you,
iOS 自动为你进行了适配

1568
01:03:39,690 --> 01:03:42,450
just like it automatically adapts to Split View and
就像他自动适配 SplitView 和

1569
01:03:42,450 --> 01:03:45,260
Navigation Controller if you build your Storyboard right
Navigation Controller，如果你在 iPhone

1570
01:03:45,260 --> 01:03:48,730
on iPhone, but using the delegate or the presentation
创建 Storyboard，使用 delegate 或 PresentationController

1571
01:03:48,730 --> 01:03:51,530
control, you can actually affect that adaptation.
你可以调整这个适配

1572
01:03:51,530 --> 01:03:54,130
Okay. So, here is a brief slide.
接下来有几张幻灯片

1573
01:03:54,130 --> 01:03:57,100
We'll have a brief slide that talks about that in a second.
一会我们再来讲这个

1574
01:03:57,100 --> 01:03:59,900
But, first I want to show you how in prepareForSegue you
但首先我想向你们展示如何在 prepareForSegue

1575
01:03:59,900 --> 01:04:02,800
get a hold of that popover presentation controller and
取得 PopoverPresentationController

1576
01:04:02,810 --> 01:04:04,270
you can do something like set this delegate.
并且设置它的 delegate

1577
01:04:04,270 --> 01:04:07,470
So this prepareForSegue all of the green is basically
这个 prepareForSegue，绿色部分和你在

1578
01:04:07,480 --> 01:04:10,480
the same as you would have in any other prepare for segue.
其他任何 prepareForSegue 中做的基本上一样

1579
01:04:10,480 --> 01:04:13,950
But the yellow line there is where I am,
黄色这行，代表我正在

1580
01:04:13,950 --> 01:04:17,220
from the View Controller that I'm segue-ing to,
从 ViewController 中我将 segue 到它那里去

1581
01:04:17,220 --> 01:04:20,520
I'm asking for it's popover presentation controller.
我请求它的 PopoverPresentationController.

1582
01:04:20,520 --> 01:04:22,240
'Kay?
OK?

1583
01:04:22,240 --> 01:04:23,960
So this is an object, the presentation controller,
这是个对象，PresentationController.

1584
01:04:23,960 --> 01:04:26,090
that will only come back non-nil, here,
如果我是通过 popover segue 来的

1585
01:04:26,090 --> 01:04:28,660
if I'm being segued via popover.
它将只能返回非 nil

1586
01:04:28,660 --> 01:04:30,190
If I'm being segued some other way,
如果我是通过其他方式 segue

1587
01:04:30,200 --> 01:04:33,460
like just pushing in a Navigation Controller, or
比如在 Navigation Controller 被 push

1588
01:04:33,470 --> 01:04:35,600
something like that, then this'll come back nil, and
或类似这的其他方式，那么这将返回 nil

1589
01:04:35,600 --> 01:04:37,670
I'm just gonna ignore it, cuz I do if let right there.
我将忽略这个，因为我在那里做 if let 判断

1590
01:04:38,840 --> 01:04:40,840
But if it is popover, then I make it this popover
但如果它是 popover，那么我将让它等于这个

1591
01:04:40,840 --> 01:04:42,200
presentation controller and if you go look in
popoverPresentationController，如果你查看

1592
01:04:42,210 --> 01:04:44,910
the documentation for popover presentation controller,
PopoverPresentationController 的文档

1593
01:04:44,910 --> 01:04:46,810
you'll see it has some things you can configure about
你可以看到，有些东西你可以配置

1594
01:04:46,810 --> 01:04:49,580
the presentation like the permitted arrow directions,
比如允许剪头方向

1595
01:04:49,580 --> 01:04:50,580
that little white triangle.
那个小的白色三角形

1596
01:04:50,580 --> 01:04:52,180
Where is that allowed to point?
允许它指向哪里？

1597
01:04:52,180 --> 01:04:53,350
In what direction?
在哪个方向上？

1598
01:04:53,350 --> 01:04:55,380
And you can also set yourself,
你也可以设置你自己

1599
01:04:55,380 --> 01:04:58,180
the controller, you know you add the controller as
这个 controller，你把 controller 作为

1600
01:04:58,190 --> 01:05:00,120
the delegate of the presentation controller.
PresentationController 的 delegate

1601
01:05:00,120 --> 01:05:02,420
Okay, so
好的 

1602
01:05:02,420 --> 01:05:06,860
when you set yourself as the delegate, what can you do?
当设置自身为 delegate 时，你可以做些什么呢？ 

1603
01:05:06,860 --> 01:05:08,560
What is it going to offer to let you do?
你可以做些什么呢？ 

1604
01:05:08,560 --> 01:05:09,860
Well, there's  number of things, but
事实上，有很多事可做

1605
01:05:09,860 --> 01:05:12,760
I'm gonna talk about this adaptation behavior.
我会讲适配特性

1606
01:05:12,770 --> 01:05:15,270
So here's two methods that are in the protocol for
对于 delegete 可以实现协议中

1607
01:05:15,270 --> 01:05:17,070
the delegate there.
的两个 方法 

1608
01:05:17,070 --> 01:05:19,340
One is called adapter presentation,
一个是

1609
01:05:19,340 --> 01:05:22,210
presentation style for presentation controller.
adaptivePresentationStyleForPresentationController

1610
01:05:22,210 --> 01:05:26,540
Okay, so when the popover is trying to present, it's going
没错，当 popover 将要弹出来的时候

1611
01:05:26,540 --> 01:05:30,810
to ask you, how do you want me to adapt if I'm on an iPhone?
这个方法会问你，我在 iPhone 上要怎样适配呢？ 

1612
01:05:31,980 --> 01:05:35,980
Now by default, this is going to say full screen modal, but
默认会以 modal 方式全屏显示

1613
01:05:35,990 --> 01:05:39,320
you can say you want modal presentation style none
但你可以将展示风格设置为 none 

1614
01:05:39,320 --> 01:05:42,060
which means don't adapt.
表示不需要适配 

1615
01:05:42,060 --> 01:05:44,490
So presented on the iPhone exactly like you do
这样就和 iPad 上的展示方式

1616
01:05:44,490 --> 01:05:46,090
on the iPad.
一样 了 

1617
01:05:46,090 --> 01:05:48,460
Okay, so for
是的

1618
01:05:48,460 --> 01:05:50,830
a small popover, this makes a lot of sense, okay.
对于小的 popover 这并没问题 。

1619
01:05:50,830 --> 01:05:52,460
So this is how you can basically turn off
这是你怎样关闭适配特性 

1620
01:05:52,470 --> 01:05:53,970
that adaptation behavior.
的方法 

1621
01:05:53,970 --> 01:05:55,970
You can even go way more powerful than that,
还有更强大的方法

1622
01:05:55,970 --> 01:05:57,900
the other one here presentationController view,
这里还有一个

1623
01:05:57,900 --> 01:06:00,270
viewControllerForAdaptedPresentationStyle,
presentationController(viewControllerForAdaptedPresentationStyle:) 方法

1624
01:06:00,270 --> 01:06:04,210
you can return a whole other MVC on the iPhone.
用来在 iPhone 上展示一个完整的 MVC

1625
01:06:04,210 --> 01:06:06,580
That displays your MVC in a totally different way
那会以另一种完全不同显示方式

1626
01:06:06,580 --> 01:06:09,110
maybe it's wrapped in a Navigation Controller or
可能被包含在 Navigation Controller 中或 

1627
01:06:09,110 --> 01:06:10,410
it can be completely different.
其他不同的形式 

1628
01:06:10,420 --> 01:06:13,980
So you can really customize it but I just wanted to
你完全可以各种自定义

1629
01:06:13,990 --> 01:06:16,590
show the this first one because it's common to say oh
但我只想展示第一种

1630
01:06:16,590 --> 01:06:18,590
I just have this small little pop over thing.
因为这种展示方式是很常见的

1631
01:06:18,590 --> 01:06:20,460
I want it to look like a pop over on an iPhone and
我想要在 iPhone 上显示像 popover  的 popover

1632
01:06:20,460 --> 01:06:21,320
this is how you do that.
你需要这么做

1633
01:06:22,560 --> 01:06:23,990
Okay.
好的 

1634
01:06:23,990 --> 01:06:28,290
The last thing about popover that's important is the size.
poover 最后一个重要的部分是尺寸

1635
01:06:28,300 --> 01:06:31,000
So you'd really like the popover to come up and
你想要 popover 显示的尺寸 

1636
01:06:31,000 --> 01:06:33,870
be exactly the right size to fit the MVC
正确地适配到 MVC 中 

1637
01:06:33,870 --> 01:06:37,200
because your MVC might be different sizes, okay?
因为你 MVC 可能不同，明白吗？ 

1638
01:06:37,200 --> 01:06:39,940
Even as a given MVC might be different sizes and so
甚至当特定的 MVC 有不同尺寸 

1639
01:06:39,940 --> 01:06:41,940
you really wanna be able to control the size.
而且你希望能控制这个尺寸 

1640
01:06:41,940 --> 01:06:44,410
And in a really object oriented way,
用一种面向对象的方式 

1641
01:06:44,410 --> 01:06:48,110
the way the system does that, is it asks the MVC that is in
也就是系统所用的方式，会询问 MVC

1642
01:06:48,110 --> 01:06:50,880
the popover what is your preferred size?
合适的尺寸是多少？

1643
01:06:50,880 --> 01:06:54,620
What would you like to be if I could grant your wish,
如果我满足你的愿望，让你来指定尺寸

1644
01:06:54,620 --> 01:06:57,320
what would you like to be, okay?
你希望是多少，明白吗？ 

1645
01:06:57,320 --> 01:07:00,320
So it's cuz only that MVC really knows what
所以只有 MVC 才知道 

1646
01:07:00,330 --> 01:07:03,190
its preferred or ideal size might be.
最理想的尺寸 

1647
01:07:03,190 --> 01:07:04,990
Now that's only a recommendation because
不过这只被作为参考建议，因为

1648
01:07:05,000 --> 01:07:07,130
the popover has some constraints as well, right?
popover 自身也有一些约束，明白吗？ 

1649
01:07:07,130 --> 01:07:10,570
Because it can only appear in certain places on screen, and
因为它只能出现在屏幕的特定区域

1650
01:07:10,570 --> 01:07:13,940
the screen is only so big, and those arrows might have to go
而屏幕只有这么大，箭头要指向 

1651
01:07:13,940 --> 01:07:16,970
a certain direction, they might be restricted, so
特定方向，它们或许被 限制了，所以

1652
01:07:16,970 --> 01:07:20,070
the popover has got its own things to deal with.
popover 也要考虑自身的约束

1653
01:07:20,080 --> 01:07:25,080
But it's going to ask the MVC it's putting inside of
但是它会询问其中的 MVC

1654
01:07:25,080 --> 01:07:27,080
itself what would you like to be?
应该怎样展示呢？

1655
01:07:27,080 --> 01:07:30,620
And so this is just a property in your UIViewController.
这只是 UIViewController 的一个属性 

1656
01:07:30,620 --> 01:07:33,650
You can, for example, override this.
你可以重写它 

1657
01:07:33,650 --> 01:07:34,920
Okay. Override the property and
好的，重写这个属性 

1658
01:07:34,920 --> 01:07:36,820
return your preferred size.
并返回合适的尺寸 

1659
01:07:36,820 --> 01:07:38,190
Or you can set.
或者你可以直接设置 

1660
01:07:38,190 --> 01:07:39,220
It's a settable property so
这个属性是可以 set 的

1661
01:07:39,230 --> 01:07:41,230
you can set your preferred size.
所以你可以设置你希望的尺寸 

1662
01:07:41,230 --> 01:07:44,930
If your preferred size is always an exact size just set
如果你的尺寸是固定的 

1663
01:07:44,930 --> 01:07:46,400
your preferred size to that.
直接 set 它就可以了 

1664
01:07:46,400 --> 01:07:48,530
Or, if you have to calculate your preferred size based on
或者，你必须根据 MVC 的内容

1665
01:07:48,530 --> 01:07:50,470
what your content is, which you're going to
计算合适的尺寸

1666
01:07:50,470 --> 01:07:54,100
see in the demo that I'm going to show about popovers
你一会儿将会看到

1667
01:07:54,100 --> 01:07:58,370
in a moment here, than you can override it,
我如何在案例中 

1668
01:07:58,380 --> 01:08:00,370
which is what I did in that demo.
重写属性

1669
01:08:00,380 --> 01:08:03,340
'Kay, so, we're gonna have
好的，我们会 

1670
01:08:03,350 --> 01:08:08,010
a demo here which is adding a popover to psychologists.
在案例的时候为 Psychologists 添加 popover 

1671
01:08:08,020 --> 01:08:09,750
Popovers I
Popover 会

1672
01:08:09,750 --> 01:08:11,480
made them extra credit on your homework assignment.
给你额外的分数

1673
01:08:12,620 --> 01:08:15,350
So you don't have to do them but I recommend doing it cuz
虽然你不需要做这个，但是我还是推荐你做 

1674
01:08:15,360 --> 01:08:17,620
it's a good experience to make a popover.
因为做 popover 的体验很有趣 。

1675
01:08:17,620 --> 01:08:18,920
Okay, it is something.
好的 

1676
01:08:20,190 --> 01:08:22,890
If I had enough kind of room in your assignment to
如果我觉得你的作业还有提升的空间 

1677
01:08:22,900 --> 01:08:25,100
fit popovers, I wouldn't have made it extra credit, but
我不会给你额外的学分，但是 

1678
01:08:25,100 --> 01:08:28,130
I just feel I have only given you one week's worth of work,
由于这只是一周的作业 

1679
01:08:28,130 --> 01:08:29,930
I don't want to over burden you,
我不想你们有太多负担 

1680
01:08:29,930 --> 01:08:31,730
but this is an extra credit you really want to try to do,
但这个额外的分数很值得你尝试， 

1681
01:08:31,740 --> 01:08:33,720
I think, if you can.
如果你可以的话 

1682
01:08:33,720 --> 01:08:35,700
Because in your final project, you're almost certainly going
因为在期末项目上，你很可能会 

1683
01:08:35,710 --> 01:08:39,140
to have some reason, hopefully to put a popover in there.
使用到 popover 

1684
01:08:39,140 --> 01:08:42,140
Okay now before I do the demo let me talk about
在我做 demo 之前我想讲一下 

1685
01:08:42,150 --> 01:08:45,110
what's coming up because I never go back to the slides.
接下来的内容，因为我不会再展示这个 slide

1686
01:08:45,120 --> 01:08:48,150
Friday we are gonna have that Friday section again for
星期五的部分 

1687
01:08:48,150 --> 01:08:51,650
IT & T people sorry it's not gonna be on video.
不会录制课程 

1688
01:08:51,650 --> 01:08:54,060
It's not in a room that we can do the video in really.
因为是在另外一个教室，我们无法录制课程

1689
01:08:54,060 --> 01:08:57,360
So that should be a good one.
那应该是不错的内容

1690
01:08:57,360 --> 01:08:59,490
And that's also an extra credit item in
这也是一个额外的分数

1691
01:08:59,500 --> 01:09:02,300
your homework is to analyze your performance of your
如果你在课后作业中 

1692
01:09:02,300 --> 01:09:05,630
calculator that you're doing, your graphing calculator.
分析你的计算器的性能

1693
01:09:05,630 --> 01:09:07,830
And find out where it's slow and
然后找出是哪里导致程序变慢 

1694
01:09:07,840 --> 01:09:09,170
then maybe you can fix it if you want,
并修复它 

1695
01:09:09,170 --> 01:09:12,300
that's another extra credit to try and go fix it.
这是另外一个你可以尝试的额外的分数

1696
01:09:12,310 --> 01:09:13,810
Next Monday I'm
下周一我会 

1697
01:09:13,810 --> 01:09:15,310
going to dive into the View Controller Lifecycle.
开始讲 ViewController 的生命周期 

1698
01:09:15,310 --> 01:09:18,310
I hate to have had put the View Controller Lifecycle onff
我真的很不想把这个内容推后 

1699
01:09:18,310 --> 01:09:19,710
for so long.
这么晚 

1700
01:09:19,710 --> 01:09:22,950
But in some ways it's kind of nice because it forces you to
不过也有好处，它迫使你

1701
01:09:22,950 --> 01:09:24,850
use other parts of your View Controller,
使用 View Controller 的其他部分 来实现

1702
01:09:24,850 --> 01:09:28,050
like the property observers in your outlets, and
比如 outlet 的 property observer

1703
01:09:28,050 --> 01:09:31,750
in your model setting, and things like that.
就像你设置 model 那样 

1704
01:09:31,760 --> 01:09:33,360
But you're going to find out on Monday, you're
但是在星期一你会发现

1705
01:09:33,360 --> 01:09:35,190
probably going to be mad at me on Monday when I show you
你可能会气愤，当我展示一些  MVC 的

1706
01:09:35,190 --> 01:09:37,490
all these nice methods in the View Controller Lifecycle and
生命周期相关的方法 

1707
01:09:37,490 --> 01:09:39,890
you're, like oh if you'd just told me that last week it
你可能会觉得，如果你上星期告诉我这些方法 

1708
01:09:39,900 --> 01:09:41,730
could have made something so much easier.
可以减轻多少工作量啊 

1709
01:09:41,730 --> 01:09:44,570
But the homeworks are designed to not need any of the view
但是课后作业就是这样设计的 

1710
01:09:44,570 --> 01:09:46,530
controller life cycle methods, you shouldn't need them for
不使用生命周期中的方法，你并不需要他们 

1711
01:09:46,540 --> 01:09:48,300
anything, even for the extra credits, you shouldn't.
即使额外分数中，你也可以不使用他们 

1712
01:09:49,440 --> 01:09:51,870
And then again, I have Auto Layout question mark,
又一次，我为 Autolayout 添加了问号

1713
01:09:51,870 --> 01:09:53,670
kind of a running joke,
只是开个玩笑

1714
01:09:53,670 --> 01:09:55,470
we'll see, hopefully we'll get to Auto Layout eventually in
我们会最终详细讲到 Autolayout 的 

1715
01:09:55,480 --> 01:09:59,110
this quarter, but like I say, see I'm kind of sprinkling it
就像我说的，我在每个 demo 中都会灌输一点点 

1716
01:09:59,110 --> 01:10:01,710
in in every demo, a little bit of Auto Layout, so
Autolayout 的知识， 

1717
01:10:01,720 --> 01:10:04,150
hopefully you're learning a little bit along the way.
希望这一路走来你已经学到了一些

1718
01:10:04,150 --> 01:10:07,190
And then, after Monday, we'll start diving into
然后，星期一之后，我们开始 

1719
01:10:07,190 --> 01:10:10,320
multithreading, because you're talking about a device,
学习多线程，因为你在和设备交互 

1720
01:10:10,320 --> 01:10:13,790
a phone, that needs to be highly responsive to the user.
就是 iPhone，它需要有很高的响应速度 

1721
01:10:13,790 --> 01:10:14,730
Okay? It needs to
明白吗？它需要 

1722
01:10:14,730 --> 01:10:16,460
always be responding to touches.
响应用户的每次点击 

1723
01:10:16,460 --> 01:10:19,900
It cannot, you press a touch and then it freezes for
不能点一下屏幕的时候就卡在那里 

1724
01:10:19,900 --> 01:10:22,630
two seconds or even a second, while it goes off and
几秒钟都

1725
01:10:22,630 --> 01:10:23,920
does something.
没有 反应 

1726
01:10:23,920 --> 01:10:25,200
It needs to immediately animating a response to
它必须立即以动画的方式响应 

1727
01:10:25,200 --> 01:10:26,890
what you're doing.
用户的操作 

1728
01:10:26,890 --> 01:10:28,570
So the only way to make that work if you're doing things
完成耗时操作的唯一方式 

1729
01:10:28,570 --> 01:10:31,740
like accessing the network, which is really slow,
比如网络请求，这非常慢 

1730
01:10:31,740 --> 01:10:34,180
compared to the things you're doing on-screen,
相对于屏幕上的操作来说，

1731
01:10:34,180 --> 01:10:36,840
you need to be able to do those things offline of
你需要将这些耗时操作移到 

1732
01:10:36,850 --> 01:10:40,350
the main thread of execution, so we'll talk about that.
主线程之外执行，我们会讲到的 

1733
01:10:40,350 --> 01:10:42,180
Then we'll start talking about scrolling.
然后我们会讲到 scrolling 

1734
01:10:42,180 --> 01:10:43,720
Because you've got this small screen.
因为屏幕很小 

1735
01:10:43,720 --> 01:10:45,890
It's nice because it fits in your pocket but
虽然这样可以很方便的放在口袋中 

1736
01:10:45,890 --> 01:10:47,390
if you want to show something big,
但是如果你需要展示很大的东西 ，

1737
01:10:47,390 --> 01:10:49,020
you need to be able to scroll around in it.
你需要可以到处拖动它 

1738
01:10:49,020 --> 01:10:50,690
If you want to see a nice image and
如果你想查看高清图片 

1739
01:10:50,690 --> 01:10:52,360
you want to zoom in and see a really detailed part of it,
而且想放大然后查看细节部分

1740
01:10:52,360 --> 01:10:55,130
you have to be able to zoom in and scroll around.
你就必须可以放大并拖动它 

1741
01:10:55,130 --> 01:10:57,700
And then we're going to talk about the next big thing and
然后我们会讲 另一个大板块的知识

1742
01:10:57,700 --> 01:11:00,400
the topic of your next homework after the calculator.
你会在计算器后的下一个作业中用到。

1743
01:11:00,400 --> 01:11:02,770
Which is, I know you love the calculator, but
 我知道你喜欢计算器，但是

1744
01:11:02,770 --> 01:11:05,070
this is your last assignment for the calculator.
 这是你计算器部分的最后一次作业了

1745
01:11:05,070 --> 01:11:07,900
We're going to move on to a whole thing called table view.
然后我们会开始讲 tableview 

1746
01:11:07,910 --> 01:11:12,340
Which is really highly delicate based user interface
它是一个非常精致的用户界面 

1747
01:11:12,340 --> 01:11:15,710
mechanism in iOS that really helps you understand
 它可以帮助你更好地理解

1748
01:11:15,710 --> 01:11:20,150
how iOS works when it comes to sophisticated user interface.
iOS 是如何工作的，当遇到更复杂的界面的时候

1749
01:11:20,150 --> 01:11:22,150
Okay? So that's what we're going to
明白吗？这是我们

1750
01:11:22,150 --> 01:11:22,950
be doing next week.
下周的 内容 

1751
01:11:24,450 --> 01:11:25,050
All right?
没问题吧？ 

1752
01:11:25,050 --> 01:11:25,620
Thank you.
好的 

1753
01:11:27,020 --> 01:11:28,390
Okay. So,
好的 

1754
01:11:28,390 --> 01:11:31,390
let's continue with our psychologist demo, here.
我们继续 Psychologist demo

1755
01:11:31,390 --> 01:11:33,090
We're going to add a popover.
我们会增加一个 popover 

1756
01:11:33,090 --> 01:11:37,400
And the place I'm gonna add a popover is down here, okay?
我会加在这里 

1757
01:11:37,400 --> 01:11:39,330
In this HappinessViewController, here,
在 HappinessViewController 这里 

1758
01:11:39,330 --> 01:11:41,270
I'm gonna put a little button, here.
我会加一个小按钮在这里 

1759
01:11:41,270 --> 01:11:44,270
And this popover is going to show the history of
然后会用 popover 展示

1760
01:11:44,270 --> 01:11:47,240
all the diagnoses made by the psychologist.
Psychologist  所有的 diagnoses 历史 。

1761
01:11:47,240 --> 01:11:50,070
So the psychologist is going to be diagnosing things as we
所以 Psychologist 会记录 

1762
01:11:50,080 --> 01:11:51,970
click on what we see in our dreams, and
 我们的点击历史

1763
01:11:51,980 --> 01:11:54,680
we're going to want a little button here that brings up
我们会用一个小按钮来弹出 

1764
01:11:54,680 --> 01:11:56,010
a popover right here, and
popover，然后 

1765
01:11:56,010 --> 01:11:58,980
this popover is going to show the history of the diagnoses.
这个 popover 会显示 diagnoses 历史 。

1766
01:11:58,980 --> 01:12:02,320
Now since this is a demo, I wanna keep the code simple.
因为只是 demo，我想让代码简单一点 

1767
01:12:02,320 --> 01:12:04,820
It's gonna show the history of the diagnosis just as
我只会显示 

1768
01:12:04,820 --> 01:12:07,450
an Array of ints, because we know that our happiness is
一个整数数组，因为 Happiness 程度用 

1769
01:12:07,460 --> 01:12:08,490
represented in int.
整数来表示 

1770
01:12:08,490 --> 01:12:09,720
So it's gonna be shown in an Array of ints.
所以会以一个整数数组来显示

1771
01:12:09,730 --> 01:12:12,330
It might be nicer to show it in a different way, but
或许有更好的方式，但是 

1772
01:12:12,330 --> 01:12:14,460
we're gonna show it as an Array of ints.
我只显示一个整数数组 

1773
01:12:15,500 --> 01:12:19,730
So let's build this popover segue first and
我们先创建 popover  segue

1774
01:12:19,730 --> 01:12:23,000
then we'll have to go on to build a brand new MVC,
然后建一个全新的 MVC

1775
01:12:23,000 --> 01:12:24,970
actually, to show the information.
来显示信息 

1776
01:12:24,970 --> 01:12:28,570
It's just gonna be a simple MVC that shows text only, so
只是一个显示文本的

1777
01:12:28,570 --> 01:12:29,810
we'll have to do that.
简单 MVC

1778
01:12:29,810 --> 01:12:31,740
And then we're obviously gonna prepare this segue.
然后很显然，我们需要实现 prepareForSegue 方法

1779
01:12:31,740 --> 01:12:36,880
But first let's build the UI portion of this and to do that
我们需要先完成界面部分 

1780
01:12:36,880 --> 01:12:40,550
I need to add a little bar but here is so I'm going to
先添加一个小按钮 

1781
01:12:40,550 --> 01:12:45,990
bring up my object palette here and zoom in on this guy.
打开控件区域然后放大

1782
01:12:47,520 --> 01:12:54,230
And when you put a button here you don't use this UI button.
然后拖一个按钮，但不要用 UIButton

1783
01:12:54,230 --> 01:12:57,960
Okay so UI buttons, even if you drag the UI Button here it
虽然你使用 UIButton 

1784
01:12:57,970 --> 01:12:59,830
will look like it is going to work but
看起来没问题 

1785
01:12:59,830 --> 01:13:03,070
actually don't do that, it will mess you up.
但不要用 UIButton，这会有很多问题

1786
01:13:04,170 --> 01:13:07,440
Instead you want to go down here quite a ways
你需要选择最下面的 

1787
01:13:07,440 --> 01:13:11,980
towards the very bottom and there is this Bar Button Item.
BarButtonItem 

1788
01:13:11,980 --> 01:13:15,480
Bar Button Items is a little lighter weight button that
BarButtonItem 是轻量化的按钮 

1789
01:13:15,480 --> 01:13:19,750
goes in bars like this, navigation bars and tool bars.
在导航栏或工具栏中使用它们

1790
01:13:19,750 --> 01:13:21,920
So I should put that one right there.
我把它放在这里

1791
01:13:21,920 --> 01:13:25,190
We'll call this one history since it's the diagnostic
我会叫它 history 

1792
01:13:25,190 --> 01:13:29,190
history of what's going on with this patient right here.
因为是 diagnostic 的历史

1793
01:13:29,190 --> 01:13:31,530
And of course if we're gonna have a popover,
当然，如果我们使用 popover 

1794
01:13:31,530 --> 01:13:32,990
the popover shows a MVC.
popover 里面包含一个 MVC

1795
01:13:33,000 --> 01:13:34,660
So we need to create a new MVC.
所以我们还需要创建一个新的 MVC

1796
01:13:34,660 --> 01:13:38,300
So let's go back to the top here and get ourselves
所以我们回去创建 

1797
01:13:38,300 --> 01:13:41,070
brand new View Controllers, this is just the regular old
一个新的 View Controller，就是我们 

1798
01:13:41,070 --> 01:13:43,000
View Controller like we've dragged out before, so
通常拖的普通 View Controller

1799
01:13:43,010 --> 01:13:48,270
I'm just gonna drag that right in here, and make some room.
我拖到这里，腾一些空间出来 

1800
01:13:48,280 --> 01:13:50,840
So here we have this, zoom out a little so
缩小一点 

1801
01:13:50,850 --> 01:13:52,480
you can see it a little better, and
这样看起来更好

1802
01:13:52,480 --> 01:13:56,210
what we want is for this little button to segue to this
我们想这个小按钮可以 segue 到这个 

1803
01:13:56,220 --> 01:14:00,350
MVC, and show it in a little popover right here.
控制器，并通过一个小的 Popover 显示在这里 

1804
01:14:00,350 --> 01:14:01,620
Okay? So that's all we
明白吗？这是 

1805
01:14:01,620 --> 01:14:02,690
wanna do there.
所有我们想要的

1806
01:14:02,690 --> 01:14:04,890
So let's just Ctrl+Drag, just like we
我们只要 Control + Drag，就像我们 

1807
01:14:04,890 --> 01:14:06,790
created in the other segue, we're gonna Ctrl+Drag from
创建其他的 segue 一样，直接从 

1808
01:14:06,790 --> 01:14:10,290
the history button over to this MVC, and when we let go
History 按钮链接到这个控制器，然后释放鼠标

1809
01:14:10,300 --> 01:14:13,130
it's gonna say well, what kind of segue do you want?
接下来 Xcode 会询问你，你想要什么类型的 segue？ 

1810
01:14:13,130 --> 01:14:16,170
And we want the propover presentation segue right here.
我们这里需要 popover presentation

1811
01:14:16,170 --> 01:14:18,170
So I'm gonna click that.
所以点这个 

1812
01:14:18,170 --> 01:14:20,450
This is a popover.
这是一个 popover segue。 

1813
01:14:20,450 --> 01:14:22,740
If I click here, on the segue, and go to the attributes
如果我选中这个 segue

1814
01:14:22,740 --> 01:14:25,470
inspector here, you can see that it is a popover segue.
然后查看 Attributes Inspector，你可以看到它是一个 popover 类型的 segue

1815
01:14:25,480 --> 01:14:28,940
I can control where the little arrow, if you remember
如果你回忆起来了之前我们讲 popover 的 Slide

1816
01:14:28,950 --> 01:14:32,010
the slide about the popover, there was a little kind of
这里，我可以控制 popover 箭头的方向

1817
01:14:32,010 --> 01:14:35,280
triangle that was pointing at the thing that brought it up.
也就是那个小三角形，指向触发 popover 的控件 

1818
01:14:35,280 --> 01:14:36,450
Like this History button, or
就像这里的 History 按钮，或者 

1819
01:14:36,450 --> 01:14:39,090
in that slide it was a little search button.
课件里面的搜索按钮

1820
01:14:39,090 --> 01:14:41,290
So I can control which direction that arrow pointed.
这样我可以控制箭头的指向

1821
01:14:41,290 --> 01:14:43,060
And I can even see here the anchor.
我甚至可以看到锚点 （Anchor）

1822
01:14:43,060 --> 01:14:44,990
See it highlighting there.
看这个高亮的地方 

1823
01:14:44,990 --> 01:14:47,690
That is going to bring up this popover.
它代表，这里会弹出一个 popover 

1824
01:14:47,690 --> 01:14:48,560
So that's great.
非常好 

1825
01:14:48,560 --> 01:14:49,830
And of course I need an identifier,
当然，我还需要一个标识符（identifier ）

1826
01:14:49,830 --> 01:14:51,760
just like any other segue, I need an identifier.
就像其他任何 segue 一样

1827
01:14:51,760 --> 01:14:54,930
So, this shows the diagnostic history, so
这个 segue 用来显示诊断的历史 ，

1828
01:14:54,930 --> 01:14:58,370
I'm gonna call this Show Diagnostic History.
我就叫它 Show Diagnostic History 

1829
01:14:58,370 --> 01:15:00,140
Oh, my caps lock.
噢，这里不小心大写锁定了

1830
01:15:00,140 --> 01:15:01,500
There she is, there.
好的

1831
01:15:01,510 --> 01:15:02,770
History, there we go.
History，让我们继续

1832
01:15:02,770 --> 01:15:04,770
Show Diagnostic History.
Show Diagnostic History 

1833
01:15:04,780 --> 01:15:06,570
Okay?
明白吗？ 

1834
01:15:06,580 --> 01:15:09,080
So now we've got this set up to this segue and
现在我们已经设置好了 segue 和 

1835
01:15:09,080 --> 01:15:10,640
show this MVC.
被显示的控制器 

1836
01:15:10,650 --> 01:15:13,250
Now, this MVC is just a blank MVC right now,
虽然现在控制器是空白的 

1837
01:15:13,250 --> 01:15:15,820
but let's go ahead and run and see what this looks like.
但我们先运行看下效果 ，看看这个 popover 是怎么样子的

1838
01:15:15,820 --> 01:15:18,920
So this is going to show a blank MVC at this point.
它应该会在这个点弹出一个空白控制器 

1839
01:15:21,090 --> 01:15:24,020
So here's our iPad right here and we'll.
这是我们的 iPad 模拟器

1840
01:15:24,030 --> 01:15:25,660
Go to Landscape Mode.
切换到横屏模式 

1841
01:15:25,660 --> 01:15:27,790
And so if I click on this,
如果我点击这里 

1842
01:15:27,790 --> 01:15:29,930
you see I get this nice blank MVC appearing right here.
你可以看到，会弹出一个空白的控制器 

1843
01:15:29,930 --> 01:15:34,500
So our next step in this is we need to create this MVC.
所以，下一步，我们需要做的就是创建这个控制器 

1844
01:15:34,500 --> 01:15:35,930
All right, we're going to.
好的，让我们继续

1845
01:15:36,940 --> 01:15:39,470
Create the MVC that is going to go in here.
继续创建一个在这里的控制器 

1846
01:15:39,470 --> 01:15:42,170
It's going to be a very, very simple little MVC.
这会是一个非常简单的控制器 

1847
01:15:42,170 --> 01:15:46,010
It's just going to have a text view in it here to show text.
它只包含一个显示文本的 textView 

1848
01:15:46,010 --> 01:15:48,080
And that's all it's gonna do is show text.
它需要做的只是显示文本 

1849
01:15:48,080 --> 01:15:50,180
It doesn't do anything else.
不需要做其他事情 

1850
01:15:50,180 --> 01:15:51,800
Okay?
明白吗？ 

1851
01:15:51,800 --> 01:15:53,420
So, let's start by creating a new
我们先创建 

1852
01:15:54,520 --> 01:15:56,180
UIViewController subclass.
UIViewController 子类 。

1853
01:15:56,190 --> 01:15:59,850
So again I'm gonna go to iOS source cocoa touch class here
所以我们选择 iOS -> Source -> Cocoa Touch Class

1854
01:15:59,860 --> 01:16:01,620
because I'm gonna create a cocoa touch class, and
因为我需要创建一个 Cocoa Touch Class

1855
01:16:01,620 --> 01:16:03,760
it is gonna be a UIViewController.
它将一个 UIViewController 

1856
01:16:03,760 --> 01:16:06,830
I'm gonna call it TextViewController because that's what
我叫它 TextViewController 

1857
01:16:06,830 --> 01:16:08,260
it does, it shows some text.
因为它负责显示文本 

1858
01:16:08,260 --> 01:16:09,960
That's all this View Controller knows how to do.
这是这个控制器需要做的 

1859
01:16:11,130 --> 01:16:13,900
I'm gonna put it in the same place all the rest of
我把它和剩下所有的 Swift 文件

1860
01:16:13,900 --> 01:16:15,030
my SWF files are.
放 在一起 

1861
01:16:16,140 --> 01:16:17,330
Okay, here it is.
好的，就是这里

1862
01:16:17,340 --> 01:16:18,800
Here's the code for it.
这是它的代码 

1863
01:16:18,800 --> 01:16:21,270
We're gonna delete all of this stuff in here.
我们先删除里面的所有东西 

1864
01:16:22,210 --> 01:16:24,060
Start.
这样

1865
01:16:24,060 --> 01:16:25,910
Right, so we've got a nice subclass of UIViewController.
我们有了一个干净的 UIViewController 子类

1866
01:16:25,910 --> 01:16:28,180
We'll have to put our implementation in here.
我们需要在这里面放置实现的代码

1867
01:16:28,180 --> 01:16:30,010
Meanwhile, let's go back to our Storyboard and
除此之外，我们需要在 Storyboard 中 

1868
01:16:30,010 --> 01:16:33,380
make sure that we set this thing's class in
确保我们设置这个类 为 popover 的类

1869
01:16:33,380 --> 01:16:36,080
the Identity Inspector up here.
在 Identity Inspector 中

1870
01:16:36,090 --> 01:16:38,320
To be the TextViewController, so
设置 Custom Class 为 TextViewController

1871
01:16:38,320 --> 01:16:41,390
that we know this is a TextViewController.
那么这样，Xcode 就知道了这是一个 TextViewController

1872
01:16:41,390 --> 01:16:42,690
Okay?
明白吗？ 

1873
01:16:42,690 --> 01:16:43,990
Now, let's talk about this thing's UI.
我们说说它的用户界面

1874
01:16:43,990 --> 01:16:45,430
It has a very simple UI.
界面会很简单 

1875
01:16:45,430 --> 01:16:50,300
I'm actually gonna drag out a text displaying object here.
我将会拖一个文本控件到这里 

1876
01:16:50,300 --> 01:16:51,700
And I'm not going to use label.
这里我不打算使用 Label

1877
01:16:52,630 --> 01:16:54,400
Label is nice for one and two and
Label 适合于那些一到两 

1878
01:16:54,400 --> 01:16:58,040
maybe three lines of static text.
或者是三行的静态文本

1879
01:16:58,040 --> 01:17:00,100
But I really want something that kind of can show as
但是这里，我需要尽可能多的显示 

1880
01:17:00,110 --> 01:17:01,870
much diagnostic history as I want it.
诊断的历史

1881
01:17:01,870 --> 01:17:04,140
So I want something that shows a lot more text.
所以我需要一个可以显示很多文本的控件

1882
01:17:04,140 --> 01:17:05,740
A text field is
输入框 

1883
01:17:05,740 --> 01:17:07,340
not really appropriate because that's editable.
也不合适，因为它是可编辑的

1884
01:17:07,350 --> 01:17:08,610
One, two, three liner.
而且同样适用于一到三行

1885
01:17:08,610 --> 01:17:10,910
So label and text field are very similar.
所以标签和输入框很相似

1886
01:17:10,920 --> 01:17:12,050
It's just editable or not.
两者区别在于能否编辑 

1887
01:17:12,050 --> 01:17:14,530
But there's yet
但在这两个下面还有一个

1888
01:17:14,530 --> 01:17:17,020
another one down here, called text view, right here.
叫 text view 的控件

1889
01:17:17,020 --> 01:17:19,290
And this displays multiple lines of editable text.
它用来显示多行可编辑的文本

1890
01:17:19,290 --> 01:17:23,860
It lets you set the font, and the text can be selectable.
你可以设置字体，还可以让用户选中其中的文本

1891
01:17:23,860 --> 01:17:25,560
You can copy and paste from it, things like that.
从这些文本中复制粘贴等等操作

1892
01:17:25,560 --> 01:17:27,330
So it's a much more powerful text styler, but
所以它是一个功能非常强大的文本显示空间 

1893
01:17:27,330 --> 01:17:29,100
we'll talk about this later in the quarter.
后期我们会详细讲到

1894
01:17:29,100 --> 01:17:32,330
But for now I'm just going to drag this in right here.
现在，我只需要拖动这个控件到这里

1895
01:17:32,330 --> 01:17:34,730
You noticed I used the blue lines.
这里注意我是使用到了蓝色的辅助线

1896
01:17:34,740 --> 01:17:35,770
I'm going to go up here and
接着我点击这里

1897
01:17:35,770 --> 01:17:37,800
reset to suggested constraints.
选择 Reset to Suggested Constraints 

1898
01:17:37,800 --> 01:17:41,140
I'm going to go over here to the size inspector up here.
然后到 Size Inspector

1899
01:17:41,140 --> 01:17:44,880
And verify that my constraints are the way I want, and
确认所有约束正确 

1900
01:17:44,880 --> 01:17:45,610
they look fine.
它们看上去都没问题

1901
01:17:45,610 --> 01:17:47,410
Okay, so that's good.
还不错

1902
01:17:47,410 --> 01:17:50,450
I could also set some attributes maybe, about this
我也可以设置一下这个 text view 的某些属性

1903
01:17:50,450 --> 01:17:54,180
text view, like I probably don't want it to be editable.
比如，我不想让它可以被编辑

1904
01:17:54,190 --> 01:17:57,050
I don't want the diagnostic history to be actually,
我不希望诊断历史可以被编辑

1905
01:17:57,050 --> 01:17:59,050
you know, touched on and edited.
因为这样的话，用户一点击就开始编辑

1906
01:17:59,060 --> 01:18:00,760
But it's not bad to have it selectable,
不过让它可以被选中是没什么问题的

1907
01:18:00,760 --> 01:18:03,930
someone might wanna select the diagnostic history and
有人可能会想要选中诊断历史

1908
01:18:03,930 --> 01:18:05,630
then copy it and
然后拷贝

1909
01:18:05,630 --> 01:18:07,330
paste it somewhere, or something like that.
把它粘贴到别处

1910
01:18:07,330 --> 01:18:09,530
Or you could set the font to be larger too,
你也可以把字体设置得大些

1911
01:18:09,530 --> 01:18:12,430
maybe something 24 point or something like that.
比如可以设置成24 pt 的字体之类的

1912
01:18:13,370 --> 01:18:15,570
And of course we've got this kind of
在这里还有一些

1913
01:18:17,170 --> 01:18:19,710
pseudo latin placeholder text right here.
占位（placeholder）用的文字

1914
01:18:19,710 --> 01:18:21,270
But that's not gonna matter cuz that's not
不用管它，因为没什么关系

1915
01:18:21,280 --> 01:18:23,040
gonna show because we're going to
因为我们会在准备 segue 的时候

1916
01:18:23,040 --> 01:18:27,880
set the text we want when we prepare for this segue, okay?
设定这些文字，所以这些默认的文字不会显示出来，明白了吗？

1917
01:18:27,880 --> 01:18:30,350
So now let's go ahead and wire up this UI.
现在，我们来把 UI 元素和代码联系起来

1918
01:18:30,350 --> 01:18:32,480
We've got this text view right here.
选中 text view

1919
01:18:32,480 --> 01:18:35,150
Let's Ctrl + Drag to create an outlet to it, okay?
按住 Ctrl 并拖动，创建一个 outlet 的链接

1920
01:18:35,150 --> 01:18:37,750
I'm gonna call that outlet textview.
把这个 outlet 起名为 textView

1921
01:18:37,760 --> 01:18:39,190
So, we've got a nice outlet here.
这样，我们创建好了一个 outlet

1922
01:18:39,190 --> 01:18:41,790
And let's add a model to our TextViewController.
在 TextViewController 中添加一个 model

1923
01:18:41,790 --> 01:18:43,460
My model, I'm going to call it text.
称之为 text

1924
01:18:43,460 --> 01:18:44,860
It's going to be a String.
是一个 String 类型的

1925
01:18:44,860 --> 01:18:46,560
We'll start out as an empty String.
先设置成一个空的 String

1926
01:18:47,560 --> 01:18:48,700
Okay.

1927
01:18:48,700 --> 01:18:51,130
Now every time my model gets set,
每一次我的 model 被设值的时候

1928
01:18:52,170 --> 01:18:56,870
I want to make sure that I update my text views text.
我都要确保 text view 上的文字被更新了

1929
01:18:56,870 --> 01:19:00,410
So text view is this thing that manages text.
所以，text view 就是一个显示 text 内容的东西

1930
01:19:00,410 --> 01:19:03,080
And you can see has an enormous number of things you
你可以看到，text view 能够做很多事情

1931
01:19:03,080 --> 01:19:05,810
can do on it it's a very powerful text object, but
它是一个非常强大的显示文本的控件

1932
01:19:05,810 --> 01:19:07,910
it also has just a simple method called text.
不过它也有一个很简单的属性叫做 text

1933
01:19:07,910 --> 01:19:11,520
Just like UILabel does, and we're gonna set that equal to
就像 UILabel，我们把它

1934
01:19:11,520 --> 01:19:14,020
our text the model's text right.
设置成 model 的 text

1935
01:19:14,020 --> 01:19:16,720
And just to be safe in case this is being called while
为了安全起见

1936
01:19:16,720 --> 01:19:17,990
we're preparing.
防止我们正在准备 segue 的时候，此方法被调用

1937
01:19:17,990 --> 01:19:20,490
Okay, we'll do the same thing with optional chaining in
在这里也使用可选链（optional chaining）

1938
01:19:20,490 --> 01:19:22,760
case our outlet here has not been set.
防止 outlet 在没被设置好的时候，设置了其中的属性而导致程序崩溃

1939
01:19:22,760 --> 01:19:25,790
And similarly when our outlet finally does get
类似的，当 outlet 被设置好以后

1940
01:19:25,800 --> 01:19:31,530
set by the system, we're going to have it, property observer,
我们在它的 property observer 里

1941
01:19:31,540 --> 01:19:35,000
say text view dot text equals text.
设置 textView.text = text

1942
01:19:36,110 --> 01:19:37,600
Okay. And here we don't have to do
这里我们不需要加问号

1943
01:19:37,610 --> 01:19:40,340
the question mark because where actually the text view
因为这里 textview

1944
01:19:40,340 --> 01:19:41,840
is being set by the system, so
在 didSet 被调用的时候

1945
01:19:41,840 --> 01:19:44,340
we know it's set by the time this didSet happens.
已经被系统设置完毕了，它不可能是 nil 了

1946
01:19:44,350 --> 01:19:46,080
Okay, so this is a very,
这就是一个我们将要使用的

1947
01:19:46,080 --> 01:19:49,350
very simple MVC that we're using right here.
非常简单的 MVC

1948
01:19:50,580 --> 01:19:55,920
And it should have no
它用于显示诊断历史

1949
01:19:55,920 --> 01:20:02,330
problem displaying our little diagnostic history, there.
应该没什么问题了吧？

1950
01:20:02,330 --> 01:20:04,540
Okay?

1951
01:20:04,550 --> 01:20:06,760
So now it's time to prepare this segue.
现在是时候准备这个 segue 了

1952
01:20:06,770 --> 01:20:08,460
All right? We want to
我们想要

1953
01:20:08,470 --> 01:20:11,230
prepare this segue so that you click on history,
为这个 segue 做些准备，当我们点击 History 的时候

1954
01:20:11,240 --> 01:20:13,740
it shows the diagnostic history here now.
这个 MVC 就会展示出诊断的记录

1955
01:20:13,740 --> 01:20:16,810
We might, we know that this instigator right here is
我们知道这里的

1956
01:20:16,810 --> 01:20:19,070
inside this HappinessViewController.
HappinessViewController 是 segue 的发起者

1957
01:20:19,080 --> 01:20:22,310
So we might think that we should go to our
所以我们也许会想

1958
01:20:22,310 --> 01:20:25,480
HappinessViewController right here and add the prepare in here.
把 segue 准备的代码放到这里

1959
01:20:26,450 --> 01:20:28,350
Okay. And we could do that but
我们完全可以这样做

1960
01:20:28,350 --> 01:20:29,920
remember that HappinessViewController is
但是，还记得吗？ HappinessViewController 是我们从

1961
01:20:29,920 --> 01:20:32,180
something we dragged in from another app.
另一个 App 拽进来的

1962
01:20:32,190 --> 01:20:35,220
And maybe that's another app that's being worked on at
也许是我们公司正在开发的另一个 App

1963
01:20:35,220 --> 01:20:37,990
our company or that there's another programer who
或是其他程序员

1964
01:20:37,990 --> 01:20:39,620
owns this particular class.
管理这个 HappinessViewController 的类

1965
01:20:39,630 --> 01:20:41,110
And he said no, no,
他不想让其他人添加代码

1966
01:20:41,110 --> 01:20:42,590
you can't add prepareForSegue to this class.
他说：“你不能在这个类里添加 prepareForSegue”

1967
01:20:42,600 --> 01:20:45,230
It's a generic happiness showing thing.
它只是一个通用的展示笑脸的东西

1968
01:20:45,230 --> 01:20:46,960
It doesn't know anything about diagnostic history.
它（应该）对于诊断历史一无所知

1969
01:20:46,970 --> 01:20:51,770
And they'd probably be right because if we started
他这么说是对的，因为，如果我们想把诊断历史相关的东西

1970
01:20:51,770 --> 01:20:54,400
adding things about diagnostic history to a happiness view
放进 HappinessViewController 里

1971
01:20:54,410 --> 01:20:57,340
controller, it would be kind of a diagnostic or
它就会更像一个

1972
01:20:57,340 --> 01:21:00,340
DiagnosedHappinessViewController not
DiagnosedHappinessViewController

1973
01:21:00,340 --> 01:21:02,610
a HappinessViewController anymore.
而不是一个 HappinessViewController

1974
01:21:02,610 --> 01:21:04,750
So where are we going to put our prepareForSegue then?
所以，我们应该把 prepareForSegue 放在哪里呢？

1975
01:21:04,750 --> 01:21:06,850
The answer is that we are going to
答案是

1976
01:21:06,850 --> 01:21:08,450
actually create a subclass of
我们会创建一个 HappinessViewController 的子类

1977
01:21:08,450 --> 01:21:11,450
HappinessViewController that we can use that's going to get
然后我们就会继承所有

1978
01:21:11,450 --> 01:21:14,420
all the behavior of HappinessViewController.
HappinessViewController 中的属性和方法

1979
01:21:14,420 --> 01:21:17,060
Plus, we're going to add the ability to do
除此之外，我们还会往这个子类中

1980
01:21:17,060 --> 01:21:18,160
the diagnostic history.
添加显示诊断历史的功能

1981
01:21:18,160 --> 01:21:19,430
Okay. So we're going to
我们开始

1982
01:21:19,430 --> 01:21:20,560
create a subclass.
首先，我们创建一个子类

1983
01:21:20,560 --> 01:21:22,660
We're just going to go up here.
先点击这里

1984
01:21:22,660 --> 01:21:24,600
New file.
New File

1985
01:21:24,600 --> 01:21:26,530
Again, I'm just going to create a Swift file this time.
这次我们创建一个 Swift 文件

1986
01:21:26,530 --> 01:21:32,700
I'm going to call it DiagnosedHappinessViewController.
把它起名为 DiagnosedHappinessViewController

1987
01:21:32,710 --> 01:21:35,770
Okay, because it's just like a happiness controller, but
它和 happiness controller 类似

1988
01:21:35,770 --> 01:21:39,080
it's diagnosed happiness.
但是它是 diagnosed happiness

1989
01:21:39,080 --> 01:21:41,090
Here it is right here.
创建完毕

1990
01:21:41,100 --> 01:21:43,110
I'm gonna import UIKit because it's a UI class.
我要在文件开头导入 UIKit，因为它是一个 UI 相关的类

1991
01:21:43,110 --> 01:21:47,250
And I'm just gonna say that my class
接着，我让 DiagnosedHappinessViewController

1992
01:21:47,250 --> 01:21:52,220
DiagnosedHappinessViewController inherits from
继承自

1993
01:21:52,220 --> 01:21:53,920
HappinessViewController, okay?
HappinessViewController

1994
01:21:54,920 --> 01:21:56,820
So I am going to be
那么现在

1995
01:21:56,830 --> 01:21:58,730
a sub class that DiagnosedHappinessViewController.
我有一个叫 DiagnosedHappinessViewController 的子类了

1996
01:21:58,730 --> 01:22:01,360
Make sense?
我这么说，明白吗？

1997
01:22:01,360 --> 01:22:04,230
Now, over here in my Storyboard,
回到 Storyboard 中

1998
01:22:04,230 --> 01:22:07,770
I am going to select this scene right here.
选择这个的场景

1999
01:22:07,770 --> 01:22:10,400
And I'm going to go to the Identity Inspector, and
打开 Identity Inspector

2000
01:22:10,410 --> 01:22:12,240
I am going to say that this scene is no
这个场景的类，不再是

2001
01:22:12,240 --> 01:22:14,210
longer a HappinessViewController.
HappinessViewController

2002
01:22:14,210 --> 01:22:18,510
It is a DiagnosedHappinessViewController.
而是 DiagnosedHappinessViewController

2003
01:22:18,510 --> 01:22:20,010
So now I'm this guy here.
现在笑脸的类已经改变了

2004
01:22:20,010 --> 01:22:23,550
Now, all my outlets that were set up will
我之前设置好的那些 outlet

2005
01:22:23,550 --> 01:22:24,820
work absolutely just fine.
不会出现任何的问题

2006
01:22:25,750 --> 01:22:27,320
Okay? Because I'm gonna inherit all
因为它是子类

2007
01:22:27,320 --> 01:22:30,490
the capability of HappinessViewController in my
继承了父类的

2008
01:22:30,490 --> 01:22:32,690
DiagnosedHappinessViewController subclass.
所有东西

2009
01:22:32,690 --> 01:22:35,220
In fact, what's really cool is I have a scene right here.
更酷的事情是

2010
01:22:35,230 --> 01:22:39,530
And this scene is a DiagnosedHappinessViewController.
这个 DiagnosedHappinessViewController 的场景

2011
01:22:39,530 --> 01:22:45,330
But if I go up here to pick a different class.
我在 Assistant View 里选择一个不同的类

2012
01:22:45,330 --> 01:22:46,820
If I go back and
如果我选择

2013
01:22:46,820 --> 01:22:48,300
pick my HappinessViewController, and I see it here.
选择 HappinessViewController，这里我看到它显示出来了

2014
01:22:48,300 --> 01:22:51,500
You can see that it'll show me that that's hooked up.
你可以看到，outlet 依旧是链接起来的

2015
01:22:51,510 --> 01:22:53,510
Okay, cuz it knows that this is inherited,
因为它知道其中的继承关系

2016
01:22:53,510 --> 01:22:54,670
this outlet is inherited.
outlet 也被继承了

2017
01:22:54,680 --> 01:22:56,540
And so it's hooked up.
所以一切都链接好了

2018
01:22:56,540 --> 01:22:59,880
So I can still go back and show my
所以当你继承了某个类的时候，如果你担心 outlet 的链接的话

2019
01:22:59,880 --> 01:23:03,150
superclasses for my DiagnosedHappinessViewController to
你可以返回这个子类的父类

2020
01:23:03,150 --> 01:23:05,580
HappinessViewController, and see the outlets.
来检查这些 outlet 的链接

2021
01:23:07,390 --> 01:23:09,120
Okay? So this is an important thing.
所以这是一个很重要的事情

2022
01:23:09,120 --> 01:23:11,250
Polymorphism of controllers, here.
这里你看到的是，控制器的多态性

2023
01:23:11,260 --> 01:23:13,760
You often might have a reusable controller.
你通常会有一个可重用的控制器

2024
01:23:13,760 --> 01:23:15,160
And you wanna add something to it for
也许你想要在某个 Stroryboard 中

2025
01:23:15,160 --> 01:23:16,960
a particular Storyboard or
为其添加特定的功能

2026
01:23:16,960 --> 01:23:18,590
a particular use in the Storyboard.
或作为一个特殊的用途

2027
01:23:18,600 --> 01:23:21,730
Then you can just create a little subclass of it and
这样，你就可以创建一个它的子类

2028
01:23:21,730 --> 01:23:23,930
put your prepare.
在子类中实现 prepareForSegue

2029
01:23:23,930 --> 01:23:26,130
So what we're gonna do is put our prepare right in here.
所以我们要在这里实现 prepareForSegue

2030
01:23:27,270 --> 01:23:28,140
Okay?

2031
01:23:28,140 --> 01:23:30,090
So this
首先，这个

2032
01:23:30,090 --> 01:23:32,040
DiagnosedHappinessViewController, first of all it's
DiagnosedHappinessViewController

2033
01:23:32,040 --> 01:23:35,310
going to have to keep track of the diagnosed happinesses.
负责追踪诊断记录

2034
01:23:35,310 --> 01:23:38,510
Okay. So we're gonna add a new var
所以我们要给子类添加一个新的变量

2035
01:23:38,510 --> 01:23:43,080
to this subclass called diagnosed happiness.
叫做 diagnosedHappiness

2036
01:23:43,080 --> 01:23:46,990
Or diagnosticHistory, let's call it.
或者叫做 diagnosticHistory

2037
01:23:46,990 --> 01:23:49,450
Okay it's the diagnostic history of this thing,
它就是这个东西的诊断历史

2038
01:23:49,460 --> 01:23:52,690
and we're just gonna keep it as an Array of Ints.
用它来存储一个 Int 数组

2039
01:23:52,690 --> 01:23:54,660
So we've got our nice diagnostic history right
现在我们有了一个 diagnosticHistory 变量

2040
01:23:54,660 --> 01:24:00,400
there, and now let's go ahead and let's do this.
接着，让我们

2041
01:24:00,400 --> 01:24:04,530
Let's go here and here and
让我们关闭侧边栏

2042
01:24:05,500 --> 01:24:07,800
here to give ourselves some room.
留出一些空间

2043
01:24:07,810 --> 01:24:09,970
And let's override.
让我们开始重写

2044
01:24:09,970 --> 01:24:14,080
Actually, we don't even have to type the override here
其实我们不必在这里输入 override

2045
01:24:14,080 --> 01:24:17,310
because we start typing prepareForSegue end tab.
因为在输入 prepareForSegue 的时候，按一下 Tab 键

2046
01:24:17,310 --> 01:24:18,450
It's going to automatically put
它就会自动

2047
01:24:18,450 --> 01:24:20,850
the override func in there for us, which is nice.
出现 override func

2048
01:24:20,850 --> 01:24:23,780
We don't have to be typing this unnecessarily.
我们就不需要键入这些不必要的东西了

2049
01:24:23,790 --> 01:24:25,250
So here's our prepareForSegue.
这就是我们的 prepareForSegue

2050
01:24:25,250 --> 01:24:28,490
And so all we're going to be doing in this prepareForSegue
我们在这个函数里需要做的就是

2051
01:24:28,490 --> 01:24:31,960
is prepare our TextViewController, all right?
为 TextViewController 做好准备

2052
01:24:31,960 --> 01:24:34,360
Because our TextViewController, here,
因为 TextViewController

2053
01:24:34,360 --> 01:24:37,100
is what we're seguing to.
是我们将要跳转的

2054
01:24:37,100 --> 01:24:38,900
So we're preparing this segue right here.
所以我们在这里做好准备

2055
01:24:38,900 --> 01:24:40,530
So we wanna prepare this MVC,
我们想要准备这个 MVC

2056
01:24:40,530 --> 01:24:43,000
which is a TextViewController, okay?
也就是一个 TextViewController

2057
01:24:43,000 --> 01:24:44,630
So let's prepare that.
所以我们开始实现准备的代码

2058
01:24:44,640 --> 01:24:49,510
And let's, first of all, make sure that this is
首先，我们要确保

2059
01:24:49,510 --> 01:24:51,940
the segue we're talking about, here.
这是我们的想要的那个 segue

2060
01:24:51,940 --> 01:24:55,340
So let's go right here, check our identifiers,
到这里检查一下 identifier

2061
01:24:55,350 --> 01:24:57,710
get our identifier out of there.
获取一下 identifier

2062
01:24:57,720 --> 01:24:59,310
Let's switch on our identifier.
在这里 switch identifier

2063
01:24:59,320 --> 01:25:04,590
Currently, we only support this one case.
目前我们只有这一种 case

2064
01:25:04,590 --> 01:25:06,620
I'm also going to put this case,
所以我会把它放在这里

2065
01:25:06,620 --> 01:25:08,650
this is something you should probably always do,
在这里有一个需要你们注意的地方，通常你们应该也会这么做的

2066
01:25:08,660 --> 01:25:11,990
which is to put the segue identifier here into some
就是，把 segue 的 identifier

2067
01:25:11,990 --> 01:25:15,200
sort of constants struct.
放进某个结构体中，作为一个常亮

2068
01:25:15,200 --> 01:25:17,260
I'm gonna call this my history struct.
我把这个结构体命名为 History

2069
01:25:17,270 --> 01:25:21,630
I'm going to have, and let me make sure this is private.
我要把它设置为 private

2070
01:25:21,640 --> 01:25:25,770
Oops. Let's type
打错了

2071
01:25:25,770 --> 01:25:27,240
this correctly here, private.
更正一下，private

2072
01:25:27,240 --> 01:25:29,540
All right.
好的

2073
01:25:29,540 --> 01:25:32,280
Yes.

2074
01:25:32,280 --> 01:25:35,010
I'm going to have this be static let
接着我会创建一个静态常量

2075
01:25:35,010 --> 01:25:39,450
Segue equal that Show Diagnostic History.
static let Segue = "Show Diagnostic History"

2076
01:25:39,450 --> 01:25:42,150
So this would be a segue identifier.
它现在就是一个 segue identifier 了

2077
01:25:42,150 --> 01:25:46,320
Maybe we'd even want to call this identifier,
也许，我更想称之为

2078
01:25:46,320 --> 01:25:48,120
segue identifier.
SegueIdentifier

2079
01:25:48,130 --> 01:25:52,190
All right.

2080
01:25:52,200 --> 01:25:55,230
All right, so putting this in here it just, you know,
这个结构体的作用

2081
01:25:55,230 --> 01:25:57,900
collects all your constant Strings together.
就是存放所有的常量 String

2082
01:25:57,900 --> 01:25:59,970
And if you ever change something in your Storyboard.
如果你想改变 Storyboard 里的东西，你也得对这个进行一个修改

2083
01:25:59,970 --> 01:26:02,670
Some people might even call this struct Storyboard, so
有人可能希望给这个结构体起名为 Storyboard

2084
01:26:02,670 --> 01:26:06,110
that every String that's in your Storyboard that has to
也就是，在 Storyboard 里出现的每一个字符串

2085
01:26:06,110 --> 01:26:08,540
match up here in their code, is in one struct.
都要和代码中的这个结构体连接起来

2086
01:26:08,540 --> 01:26:11,540
We'll call this one History right here.
对这个结构体起名是有争议的

2087
01:26:11,550 --> 01:26:13,210
It's kind of debatable which way to go there.
但这里，我们久称之为 History

2088
01:26:14,410 --> 01:26:16,500
So what do
所以

2089
01:26:16,500 --> 01:26:18,580
we want to do when that history identifier happens?
在 History.SegueIdentifier 的这种情况下，我们需要做什么

2090
01:26:18,590 --> 01:26:23,450
Well, if we can get our segue's destinationViewController
们能够获取到 segue 的 destinationViewController

2091
01:26:23,460 --> 01:26:26,590
as a TextViewController,
并将其类型转换成 TextViewController

2092
01:26:26,590 --> 01:26:30,760
that's the only thing we need to segue to with this segue.
这是这个 segue 跳转到的唯一的那个控制器

2093
01:26:30,760 --> 01:26:33,730
Then we're just going to set the tvc's text equal to
然后我们输入 tvc.text = diagnosticHistory

2094
01:26:33,730 --> 01:26:35,100
our diagnosticHistory,

2095
01:26:35,100 --> 01:26:37,630
which I'm going to do by diagnosticHistory.
这就是我希望对 diagnosticHistory 做的事情

2096
01:26:37,630 --> 01:26:39,830
So, it's just going to show this Array,
所以，这里它就显示出这个数组的内容了

2097
01:26:39,840 --> 01:26:42,300
this diagnostic history Array, as a String.
把 diagnosticHistory 这个数组作为一个字符串显示出来

2098
01:26:42,310 --> 01:26:42,940
All right.

2099
01:26:45,640 --> 01:26:48,680
And of course we'll need the default.
当然，我们需要考虑 default 情况

2100
01:26:48,680 --> 01:26:50,240
Break out of here.
这里输入简单的 break 就可以了

2101
01:26:51,310 --> 01:26:52,480
Okay? So there we
现在

2102
01:26:52,480 --> 01:26:54,310
have this nice diagnostic history.
我们已经有了诊断历史

2103
01:26:54,320 --> 01:26:57,220
So let's go ahead and run this and see if this is working.
运行一下程序，看看起没起作用

2104
01:27:01,390 --> 01:27:03,190
All right, so again we click here.
点击这里

2105
01:27:03,190 --> 01:27:04,690
And, well, it seems to be working,
看来是起作用了

2106
01:27:04,690 --> 01:27:06,560
cuz it's showing no diagnostic history.
它没有显示诊断记录

2107
01:27:06,560 --> 01:27:08,960
I haven't clicked any of these.
我还没有点击这些按钮

2108
01:27:08,960 --> 01:27:10,390
So, since we added this code,
我们已经添加了这部分代码

2109
01:27:10,400 --> 01:27:13,630
anyway, I haven't gotten any diagnosis, so that's good.
我也还没有做任何诊断，还不错

2110
01:27:13,630 --> 01:27:14,660
So let's dismiss that.
先把它隐藏起来

2111
01:27:14,670 --> 01:27:17,730
And here, I'm gonna go there, go there.
到处点一点

2112
01:27:17,740 --> 01:27:19,100
Oh, it's not working.
它不起作用了

2113
01:27:19,100 --> 01:27:19,870
So why is it not working?
为什么它不工作了呢

2114
01:27:20,940 --> 01:27:23,640
Okay, well, we have this nice diagnostic history, but
我们是有这个 diagnosticHistory

2115
01:27:23,640 --> 01:27:25,440
we never actually set it.
但我们从来没有 set 过它

2116
01:27:25,440 --> 01:27:27,270
Okay, it's always just empty.
它就一直是空的了

2117
01:27:27,280 --> 01:27:28,540
And so how are we gonna set it, though?
我们通过什么方法 set 它呢

2118
01:27:28,540 --> 01:27:30,980
We are sub class of HappinessViewController.
这个类是 HappinessViewController 的子类

2119
01:27:30,980 --> 01:27:36,110
Well, we can just override our var happiness from
我们直接重写 happiness 变量

2120
01:27:36,120 --> 01:27:40,080
our super class, and do a didSet of our own in here.
在这里写一个自己的 didSet

2121
01:27:40,090 --> 01:27:43,420
So that happiness has its own didSet.
happiness 有它自己的 didSet

2122
01:27:43,420 --> 01:27:45,120
And we're gonna add our own didSet here,
添加自己的 didSet

2123
01:27:45,120 --> 01:27:48,960
which is we're gonna say the diagnosticHistory plus equals
输入代码 diagnosticHistory += happiness

2124
01:27:48,960 --> 01:27:51,360
the happiness, okay?
OK?

2125
01:27:51,360 --> 01:27:53,300
You can use plus equals with an Array but
你可以对 Array 进行 += 操作

2126
01:27:53,300 --> 01:27:55,260
you have to remember that the argument has to be an Array,
但是你得记住，参数需要是另外一个 Array

2127
01:27:55,270 --> 01:27:57,900
so if you just want to add one thing,
如果你想给它添加一个元素

2128
01:27:57,900 --> 01:28:00,540
you can just wrap a little Array around it here, okay?
就需要给参数加一个方括号

2129
01:28:00,540 --> 01:28:04,010
So here, it's perfectly fine to override a var from your
在这里，重写父类的变量

2130
01:28:04,010 --> 01:28:05,320
super class.
是完全没有问题的

2131
01:28:05,320 --> 01:28:06,640
If you go look at our super class,
如果你查看一下父类

2132
01:28:06,640 --> 01:28:10,910
happiness It has a var and even does it's own didSets.
happiness 变量有它自己的 didSet

2133
01:28:10,910 --> 01:28:14,910
So I'm overriding this var, and I do my own didSet,
所以我重写了这个变量，执行我自己的 didSet

2134
01:28:14,920 --> 01:28:18,520
it does not override or replace this didSet.
它没有覆盖父类的 didSet

2135
01:28:18,520 --> 01:28:21,390
So it's gonna do this didSet, and
它只是先执行了父类的 didSet

2136
01:28:21,390 --> 01:28:23,320
then it's gonna do this didSet.
然后再执行子类的

2137
01:28:23,320 --> 01:28:25,260
So, it'll do both of them.
两个都会执行

2138
01:28:25,260 --> 01:28:27,190
So it's a really nice feature, the property observers,
所以这是个很不错的特性，property observer

2139
01:28:27,190 --> 01:28:29,830
when you override they don't replace the super class as
当你重写的时候，并没有取代父类的

2140
01:28:29,830 --> 01:28:31,800
one, they add on to it.
而是添加了一个

2141
01:28:32,770 --> 01:28:34,380
Okay.
OKay.

2142
01:28:34,380 --> 01:28:36,000
So now our diagnostic history is being added.
所以诊断历史已经添加好了

2143
01:28:36,000 --> 01:28:37,630
So hopefully now when we go and
希望现在运行程序

2144
01:28:37,640 --> 01:28:39,440
look in our diagnostic history, it will work.
能够看到诊断的历史

2145
01:28:39,440 --> 01:28:41,200
So here we'll go dancing tree.
现在点击 Dancing Tree

2146
01:28:41,210 --> 01:28:42,770
Look up here.
查看一下这里

2147
01:28:42,770 --> 01:28:43,870
And look at that!
看！

2148
01:28:43,870 --> 01:28:45,640
We've got our diagnostic history.
我们已经拥有了诊断的历史

2149
01:28:45,640 --> 01:28:47,680
Let's go over and do golden bear.
再试试 Golden Bear

2150
01:28:47,680 --> 01:28:48,490
Oh.
哦

2151
01:28:48,490 --> 01:28:49,310
That's kind of Interesting.
有点意思

2152
01:28:49,310 --> 01:28:50,480
This is not a very good history.
这个诊断历史并不完整

2153
01:28:50,480 --> 01:28:52,910
It's only remembering the last thing I redo.
它只记录了我上次点击的记录

2154
01:28:52,920 --> 01:28:56,650
I wonder why it only remembers the last thing I redo.
我想知道它为什么只记录了上一次的记录

2155
01:28:56,650 --> 01:28:57,250
That's bad.
不对

2156
01:28:57,250 --> 01:28:58,420
That's a bug.
这是一个 bug

2157
01:28:58,420 --> 01:29:01,090
So, why has that happened?
什么使得这种情况发生了呢

2158
01:29:01,090 --> 01:29:05,990
Well, I did it this way to show you, and to remind you,
我之所以这样做，是想要提醒你

2159
01:29:05,990 --> 01:29:08,760
that these segues, all of these segues that
这些所有的 segue

2160
01:29:08,760 --> 01:29:13,130
are happening here, they are always creating a new MVC.
每次跳转的时候，都会创建一个新的 MVC

2161
01:29:13,130 --> 01:29:17,430
So this segue, when we click on golden bear, dancing tree,
所以当我们每一次点击这些按钮

2162
01:29:17,440 --> 01:29:20,400
and it segues to this, it creates a brand new MVC.
程序跳转到这里，创建了一个新的 MVC

2163
01:29:20,410 --> 01:29:23,770
And since this is a brand new DiagnosedHappinessViewController
这个新的 DiagnosedHappinessViewController

2164
01:29:23,770 --> 01:29:28,140
it's going to get a brand new
也会有一个新的

2165
01:29:28,150 --> 01:29:31,210
diagnostic history, which is going to be empty.
空的诊断历史

2166
01:29:31,210 --> 01:29:32,480
So it is constantly going to
所以每次跳转的时候

2167
01:29:32,480 --> 01:29:34,480
be reentering it every time we segue.
都会擦除之前的记录

2168
01:29:34,480 --> 01:29:36,200
We really need to
我们需要把这些诊断记录

2169
01:29:36,200 --> 01:29:37,920
store this diagnostic history somewhere else.
放在其他的地方

2170
01:29:37,920 --> 01:29:39,850
We can't just have it be in a far here.
我们不能单单把它放到这里

2171
01:29:39,860 --> 01:29:43,620
And a great place to have permanent storage, of course,
适合存放这些记录的地方是程序的

2172
01:29:43,620 --> 01:29:46,490
is in its future defaults.
NSUserDefaultss

2173
01:29:46,490 --> 01:29:47,880
Okay.
Okay.

2174
01:29:47,880 --> 01:29:49,260
So let's change this diagnosticHistory.
我们把 diagnosticHistory 改变一下

2175
01:29:49,260 --> 01:29:52,230
Instead of being a stored property here,
用计算属性替代

2176
01:29:52,230 --> 01:29:55,370
let's change it to be a computed property.
之前的存储属性

2177
01:29:55,370 --> 01:29:57,100
So I'm gonna have it be an Int.
它是 Int 类型的

2178
01:29:57,100 --> 01:29:59,140
And it's gonna become computed, so
因为它是计算属性

2179
01:29:59,140 --> 01:30:00,470
it's gonna have a get.
所以它需要一个 get

2180
01:30:00,470 --> 01:30:01,540
And the set.
和 set

2181
01:30:01,540 --> 01:30:03,510
And in the get and the set here, and
在 get 和 set 中

2182
01:30:03,510 --> 01:30:05,570
I'm gonna go Into UserDefaults.
需要 UserDefaults

2183
01:30:07,110 --> 01:30:09,380
Put this diagnostic history Into UserDefaults, and
把诊断历史放入 UserDefaults 中

2184
01:30:09,380 --> 01:30:10,880
out of UserDefaults.
或者从 UserDefaults 中获取

2185
01:30:10,880 --> 01:30:13,110
Since I'm going to be using UserDefaults,
既然我要使用 UserDefaults

2186
01:30:13,120 --> 01:30:16,950
I'm just gonna create a little private let called defaults.
我创建一个 private 常量 defaults

2187
01:30:16,950 --> 01:30:17,920
Which is just gonna be the
它等于

2188
01:30:17,920 --> 01:30:20,450
NSUserDefaults.standardUserDefaults.
NSUserDefaults.standardUserDefaults.

2189
01:30:20,460 --> 01:30:23,160
You remember this is like a shared version of any of
你们还记得

2190
01:30:23,160 --> 01:30:24,460
those UserDefaults that we get.
这个获取到的 UserDefaults 吗

2191
01:30:24,460 --> 01:30:27,060
The whole app is gonna be sharing this, and
整个 App 都共享这一个对象

2192
01:30:27,060 --> 01:30:31,030
using it to read and write from NSUserDefaults.
靠它读取或写入 NSUserDefaults

2193
01:30:31,030 --> 01:30:32,110
Okay. This is nice,
还不错

2194
01:30:32,110 --> 01:30:33,200
it's convenient to have this.
有它还是很方便的

2195
01:30:33,200 --> 01:30:35,000
Makes the code a little more readable to
有了这个变量，代码更具有可读性

2196
01:30:35,000 --> 01:30:36,300
have this be repeated everywhere,
我们没必要每次都重复这些

2197
01:30:36,300 --> 01:30:39,800
versus just this little short thing right here.
只需要简单地变量名就可以了

2198
01:30:39,810 --> 01:30:42,240
All right. So how am I going to get the
怎么写 defaults 的

2199
01:30:42,240 --> 01:30:45,580
defaults and set the defaults, well let's do set first.
get 和 set 呢？我们先处理 set

2200
01:30:45,580 --> 01:30:48,410
Once we set maybe it will be easier to imagine our get.
一旦完成了 set，get 也比较容易想了

2201
01:30:48,410 --> 01:30:49,780
So I am just going to go to defaults,
所以，我只是要去使用 defaults

2202
01:30:49,780 --> 01:30:53,680
I am going to set an object and remember that this is
我准备创建一个对象并且记住它是一个 AnyObject

2203
01:30:53,680 --> 01:30:56,480
any object, but it has to be a property list, okay?
但它必须是一个属性列表，明白？

2204
01:30:56,490 --> 01:30:59,220
But luckily an Array of Ints,
但是幸运的是它是一个 Int 型的数组

2205
01:30:59,220 --> 01:31:02,320
which is what our diagnostic history is.
这就是我们的诊断历史

2206
01:31:02,330 --> 01:31:04,630
Sorry, this isn't an Array of Ints,
抱歉，这不是一个 Int 型数组

2207
01:31:04,630 --> 01:31:09,160
this diagnose is an Array of Ints,
这个诊断是一个 Int 型的数组

2208
01:31:09,160 --> 01:31:12,130
that is a property so luckily, we can do that.
很幸运的是这只是一个属性，我们可以操作它

2209
01:31:12,130 --> 01:31:14,500
And here we're in the setting, okay, so
在这里我们在 set 中

2210
01:31:14,500 --> 01:31:16,840
we're just gonna put our new value here.
所以我们只需要把我们的新的值放到这里

2211
01:31:16,840 --> 01:31:19,770
So that's gonna be an Array of Ints, the new value.
所以 newValue 将会是一个 Int 型的数组

2212
01:31:19,770 --> 01:31:22,910
For key we need a key, so let's go back down to
我们需要一个 Key，所以让我们回到

2213
01:31:22,910 --> 01:31:25,940
our constants here and add another one, and
常量这里再添加一个

2214
01:31:25,950 --> 01:31:30,250
this is going to be our called defaults key, for the history.
起名为 DefaultsKey

2215
01:31:30,250 --> 01:31:34,320
And we can really put anything we want in here, any name for
并且我们可以起任何名字

2216
01:31:34,320 --> 01:31:38,220
the key, but remember that default is a database that is
但是记住这是默认的数据库

2217
01:31:38,220 --> 01:31:41,790
shared in our entire application, so we might want
在我们的整个应用程序中共享，所以我们也许想要

2218
01:31:41,790 --> 01:31:44,860
to kind of name space it a little bit by saying
起一个带有命名空间的名字

2219
01:31:44,860 --> 01:31:48,430
diagnosedHappinessViewController.History or
diagnosedHappinessViewController.History 或者

2220
01:31:48,430 --> 01:31:50,130
something like that.
一些类似于这样的名字

2221
01:31:50,130 --> 01:31:54,300
So this is just a naming convention to throw the name
所以，这只是一个命名约定将

2222
01:31:54,300 --> 01:31:57,300
of the ViewContoller or the name of the class in general.
ViewContoller 的名字 或者类的名字放到

2223
01:31:57,310 --> 01:31:59,340
That is writing to the default in front.
名字的前面

2224
01:32:00,510 --> 01:32:01,880
You don't have to do this.
你不必做成这样

2225
01:32:01,880 --> 01:32:05,280
This is purely something you just want to be consistent
这只是使你的程序

2226
01:32:05,280 --> 01:32:06,750
with in your whole application and
保持一致并且

2227
01:32:06,750 --> 01:32:09,150
how you divide up this name space for the defaults,
对于 defaults，把它分成不同的命名空间

2228
01:32:09,150 --> 01:32:12,920
because this is a global name space inside your application.
因为在你的应用里这是一个全局的命名空间

2229
01:32:14,020 --> 01:32:18,060
So this will be our History.DefaultsKey.
这里写 History.DefaultsKey

2230
01:32:18,060 --> 01:32:21,630
All right, so that's the new write our any time we set this
每一次 set 以后

2231
01:32:21,630 --> 01:32:25,800
diagnostic history it's gonna write it out to user defaults.
我们创建的这个诊断历史，它将会写在用户的 defaults 中

2232
01:32:25,800 --> 01:32:27,100
Then similarly we can get it
那么同样的，我们处理一下 get 方法

2233
01:32:27,100 --> 01:32:30,970
out by just returning defaults.objectForKey.
直接通过返回 defaults.objectForKey

2234
01:32:30,970 --> 01:32:32,130
Same thing.
这都是类似的

2235
01:32:32,140 --> 01:32:33,300
This History.DefaultsKey.
这个 History.DefaultsKey

2236
01:32:33,300 --> 01:32:37,440
But one thing I wanna make sure of is that it's
但是有一件我想要确定的关于这个的事情是

2237
01:32:37,440 --> 01:32:39,240
always an Array of Int.
它始终是一个 Int 型的数组

2238
01:32:39,240 --> 01:32:41,710
So I'm gonna do as Array of Int.
所以我把它转型成 Int 数组

2239
01:32:41,710 --> 01:32:45,150
And if that returns nil then I'm gonna turn empty Array.
并且如果那个返回一个空值的话我将要把它转为一个空的数组

2240
01:32:45,150 --> 01:32:47,530
Okay. So if I have
Okay，如果我

2241
01:32:47,530 --> 01:32:49,920
never saved the diagnostic history to the defaults for
从没有存储诊断记录到 defaults 中

2242
01:32:49,920 --> 01:32:52,020
example, then this is going to come back nil,
那么这个将会返回一个空值回来

2243
01:32:52,020 --> 01:32:54,620
okay, but I never have saved it before.
okay，但是我从来没有存储过它

2244
01:32:54,620 --> 01:32:55,690
So we'll start out with a nice,
所以我们将会在开始时拥有一个漂亮的

2245
01:32:55,690 --> 01:32:56,920
empty Array in that case.
空的数组

2246
01:32:58,330 --> 01:33:00,430
Okay.
Okay.

2247
01:33:00,430 --> 01:33:02,530
And also, if somehow some junk had got written here that
同样的，如果一些杂乱的数据被写到了这里

2248
01:33:02,530 --> 01:33:03,690
wasn't in an Array of Int for
由于一些原因不是 Int 型的数组

2249
01:33:03,700 --> 01:33:05,600
some reason, then this would also be nil and
那么这也将会是空值并且

2250
01:33:05,600 --> 01:33:06,900
we would start out with a fresh Array.
我们将以一个新的数组开始

2251
01:33:06,900 --> 01:33:09,670
It would be kind of a weird case, but anyway so you
它也许会是一种奇怪的情况，但是无论如何你可以

2252
01:33:09,670 --> 01:33:14,100
can see a simple way here to read and write from default.
在这里看到一种使用 default 进行读写的简单的方式

2253
01:33:14,110 --> 01:33:19,270
Okay make sense, all right so now let's go run around and
好的体会一下，所以现在让我们运行起来看一下

2254
01:33:19,280 --> 01:33:22,310
see if this fixed our problem, of our defaults not
如果这个修复我们的问题，我们的 defaults 有没有起作用

2255
01:33:22,310 --> 01:33:24,650
lying around, so let's see golden bear, dancing tree,
所以让我们看 Golden Bear，Dancing Tree

2256
01:33:24,650 --> 01:33:26,350
buckeye, put a whole bunch in there,
Buckeye，放了几个数据

2257
01:33:26,350 --> 01:33:28,720
history it's remembering them all.
历史记录它把他们全记下来了

2258
01:33:28,720 --> 01:33:31,800
Okay.
Okay.

2259
01:33:31,800 --> 01:33:34,890
Golden Bear, 0, Dancing Tree, 100.
Golden Bear, 0, Dancing Tree, 100.

2260
01:33:34,890 --> 01:33:36,160
Okay?
明白？

2261
01:33:36,160 --> 01:33:38,460
That looks quite awesome.
这看起来很不错

2262
01:33:38,460 --> 01:33:39,660
All right.
好的

2263
01:33:39,660 --> 01:33:40,860
Let's try one other thing here.
让我们在这里尝试另外一件事

2264
01:33:40,860 --> 01:33:42,060
Let's go try running this on an iPhone.
让我们在 iPhone 上运行这个程序

2265
01:33:42,060 --> 01:33:45,600
Let's see how this works on an iPhone, with our great new
让我们看看在 iPhone 上它是怎么工作的

2266
01:33:45,600 --> 01:33:48,730
feature here, and we'll see what it looks like.
使用我们这些新的特性，我们看看它到底什么样

2267
01:33:52,710 --> 01:33:54,870
All right so we got there a gold bear.
好吧，按一下 Golden Bear

2268
01:33:54,870 --> 01:33:56,370
We got a dancing tree.
点一下 Dancing Tree

2269
01:33:56,380 --> 01:33:58,510
We got the buckeye.
点一些 Buckeye

2270
01:33:58,510 --> 01:34:01,010
Okay, let's see that history.
好的，让我们看看那个 history

2271
01:34:01,010 --> 01:34:05,980
Whoa, that looks really, really bad, okay?
这看起来非常糟

2272
01:34:05,980 --> 01:34:07,020
Well, hm.
好的

2273
01:34:07,020 --> 01:34:08,520
So it didn't put up the history in
它没把历史记录放到类似 iPad

2274
01:34:08,520 --> 01:34:10,550
the little popover like that.
一样的，小的 popover 里

2275
01:34:10,550 --> 01:34:12,620
It took over the whole screen.
它占据了整个屏幕

2276
01:34:12,620 --> 01:34:16,120
Modal, it's what a modal segue looks like.
这看起来就是一个 modal 的 segue

2277
01:34:16,130 --> 01:34:17,390
And I put it up here, and
它占据了这里

2278
01:34:17,390 --> 01:34:19,660
smashed Into my carrier thing up here, and
把我运营商的地方都占据了

2279
01:34:19,660 --> 01:34:22,800
there's no way to get out of here there's no done button or
也没有办法退出，这里没有完成按钮

2280
01:34:22,800 --> 01:34:26,030
dismiss or something, because in a popover we don't need to
dismiss 之类的，因为在 popover 里我们不需要

2281
01:34:26,030 --> 01:34:28,770
dismiss because you just click on the background.
dismiss 因为你只需要点击一下背景

2282
01:34:28,770 --> 01:34:32,870
So you know, this is really a small amount of information I
所以你知道，我们可以把它放到 popover 中

2283
01:34:32,870 --> 01:34:36,810
could have put it in a popover there why did iOS adapt that
因为信息量很少，这里为什么 iOS

2284
01:34:36,810 --> 01:34:40,240
popover for the iPhone and put it to your screen?
把 popover 适配为 占据 iPhone 的整个屏幕呢？

2285
01:34:40,250 --> 01:34:42,580
Well, because it doesn't really know how big this is
好的，应为它的确不知道它将会变得多大

2286
01:34:42,580 --> 01:34:45,050
going to be and how much data is going to be drawn or
有多少数据将要被绘制或者怎么样绘制

2287
01:34:45,050 --> 01:34:48,690
whatever until it's being displayed.
直到它被显示出来

2288
01:34:48,690 --> 01:34:51,890
And so on an iPhone to be safe it always adapts
所以在 iPhone 上为了确保稳定，它通常会适应

2289
01:34:51,890 --> 01:34:54,820
popovers to make them full screen presentation like
popovers 使他们作为全屏展示像是

2290
01:34:54,830 --> 01:34:55,990
this to take over the screen.
这个接管了整个屏幕一样

2291
01:34:56,990 --> 01:34:59,060
Okay, but in this case, we don't actually want that.
好的，但是在这个例子中，我们实际上不想那样

2292
01:34:59,060 --> 01:35:00,700
We don‘t want that adaptation behavior.
我们不想要那个适配行为

2293
01:35:00,700 --> 01:35:02,900
We want to prevent this adaptation behavior so
我们想防止这个适配行为

2294
01:35:02,900 --> 01:35:06,200
they just keep putting it in its nice little popover.
只需要把这些数据放入 popover 里就可以了

2295
01:35:06,200 --> 01:35:07,770
It'll be perfectly fine in iPad and
它在 iPad 上看起来很不错

2296
01:35:07,770 --> 01:35:09,440
it will be perfectly fine for iPhone.
并且它在 iPhone 也会这样

2297
01:35:09,440 --> 01:35:13,140
So, how do we prevent this adaptation behavior
所以，我们如何阻止这个适配行为

2298
01:35:13,140 --> 01:35:14,610
from happening?
发生呢？

2299
01:35:15,610 --> 01:35:19,540
To do that, we need to get at that popover presentation
要想实现，我们需要得到那个 popoverPresentationController

2300
01:35:19,550 --> 01:35:24,180
controller I was talking to you about in the slides.
slide 中讨论过的那个

2301
01:35:24,180 --> 01:35:26,120
And it's pretty easy to get a hold of it.
并且得到它是非常容易的

2302
01:35:26,120 --> 01:35:27,550
Inside our prepare-
在 prepareForSegue 中

2303
01:35:27,550 --> 01:35:29,420
So here's our prepare in our diagnosed,
这个 DiagnosedHappinessViewController

2304
01:35:29,420 --> 01:35:32,720
DiagnosedHappinessViewController right here.
里面的

2305
01:35:32,720 --> 01:35:36,290
The same place down here where we're doing the preparation
在这里的同一个地方我们准备那些将要发生的事情

2306
01:35:36,290 --> 01:35:40,500
happening, we can also say if we can let,
我们也可以说

2307
01:35:40,500 --> 01:35:43,330
ppc I'll call it, equal the text view
if let ppc =

2308
01:35:43,330 --> 01:35:46,830
controller's PopoverPresentationController.
tvc.popoverPresentationController

2309
01:35:46,840 --> 01:35:49,450
Okay.
好的

2310
01:35:49,460 --> 01:35:52,070
So, this is a method in UI viewcontroller and
所以，这里是一个在 UIViewcontroller 中的方法并且

2311
01:35:52,080 --> 01:35:54,740
it'll return nil if you're not currently in the process of
它将会返回一个 nil

2312
01:35:54,740 --> 01:35:57,310
being presented in a popover.
如果你当前没有显示 popover

2313
01:35:57,310 --> 01:36:00,280
So if this segue if we changed this segue to
如果我们改变这个 segue

2314
01:36:00,280 --> 01:36:03,020
segue somehow else other than a popover,
跳转到不是 popover 的地方

2315
01:36:03,020 --> 01:36:06,990
maybe we wanted to go full modal for some reason or
也许我们因为某些原因想要完整的 modal 模式

2316
01:36:06,990 --> 01:36:09,690
we decided to push it on a navigation stack or
我们决定把它放入一个导航栈中或者

2317
01:36:09,690 --> 01:36:11,820
whatever then this would return nill and
其他怎么样，这将返回一个空值

2318
01:36:11,830 --> 01:36:14,060
so nothing that I'm gonna do right here would even happen.
这样的话我在这里做的任何事都将不会发生

2319
01:36:15,530 --> 01:36:18,050
So what am I going to do?
所以接下来我要做什么？

2320
01:36:18,050 --> 01:36:20,560
I'm just going to set the popoverPresentationControll-
我只是要设置 popoverPresentationController的

2321
01:36:20,570 --> 01:36:24,670
er's delegate to myself, and that's because the popover
delegate 给 self，那是因为 PopoverController 的

2322
01:36:24,670 --> 01:36:27,340
controller's delegate allows you to
delegate 允许你

2323
01:36:27,340 --> 01:36:31,510
have someone else control the way the presentation works.
让其他人控制 popover 工作的方式

2324
01:36:31,510 --> 01:36:35,340
And this is the first time you're seeing the
并且这是第一次你看到

2325
01:36:35,350 --> 01:36:39,380
idea of a delegate in an action in an iOS.
在 iOS 系统中的 delegate

2326
01:36:39,380 --> 01:36:41,280
Now you remember when we set ourselves as
现在你记住当我们设置我们自己作为

2327
01:36:41,280 --> 01:36:43,980
a delegate you can see there's an error right here it says
一个 delegate 的时候 你可以看到这里有一个错误

2328
01:36:43,990 --> 01:36:46,690
DiagnosedHappinessViewContro- ller does not conform to
它的意思是 DiagnosedHappinessViewController 没有符合

2329
01:36:46,690 --> 01:36:48,520
this protocol
这个 protocol

2330
01:36:48,520 --> 01:36:50,360
UIPopoverPrsentationControlle- rDelegate.
UIPopoverPrsentationControllerDelegate 的协议

2331
01:36:50,360 --> 01:36:54,630
And that's true, because up here we have to say we are a
这是真的，因为在这里我们必须说明我们是一个

2332
01:36:54,630 --> 01:36:56,760
UIPopoverPresentationControll- erDelegate.
UIPopoverPresentationControllerDelegate

2333
01:36:57,730 --> 01:36:59,060
Okay? And now,
明白？现在

2334
01:36:59,070 --> 01:37:03,770
once we put this on here, we have to go down here and
一旦我们把这个放在这里，我们必须去实现方法

2335
01:37:03,770 --> 01:37:08,440
actually implement that method, the method we want.
我们想要的那个方法

2336
01:37:08,440 --> 01:37:10,540
And this method that we want is called
并且那个我们想要的方法被称作

2337
01:37:10,540 --> 01:37:13,980
adaptivePresentationStyleForPresentationController.
adaptivePresentationStyleForPresentationController

2338
01:37:15,050 --> 01:37:18,000
Okay?
明白？

2339
01:37:18,000 --> 01:37:20,950
And this is basically saying, here's a popover controller.
这里的意思是，这里是一个 popoverController

2340
01:37:20,950 --> 01:37:23,180
You know how, in a delegate method, we
在一个 delegate 方法中

2341
01:37:23,190 --> 01:37:25,850
usually pass along the thing that's doing the delegation.
我们通常传递的东西在 delegation 中传递一样

2342
01:37:25,860 --> 01:37:29,120
So this is that same PopoverPresentationController being
所以这就是这个 popoverPresentationController

2343
01:37:29,130 --> 01:37:30,790
passed back to us.
被传递回来了

2344
01:37:30,790 --> 01:37:35,400
And it's saying, please return a presentation style which you
并且它说，请返回一种你想要的呈现方式

2345
01:37:35,400 --> 01:37:38,760
want and when you're adapting on the iPhone.
当你运行在 iPhone 上时

2346
01:37:38,770 --> 01:37:43,170
So I'm gonna return the UIModalPresentationStyle.None,
所以我返回 UIModalPresentationStyle.None

2347
01:37:43,170 --> 01:37:46,440
which means don't adapt, Okay do not when you're on
它的意思是不进行适配，不要在 iPhone 上进行适配

2348
01:37:46,440 --> 01:37:49,370
iPhone do no adaptations do what you normally do,
不做任何你通常做的修改

2349
01:37:50,310 --> 01:37:51,840
which is put the pop over in a little window.
把 popover 放到一个小的窗口里

2350
01:37:53,310 --> 01:37:54,480
And that's it. That's all I
就是这样

2351
01:37:54,480 --> 01:37:56,310
need to do to suppress that.
这就是我需要做的

2352
01:37:56,310 --> 01:37:58,680
Now, by the way,
现在，顺便说一下

2353
01:37:58,680 --> 01:38:01,050
in addition to PPC delegating inside here, I could, there
对于 ppc 的 delegate

2354
01:38:01,050 --> 01:38:04,690
are other methods in PopoverPresentationController.
还有其他 PopoverPresentationController 的方法

2355
01:38:04,690 --> 01:38:10,190
You can go take a look at, and they will show you things that
你可以查看一下文档

2356
01:38:10,190 --> 01:38:12,860
you can find out about what's going on with the popover.
你可以发现关于 popover 相关的东西

2357
01:38:12,860 --> 01:38:16,360
But setting its delegates so that you can control that
但是设置成它的 delegate 这样的话你可以控制

2358
01:38:16,370 --> 01:38:19,230
adaptation is a popular thing to want to do.
你想做的任何适配操作

2359
01:38:19,240 --> 01:38:20,300
All right.
好的

2360
01:38:20,300 --> 01:38:21,840
So let's go try it now on the iPhone again.
所以让我们在 iPhone 上再次尝试一次

2361
01:38:21,840 --> 01:38:25,770
Here we go let's hit history and
这里让我们敲击 history

2362
01:38:25,770 --> 01:38:28,670
now it's working okay coming up in the pop over here.
现在它在这里弹出的 popover 中工作的很好

2363
01:38:28,680 --> 01:38:31,980
Let's go add history let's go another dancing tree over here
让我们添加 history，让我们在这里点击 Dancing Tree

2364
01:38:31,980 --> 01:38:34,780
now we've dancing tree added there.
现在我们已经在这里添加了 Dancing Tree

2365
01:38:34,780 --> 01:38:37,150
Okay?
明白？

2366
01:38:37,150 --> 01:38:39,520
And it'll work fine landscape or portrait.
并且它在垂直和水平模式下工作的很好

2367
01:38:42,590 --> 01:38:42,990
Okay?
明白？

2368
01:38:42,990 --> 01:38:43,390
Questions about that?
有关于这些的问题么？

2369
01:38:44,560 --> 01:38:46,440
All right.
好的

2370
01:38:46,440 --> 01:38:48,320
The last thing I want to do with the pop over is
最后一件我想对 popover 做的事情是

2371
01:38:48,330 --> 01:38:50,160
when we ran this pop over,
当我运行这个 popover 的时候

2372
01:38:50,160 --> 01:38:51,990
over here, you notice that it's kind of big.
在这里，你注意到它是很大的

2373
01:38:52,000 --> 01:38:54,600
It's covering the whole smiley face for no reason,
它无缘无故地遮盖了住了整个笑脸

2374
01:38:54,600 --> 01:38:58,530
because it really only needs to be big enough to hold that.
因为它的确是需要变得足够大

2375
01:38:58,540 --> 01:39:02,300
Well, that's because really again the popover presentation
好吧，那是因为 PopoverPresentationController

2376
01:39:02,310 --> 01:39:05,710
controller really has no idea how big this information is
不知道在这里的信息是有

2377
01:39:05,710 --> 01:39:06,340
in here.
多大

2378
01:39:07,380 --> 01:39:09,240
And, but there is a way to tell it.
但是，这里有一种方式可以告诉它

2379
01:39:09,240 --> 01:39:11,910
And if you think about who knows what the size of
如果你考虑谁知道什么样的尺寸是最好的

2380
01:39:11,910 --> 01:39:15,250
this is best, well it's the TextViewController.
那就是 TextViewController

2381
01:39:15,250 --> 01:39:16,400
Cuz the text view
因为 TextViewController

2382
01:39:16,400 --> 01:39:17,550
controller's the one that's gonna display this.
是将会在这里显示的控件之一

2383
01:39:17,550 --> 01:39:20,950
It knows what it's preferred size would be.
它知道它的首选的大小将会是多少

2384
01:39:20,950 --> 01:39:23,050
So as we're talking about in the slides.
所以当我们在 slide 中讨论的时候

2385
01:39:23,060 --> 01:39:25,090
Let's go ahead and make it so
让我们继续实现它

2386
01:39:25,090 --> 01:39:27,790
the TextViewController reports its preferred size.
这样的话 TextViewController 会报告它的首选的尺寸

2387
01:39:27,790 --> 01:39:33,430
So I'm gonna go over here to the TextViewController.
所以我将到这个 TextViewController 中

2388
01:39:33,430 --> 01:39:35,320
Okay.
好的

2389
01:39:35,320 --> 01:39:37,200
Now the prefered size is just a var in
现在首选的尺寸在 UIViewController 是一个 var

2390
01:39:37,200 --> 01:39:41,300
UIV controller so the TextViewController could set that
所以 TextViewController 可以对它进行设置

2391
01:39:41,310 --> 01:39:45,640
somewhere, it could just say preferredContentSize equals
可以进行 preferredContentSize = _ 之类的操作

2392
01:39:45,640 --> 01:39:49,910
something, but since this is a subclass UIV controller and
但是因为这是一个 UIViewController 的子类并且

2393
01:39:49,910 --> 01:39:55,150
the content size would change every time this is changing.
内容的大小可能随时发生变化

2394
01:39:55,150 --> 01:39:57,050
And also might change depending on
也可能根据一些内容进行改变例如

2395
01:39:57,050 --> 01:39:59,720
how big a space the popover is being popped Into.
当 popover 进入的时候它占了多大

2396
01:40:01,060 --> 01:40:06,560
We can actually do better here by overriding the var
实际上我们可以在这里做的更好，通过重写这个 var

2397
01:40:06,560 --> 01:40:12,400
preferredContentSize, which is a CGSsize.
preferredContentSize，类型是 CGSsize

2398
01:40:12,400 --> 01:40:16,730
I'm going to override it and do the get set.
我准备重写它并且做好 get 和 set.

2399
01:40:16,740 --> 01:40:19,200
Okay, so it's going to be a computed property,
好的，所以这将会是一个计算属性

2400
01:40:19,210 --> 01:40:20,940
get and set.
get 和 set.

2401
01:40:20,940 --> 01:40:23,440
And on the setting side of this,
在 set 中

2402
01:40:23,440 --> 01:40:25,440
if someone set the preferredContentSize,
如果某人设置好了 preferredContentSize

2403
01:40:25,440 --> 01:40:27,140
I'm just gonna let my super class.
我只需要让我的父类的

2404
01:40:27,150 --> 01:40:32,480
preferredContentSize do its thing, okay?
preferredContentSize

2405
01:40:32,480 --> 01:40:33,920
We'll just let the new value do that.
等于 newValue

2406
01:40:33,920 --> 01:40:36,180
So I'm going to let my super class handle it or
所以当有人 set 的时候

2407
01:40:36,190 --> 01:40:36,880
someone sets it.
我让父类来处理

2408
01:40:37,920 --> 01:40:40,920
All right?
明白？

2409
01:40:40,920 --> 01:40:43,920
But if someone tries to get it, then if my text view has
但是如果有人想要 get 它，接下来如果我的 textView

2410
01:40:43,930 --> 01:40:46,890
been set, so if this outlet has been set, and if I'm in
已经 set 了，所以如果这个 outlet 已经被设置了，并且如果

2411
01:40:46,900 --> 01:40:52,100
the middle of being presented on screen, okay, then I can
我在中途把它呈现到了屏幕上，好的，接下来我可以

2412
01:40:52,100 --> 01:40:55,100
ask the text view what its preferred size would be.
向 textView 询问它的首选的尺寸将会是多少

2413
01:40:56,100 --> 01:40:58,540
Okay, so we're going to let the textView do the work here.
好的，所以我们准备让 textView 处理这里

2414
01:40:58,540 --> 01:40:59,870
So what does that look like?
所以它看起来的怎么样？

2415
01:41:01,510 --> 01:41:03,910
So, we might say,
我们也许会说

2416
01:41:03,910 --> 01:41:09,110
for example here, if textView does not equal nil.
if textView != nil

2417
01:41:09,110 --> 01:41:13,180
Oops, I've got sticky keys on here, so
哦，我启用了粘滞键

2418
01:41:13,180 --> 01:41:15,480
you see that in the lower corner there.
你可以在右下角看得到

2419
01:41:15,490 --> 01:41:18,650
If textView doesn't equal nil, and if we're
如果 textView 不等于空，并且它正呈现在屏幕中

2420
01:41:18,660 --> 01:41:22,120
being presented right now so how can we find that out?
怎么能知道正在屏幕当中显示？

2421
01:41:22,130 --> 01:41:25,530
UIViewController has another great var
UIViewController 拥有另一个 var

2422
01:41:25,530 --> 01:41:28,760
called presentingViewController.
叫做 presentingViewController

2423
01:41:29,900 --> 01:41:31,900
The presentingViewController is the View Controller that
presentingViewController 是一个 ViewController

2424
01:41:31,900 --> 01:41:35,940
is currently presenting you via some sort of segue.
通过某种 segue 正在屏幕中显示的 ViewController

2425
01:41:35,940 --> 01:41:39,610
So, in the popover case, it's going to be that
所以，在 popover 情形中

2426
01:41:39,610 --> 01:41:41,840
DiagnosedViewController's gonna be presenting me.
这个 ViewController 是 DiagnosedViewController

2427
01:41:41,840 --> 01:41:44,610
But whoever it is, I can check to make sure that's not nil.
但是无论是谁在呈现，我可以检查它以确保它不是 nil

2428
01:41:45,550 --> 01:41:48,450
So, this is only gonna happen right here,
所以这里只会在

2429
01:41:48,450 --> 01:41:51,180
in the case where I'm in the middle of a presentation.
presentingViewController 不是 nil 的时候才会运行

2430
01:41:51,180 --> 01:41:53,550
Okay, also my text here not to be no it's not clear that I
textView 在这里没必要检查一下

2431
01:41:53,550 --> 01:41:56,720
really need to set this because, probably my
也许在这之前

2432
01:41:56,720 --> 01:41:59,690
outlets are all gonna be set before this gets there.
outlets 已经都被设置好了

2433
01:41:59,690 --> 01:42:03,790
But just to be safe I'll set both of these things and
这样做只是为了保险起见

2434
01:42:03,800 --> 01:42:06,600
in this case I'm gonna let the text view tell me a size that
在这里返回 textView.sizeThatFits

2435
01:42:06,600 --> 01:42:10,500
fits inside my PresentingViewControllers.
PresentingViewController.

2436
01:42:10,500 --> 01:42:13,030
Viewbounds.size.
Viewbounds.size.

2437
01:42:14,040 --> 01:42:15,300
'Kay?
明白？

2438
01:42:15,300 --> 01:42:18,210
And this of course we will need to unwrap.
当然我们需要解包

2439
01:42:18,210 --> 01:42:20,090
But it's okay,
但是这没关系

2440
01:42:20,090 --> 01:42:21,970
cuz we checked to make sure it's not nil first.
因为我们去检查确保它在开始的时候不为空

2441
01:42:21,980 --> 01:42:23,760
'Kay?
明白？

2442
01:42:23,760 --> 01:42:25,540
So this is the bounds.size of our presentingViewController.
所以这是我们 presentingViewController 的 bounds.size

2443
01:42:25,550 --> 01:42:27,710
So in the diagnosedHappinessViewContro-
所以在 DiagnosedHappinessViewController 中

2444
01:42:27,720 --> 01:42:30,920
ller case, it's the whole scene, basically.
它是整个屏幕

2445
01:42:30,920 --> 01:42:34,190
And we're just gonna see what is a good size that fits.
我们只是想看到什么样是适合的尺寸

2446
01:42:34,190 --> 01:42:36,860
Now this is only a preferredContentSize.
现在这个只是 preferredContentSize

2447
01:42:36,860 --> 01:42:39,420
So if this size that fits were really huge, for
它适应的尺寸是非常巨大的

2448
01:42:39,430 --> 01:42:43,230
example, the popover's still going to limit the size to
popover 仍然在限定的尺寸范围中

2449
01:42:43,230 --> 01:42:45,130
whatever its restrictions are, okay?
限制它自己的大小

2450
01:42:45,130 --> 01:42:47,310
So we just prefer.
所以我们只是提前设定

2451
01:42:47,320 --> 01:42:49,500
This is not actual content size, it's just preferred.
这不是实际的内容大小，只是希望它的大小

2452
01:42:49,500 --> 01:42:50,770
Now, what if we're not in
现在，如果

2453
01:42:50,770 --> 01:42:52,030
the middle of presenting right here?
presentingViewController 是 nil

2454
01:42:52,040 --> 01:42:55,610
Well, then once again I'm going to let my
好吧，然后再一次我去让我的

2455
01:42:55,610 --> 01:42:58,940
super class do the work here so whatever it
父类完成这里的工作

2456
01:42:58,940 --> 01:43:01,880
would normally return I'm going to have it return.
无论正常返回的是什么，我都得让它返回一个值

2457
01:43:01,880 --> 01:43:04,780
So remember I'm overriding this my super class.
记住，我是在重写

2458
01:43:04,780 --> 01:43:06,130
So really I'm just getting involved in
所以我只是恰巧

2459
01:43:06,130 --> 01:43:07,480
this one case where I happen to be in the middle of
在这个案例中，屏幕中展示了我

2460
01:43:07,480 --> 01:43:10,250
presenting something, then I pretty much know what my
然后我非常想知道我

2461
01:43:10,250 --> 01:43:13,490
size is based on my text field okay?
基于 textfield 的尺寸是多少，明白？

2462
01:43:14,490 --> 01:43:17,690
So let's run and see how that fixes it.
所以让我们运行并且看下问题是否得到解决

2463
01:43:17,690 --> 01:43:20,560
All right, so the goal is to get our history, excellent.
好的，所以目标是得到 history，非常棒

2464
01:43:20,560 --> 01:43:23,430
Now notice also, our history was remembered even
现在可以看到，我们的 history 已经被记住了

2465
01:43:23,430 --> 01:43:26,670
after we quit our app and run it again because we are using
即使我们退出了的应用又重新运行了一下它，因为我们使用了

2466
01:43:26,670 --> 01:43:30,300
defaults which these defaults remember things when it quits.
NSUserDefault，退出程序也能存储数据

2467
01:43:30,300 --> 01:43:34,570
So here we got 0, 150, 100, let's go back over here and
所以这里我们得到了0, 150, 100,让我们重新回到这里并且

2468
01:43:34,570 --> 01:43:35,470
do nothing.
什么都不做

2469
01:43:35,480 --> 01:43:36,610
25.
25

2470
01:43:36,610 --> 01:43:37,510
Looks good.
看起来很棒

2471
01:43:37,510 --> 01:43:40,040
Let's go back and do Golden Bear.
让我们返回并且点一下 Golden Bear

2472
01:43:40,050 --> 01:43:42,780
Zero, so it's working beautifully there.
0，所以它在这里表现地很不错

2473
01:43:42,780 --> 01:43:46,150
Okay, again it works no matter what size you use.
好的，无论你的尺寸是多少，它都工作地不错

2474
01:43:46,150 --> 01:43:52,520
Go on there and it will also work on the iPad as well.
它同样在 iPad 上工作的很好

2475
01:43:52,520 --> 01:43:57,660
There we go.
启动程序

2476
01:43:57,660 --> 01:43:58,730
So, there's the history.
点击 history

2477
01:43:58,730 --> 01:44:00,530
Shows it up there.
展示了出来

2478
01:44:00,530 --> 01:44:02,730
There too.
横屏也一样

2479
01:44:02,730 --> 01:44:05,930
Okay, so that's it for popovers, but we also managed
好的，popover 就到这里

2480
01:44:05,930 --> 01:44:09,040
to cover a couple other things there along the way.
demo 过程中也涉及了几点知识

2481
01:44:09,040 --> 01:44:12,200
Most notably was the polymorphism of
尤其是 ViewController 的

2482
01:44:12,210 --> 01:44:14,010
View Controllers.
多态性

2483
01:44:14,940 --> 01:44:17,740
And we were in our Storyboard here,
在 Storyboard 中

2484
01:44:17,740 --> 01:44:20,450
we ended up actually creating a sub class,
我们创建了一个子类

2485
01:44:20,450 --> 01:44:23,580
DiagnosedHappinessViewContro- ller here to add some more
去添加更多的功能

2486
01:44:23,580 --> 01:44:25,480
functionality, okay?
明白？

2487
01:44:25,480 --> 01:44:27,620
And that is not an edge case,
并且这不是在一种边缘情况

2488
01:44:27,620 --> 01:44:28,950
that's a common thing you wanna do.
这么做很正常

2489
01:44:28,950 --> 01:44:31,650
You have some reusable HappinessViewController or
你有一些可重复使用的 HappinessViewController 或者

2490
01:44:31,660 --> 01:44:33,620
something like HappinessViewController.
一些像是 HappinessViewController 的东西

2491
01:44:33,620 --> 01:44:36,660
You wanna use it, but you need to add something to it and
你想要使用它，但是你需要给它添加一些东西

2492
01:44:36,660 --> 01:44:37,460
you don't wanna change it.
你不想改变它

2493
01:44:37,460 --> 01:44:38,460
Well, that's exactly what
这就是

2494
01:44:38,460 --> 01:44:39,690
object oriented programming is for!
面向对象编程的特点

2495
01:44:39,700 --> 01:44:41,800
You can create a subclass of it and
你可以为它创建一个子类

2496
01:44:41,800 --> 01:44:48,600
add the methods that you wanna add to it, to your diagnosed.
添加一些你想要给它添加特定的方法

2497
01:44:48,600 --> 01:44:50,570
And what's kind of nice too
还不错的是

2498
01:44:50,570 --> 01:44:52,540
is DiagnosedViewController contains all the stuff that
DiagnosedViewController 中包含了所有

2499
01:44:52,540 --> 01:44:56,110
has to do with the diagnostic business and nothing else.
有关于诊断的事情，而没有其他别的东西

2500
01:44:56,110 --> 01:44:59,850
So this is a very nice class well contained,
所以这是一个非常好类

2501
01:44:59,850 --> 01:45:02,950
only has the diagnostic stuff in it.
只有关于诊断的东西

2502
01:45:02,950 --> 01:45:06,050
Okay, so that's it, and you don't need this for
这就是今天的内容

2503
01:45:06,050 --> 01:45:09,490
your homework per se, but there is an extra credit item
你不需要把它当成作业

2504
01:45:09,490 --> 01:45:13,320
to add a popover so hopefully you'll decide to tackle that.
但是 extra credit 中有关于 popover 的内容，希望你们能够解决

2505
01:45:15,430 --> 01:45:15,460
>> For more, please visit us at stanford.edu.
想要了解更多，请访问：stanford.edu
